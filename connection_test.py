# connection_test.py

import os
import subprocess
import logging
import requests, webbrowser
from datetime import datetime
from PyQt6.QtWidgets import QDialog, QVBoxLayout, QPushButton, QComboBox, QTextEdit, QMessageBox, QHBoxLayout, QFrame
from PyQt6.QtCore import QObject, QThread, pyqtSignal
from utils import run_hidden # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –æ–±–µ—Ä—Ç–∫—É –¥–ª—è subprocess
from config import APP_VERSION, LOGS_FOLDER  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from strategy_checker import StrategyChecker  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from dns_checker import DNSChecker
from dns_check_dialog import DNSCheckDialog

from tgram.tg_log_bot import send_log_file, check_bot_connection
from tgram.tg_log_delta import get_client_id
import platform

class ConnectionTestWorker(QObject):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
    update_signal = pyqtSignal(str)
    finished_signal = pyqtSignal()
    
    def __init__(self, test_type="all"):
        super().__init__()
        self.test_type = test_type
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ logs
        os.makedirs(LOGS_FOLDER, exist_ok=True)
        self.log_filename = os.path.join(LOGS_FOLDER, "connection_test_temp.log")
        
        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –§–õ–ê–ì –î–õ–Ø –ú–Ø–ì–ö–û–ô –û–°–¢–ê–ù–û–í–ö–ò
        self._stop_requested = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        for handler in logging.root.handlers[:]:
            logging.root.removeHandler(handler)
            
        logging.basicConfig(
            filename=self.log_filename,
            level=logging.INFO,
            format="%(asctime)s - %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S",
            encoding='utf-8'  # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        )
    
        file_handler = logging.FileHandler(self.log_filename, 'w', 'utf-8')
        file_handler.setFormatter(logging.Formatter("%(asctime)s - %(message)s", "%Y-%m-%d %H:%M:%S"))
        logging.getLogger().handlers = [file_handler]
    
    def stop_gracefully(self):
        """‚úÖ –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞"""
        self._stop_requested = True
        self.log_message("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–µ—Å—Ç–∞...")
    
    def is_stop_requested(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        return self._stop_requested
    
    def log_message(self, message):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ GUI."""
        if not self._stop_requested:  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            logging.info(message)
            self.update_signal.emit(message)

    def check_dns_poisoning(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç DNS –ø–æ–¥–º–µ–Ω—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º"""
        if self.is_stop_requested():
            return
        
        self.log_message("")
        self.log_message("=" * 40)
        self.log_message("üîç –ü–†–û–í–ï–†–ö–ê DNS –ü–û–î–ú–ï–ù–´ –ü–†–û–í–ê–ô–î–ï–†–û–ú")
        self.log_message("=" * 40)
        
        try:
            dns_checker = DNSChecker()
            results = dns_checker.check_dns_poisoning(log_callback=self.log_message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if results['summary']['dns_poisoning_detected']:
                self.log_message("")
                self.log_message("‚ö†Ô∏è –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
                self.log_message("1. –°–º–µ–Ω–∏—Ç–µ DNS –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ç–µ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞:")
                self.log_message("   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ: –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Üí –°–µ—Ç—å –∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç")
                self.log_message("   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞ ‚Üí –°–≤–æ–π—Å—Ç–≤–∞")
                self.log_message("   ‚Ä¢ TCP/IPv4 ‚Üí –°–≤–æ–π—Å—Ç–≤–∞ ‚Üí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ DNS:")
                
                if results['summary']['recommended_dns']:
                    dns_ip = dns_checker.dns_servers.get(results['summary']['recommended_dns'])
                    if dns_ip:
                        self.log_message(f"   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π: {dns_ip}")
                        self.log_message(f"   ‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: 8.8.4.4")
                else:
                    self.log_message("   ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π: 8.8.8.8 (Google)")
                    self.log_message("   ‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π: 1.1.1.1 (Cloudflare)")
                
                self.log_message("")
                self.log_message("2. –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã DNS –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Zapret")
                self.log_message("3. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à DNS –∫–æ–º–∞–Ω–¥–æ–π: ipconfig /flushdns")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS: {e}")
        
        self.log_message("")

    def ping(self, host, count=4):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç ping —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è."""
        if self.is_stop_requested():
            return False
            
        try:
            self.log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è URL: {host}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_hidden –Ω–∞–ø—Ä—è–º—É—é
            command = ["ping", "-n", str(count), host]
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º subprocess –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            try:
                # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º shell=False –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
                result = subprocess.run(
                    command,
                    capture_output=True,
                    timeout=10,
                    shell=False,
                    creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
                )
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ping: {e}")
                return False
            
            if self.is_stop_requested():
                return False
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            output = ""
            if result and result.stdout:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Windows
                for encoding in ['cp866', 'cp1251', 'utf-8', 'latin-1']:
                    try:
                        output = result.stdout.decode(encoding)
                        break
                    except:
                        continue
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º ignore
                if not output:
                    output = result.stdout.decode('utf-8', errors='ignore')
            
            # ‚úÖ –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã–≤–æ–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if output:
                debug_output = output[:200].replace('\n', ' ').replace('\r', '')
                self.log_message(f"[DEBUG] Ping output sample: {debug_output}")
            
            # ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì: –ë–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            en_success_patterns = [
                "bytes=", "Bytes=", "BYTES=",
                "time=", "Time=", "TIME=",
                "TTL=", "ttl=", "Ttl="
            ]
            
            # –†—É—Å—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            ru_success_patterns = [
                "–±–∞–π—Ç=", "–ë–∞–π—Ç=", "–ë–ê–ô–¢=",
                "–≤—Ä–µ–º—è=", "–í—Ä–µ–º—è=", "–í–†–ï–ú–Ø=",
                "TTL=", "ttl=", "Ttl="
            ]
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
            fail_patterns = [
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
                "unreachable", "timed out", "could not find", 
                "100% loss", "Destination host unreachable",
                "Request timed out", "100% packet loss",
                "General failure", "Transmit failed",
                # –†—É—Å—Å–∫–∏–µ
                "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "–ø—Ä–µ–≤—ã—à–µ–Ω", "–Ω–µ —É–¥–∞–µ—Ç—Å—è",
                "100% –ø–æ—Ç–µ—Ä—å", "–ó–∞–¥–∞–Ω–Ω—ã–π —É–∑–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "–ü—Ä–µ–≤—ã—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª", "100% –ø–æ—Ç–µ—Ä–∏",
                "–û–±—â–∏–π —Å–±–æ–π", "–°–±–æ–π –ø–µ—Ä–µ–¥–∞—á–∏"
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å - –∏—â–µ–º –ª—é–±–æ–π –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—Å–ø–µ—Ö–∞
            success_count = 0
            found_success = False
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for pattern in en_success_patterns:
                if pattern in output:
                    success_count = output.count(pattern)
                    found_success = True
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–µ
            if not found_success:
                for pattern in ru_success_patterns:
                    if pattern in output:
                        success_count = output.count(pattern)
                        found_success = True
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            is_failed = any(pattern.lower() in output.lower() for pattern in fail_patterns)
            
            # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–∫–µ—Ç–æ–≤
            # –ê–Ω–≥–ª–∏–π—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "Packets: Sent = 4, Received = 4"
            # –†—É—Å—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "–ü–∞–∫–µ—Ç–æ–≤: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ = 4, –ø–æ–ª—É—á–µ–Ω–æ = 4"
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
            import re
            en_stats = re.search(r'Packets:\s*Sent\s*=\s*(\d+),\s*Received\s*=\s*(\d+)', output, re.IGNORECASE)
            ru_stats = re.search(r'–ü–∞–∫–µ—Ç–æ–≤:\s*–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\s*=\s*(\d+),\s*–ø–æ–ª—É—á–µ–Ω–æ\s*=\s*(\d+)', output, re.IGNORECASE)
            
            if en_stats:
                sent = int(en_stats.group(1))
                received = int(en_stats.group(2))
                if received > 0:
                    success_count = received
                    found_success = True
                self.log_message(f"{host}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –ü–æ–ª—É—á–µ–Ω–æ: {received}")
            elif ru_stats:
                sent = int(ru_stats.group(1))
                received = int(ru_stats.group(2))
                if received > 0:
                    success_count = received
                    found_success = True
                self.log_message(f"{host}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –ü–æ–ª—É—á–µ–Ω–æ: {received}")
            elif found_success and success_count > 0:
                self.log_message(f"{host}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}, –ü–æ–ª—É—á–µ–Ω–æ: {success_count}")
            elif is_failed:
                self.log_message(f"{host}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}, –ü–æ–ª—É—á–µ–Ω–æ: 0")
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã IP –∞–¥—Ä–µ—Å –≤ –≤—ã–≤–æ–¥–µ
                ip_pattern = re.search(r'?(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})?', output)
                if ip_pattern:
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ IP, –∑–Ω–∞—á–∏—Ç —Ö–æ—Å—Ç —Ä–∞–∑—Ä–µ—à–∏–ª—Å—è
                    self.log_message(f"{host}: DNS —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ {ip_pattern.group(1)}, —Å—Ç–∞—Ç—É—Å –ø–∏–Ω–≥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                else:
                    self.log_message(f"{host}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}, –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω
            if found_success and success_count > 0:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
                latency_found = False
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
                for line in output.splitlines():
                    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    if "time=" in line or "Time=" in line:
                        match = re.search(r'time[<=](\d+)ms', line, re.IGNORECASE)
                        if match:
                            ms = match.group(1)
                            self.log_message(f"\t–î–æ—Å—Ç—É–ø–µ–Ω (Latency: {ms}ms)")
                            latency_found = True
                            break
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç time<1ms
                        elif "time<" in line:
                            self.log_message(f"\t–î–æ—Å—Ç—É–ø–µ–Ω (Latency: <1ms)")
                            latency_found = True
                            break
                    
                    # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    elif "–≤—Ä–µ–º—è=" in line or "–í—Ä–µ–º—è=" in line:
                        match = re.search(r'–≤—Ä–µ–º—è[<=](\d+)', line, re.IGNORECASE)
                        if match:
                            ms = match.group(1)
                            self.log_message(f"\t–î–æ—Å—Ç—É–ø–µ–Ω (Latency: {ms}ms)")
                            latency_found = True
                            break
                
                if not latency_found:
                    self.log_message(f"\t–î–æ—Å—Ç—É–ø–µ–Ω")
            elif is_failed:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                if any(x in output.lower() for x in ["could not find", "–Ω–µ —É–¥–∞–µ—Ç—Å—è"]):
                    self.log_message(f"\t–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (DNS –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è)")
                elif any(x in output.lower() for x in ["unreachable", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"]):
                    self.log_message(f"\t–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É–∑–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                elif any(x in output.lower() for x in ["timed out", "–ø—Ä–µ–≤—ã—à–µ–Ω"]):
                    self.log_message(f"\t–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–∞–π–º–∞—É—Ç)")
                else:
                    self.log_message(f"\t–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                self.log_message(f"\t–°—Ç–∞—Ç—É—Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                
            return True
            
        except subprocess.TimeoutExpired:
            if not self.is_stop_requested():
                self.log_message(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {host}")
            return False
        except Exception as e:
            if not self.is_stop_requested():
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {host}: {str(e)}")
            return False
    
    def check_discord(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Discord —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        if self.is_stop_requested():
            return
            
        self.log_message("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Discord:")
        
        if not self.is_stop_requested():
            self.ping("discord.com")
            
        if not self.is_stop_requested():
            self.log_message("")
            self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Discord –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def check_youtube(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YouTube —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        if self.is_stop_requested():
            return
            
        youtube_ips = [
            "212.188.49.81",
            "74.125.168.135", 
            "173.194.140.136",
            "172.217.131.103"
        ]
        
        youtube_addresses = [
            "rr6.sn-jvhnu5g-n8v6.googlevideo.com",
            "rr4---sn-jvhnu5g-c35z.googlevideo.com",
            "rr4---sn-jvhnu5g-n8ve7.googlevideo.com",
            "rr2---sn-aigl6nze.googlevideo.com",
            "rr7---sn-jvhnu5g-c35e.googlevideo.com",
            "rr3---sn-jvhnu5g-c35d.googlevideo.com",
            "rr3---sn-q4fl6n6r.googlevideo.com",
            "rr2---sn-axq7sn7z.googlevideo.com"
        ]
        
        curl_test_domains = [
            "rr2---sn-axq7sn7z.googlevideo.com",
            "rr1---sn-axq7sn7z.googlevideo.com", 
            "rr3---sn-axq7sn7z.googlevideo.com"
        ]
        
        self.log_message("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ YouTube:")

        # –î–æ–±–∞–≤–ª—è–µ–º DNS –ø—Ä–æ–≤–µ—Ä–∫—É –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
        if not self.is_stop_requested():
            self.check_dns_poisoning()

        if not self.is_stop_requested():
            self.ping("www.youtube.com")

        if not self.is_stop_requested():
            self.log_message("")
            self.log_message("=" * 40)
            self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ googlevideo.com —á–µ—Ä–µ–∑ curl:")
            self.log_message("=" * 40)
                    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ curl
        for domain in curl_test_domains:
            if self.is_stop_requested():
                break
            self.check_curl_domain(domain)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if not self.is_stop_requested():
            self.check_curl_extended()

        if not self.is_stop_requested():
            self.check_youtube_video_access()
        
        if not self.is_stop_requested():
            self.check_zapret_status()
        
        if not self.is_stop_requested():
            self.interpret_youtube_results()
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ ping
        for ip in youtube_ips:
            if self.is_stop_requested():
                break
            self.log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è IP: {ip}")
            self.ping(ip)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ ping
        for address in youtube_addresses:
            if self.is_stop_requested():
                break
            self.ping(address)
                
        if not self.is_stop_requested():
            self.log_message("")
            self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ YouTube –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            self.log_message(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª–µ {os.path.abspath(self.log_filename)}")


    def check_youtube_video_access(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ YouTube –≤–∏–¥–µ–æ"""
        self.log_message("=" * 40)
        self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ YouTube –≤–∏–¥–µ–æ:")
        self.log_message("=" * 40)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ URL —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        test_video_urls = [
            "https://rr2---sn-axq7sn7z.googlevideo.com/generate_204",  # Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            "https://www.googleapis.com/youtube/v3/videos?id=dQw4w9WgXcQ&key=test",  # API endpoint
            "https://i.ytimg.com/vi/dQw4w9WgXcQ/mqdefault.jpg"  # Thumbnail —Å–µ—Ä–≤–µ—Ä
        ]
        
        for url in test_video_urls:
            self.check_real_youtube_endpoint(url)

    def check_real_youtube_endpoint(self, url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π YouTube endpoint"""
        try:
            domain = url.split('/')[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω
            path = '/' + '/'.join(url.split('/')[3:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å
            
            self.log_message(f"–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ endpoint: {domain}{path}")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º curl –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            curl_paths = [
                "C:\\Windows\\System32\\curl.exe",
                "C:\\Windows\\SysWOW64\\curl.exe",
                "curl.exe",
                "curl"
            ]
            
            curl_exe = None
            for path in curl_paths:
                try:
                    test_cmd = [path, "--version"]
                    test_result = subprocess.run(test_cmd, capture_output=True, timeout=2, 
                                                creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)
                    if test_result.returncode == 0:
                        curl_exe = path
                        break
                except:
                    continue
            
            if not curl_exe:
                self.log_message(f"  ‚ö†Ô∏è curl –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
                return
            
            command = [
                curl_exe, "-I",
                "--connect-timeout", "5",
                "--max-time", "10", 
                "--silent", "--show-error",
                url
            ]
            
            result = subprocess.run(command, capture_output=True, timeout=10,
                                  creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º stdout
            if result and result.returncode == 0:
                output = result.stdout.decode('utf-8', errors='ignore') if result.stdout else ""
                    
                lines = output.strip().split('\n') if output else []
                status_line = lines[0] if lines else ""
                
                if "HTTP/" in status_line:
                    status_code = status_line.split()[1] if len(status_line.split()) > 1 else "???"
                    if status_code in ['200', '204']:  # –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–¥—ã
                        self.log_message(f"  ‚úÖ –†–µ–∞–ª—å–Ω—ã–π YouTube endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP {status_code})")
                    elif status_code == '404':
                        self.log_message(f"  ‚ö†Ô∏è Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {status_code})")
                    elif status_code in ['403', '429']:
                        self.log_message(f"  üö´ YouTube –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å (HTTP {status_code})")
                    else:
                        self.log_message(f"  ‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (HTTP {status_code})")
                else:
                    self.log_message(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTTP —Å—Ç–∞—Ç—É—Å")
            else:
                error_output = result.stderr.decode('utf-8', errors='ignore') if result and result.stderr else ""
                        
                if "could not resolve host" in error_output.lower():
                    self.log_message(f"  ‚ùå DNS –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
                elif "connection timed out" in error_output.lower():
                    self.log_message(f"  ‚ùå –¢–∞–π–º–∞—É—Ç - –≤–æ–∑–º–æ–∂–Ω–∞—è DPI –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
                elif "connection refused" in error_output.lower():
                    self.log_message(f"  ‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
                else:
                    self.log_message(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    
        except Exception as e:
            self.log_message(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")

    def interpret_youtube_results(self):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã YouTube —Ç–µ—Å—Ç–æ–≤"""
        self.log_message("=" * 40)
        self.log_message("üîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        self.log_message("=" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL handshake –ø—Ä–æ–±–ª–µ–º –≤ –ª–æ–≥–µ
        ssl_problems = self._check_ssl_handshake_issues()
        
        if ssl_problems:
            self.log_message("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê DPI –ë–õ–û–ö–ò–†–û–í–ö–ê!")
            self.log_message("")
            self.log_message("‚ùå –ü—Ä–∏–∑–Ω–∞–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
            self.log_message("   ‚Ä¢ SSL handshake timeout –Ω–∞ googlevideo.com")
            self.log_message("   ‚Ä¢ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ TLS –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è")
            self.log_message("   ‚Ä¢ DPI —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç HTTPS")
            self.log_message("")
            self.log_message("üõ†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ó–ê–ü–£–°–ö ZAPRET:")
            self.log_message("   1. ‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Zapret –∑–∞–ø—É—â–µ–Ω")
            self.log_message("   2. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
            self.log_message("   3. ‚úÖ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Zapret")
            self.log_message("   4. ‚úÖ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥")
            self.log_message("")
            self.log_message("‚ö†Ô∏è –ë–ï–ó ZAPRET YOUTUBE –ù–ï –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨!")
            
        else:
            self.log_message("üéâ –û–¢–õ–ò–ß–ù–´–ï –ù–û–í–û–°–¢–ò!")
            self.log_message("‚úÖ YouTube –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!")
            self.log_message("")
            self.log_message("üîë –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞:")
            self.log_message("   ‚Ä¢ HTTP 204 –Ω–∞ /generate_204 - –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            self.log_message("   ‚Ä¢ HTTP 200 –Ω–∞ thumbnail —Å–µ—Ä–≤–µ—Ä - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è")  
            self.log_message("   ‚Ä¢ SSL handshake —É—Å–ø–µ—à–µ–Ω - –Ω–µ—Ç DPI –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            self.log_message("   ‚Ä¢ DNS —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è - –Ω–µ—Ç DNS –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            
        self.log_message("")
        self.log_message("üìã –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        self.log_message("   ‚Ä¢ HTTP 404 –Ω–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—É—Ç—è—Ö CDN - –ù–û–†–ú–ê–õ–¨–ù–û")
        self.log_message("   ‚Ä¢ Ping —É—Å–ø–µ—à–Ω—ã–π = —Å–µ—Ç–µ–≤–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å OK")
        self.log_message("   ‚Ä¢ –ü–æ—Ä—Ç 443 –æ—Ç–∫—Ä—ã—Ç = TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ OK")
        self.log_message("   ‚Ä¢ SSL handshake = –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è HTTPS")


    def _check_ssl_handshake_issues(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å SSL handshake –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å self.result_text
            
            # –ß–∏—Ç–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if os.path.exists(self.log_filename):
                with open(self.log_filename, 'r', encoding='utf-8') as f:
                    log_content = f.read()
                    
                # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ SSL –ø—Ä–æ–±–ª–µ–º
                ssl_timeout_count = log_content.count("SSL handshake –Ω–µ—É–¥–∞—á–µ–Ω")
                ssl_error_count = log_content.count("–ü—Ä–æ–±–ª–µ–º–∞ —Å SSL/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º")
                
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 3 SSL –æ—à–∏–±–æ–∫ - –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è
                return ssl_timeout_count >= 3 or ssl_error_count >= 3
                
        except Exception:
            pass
        
        return False

    def check_zapret_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Zapret"""
        self.log_message("=" * 40)
        self.log_message("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê ZAPRET:")
        self.log_message("=" * 40)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å winws.exe
            command = ["tasklist", "/FI", "IMAGENAME eq winws.exe", "/FO", "CSV"]
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º subprocess –Ω–∞–ø—Ä—è–º—É—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            result = subprocess.run(command, capture_output=True, text=True, timeout=10,
                                  creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º stdout
            if result and result.stdout:
                output = result.stdout
                    
                if "winws.exe" in output:
                    self.log_message("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å winws.exe –∑–∞–ø—É—â–µ–Ω")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º PID –∏ –ø–∞–º—è—Ç—å
                    lines = output.strip().split('\n')
                    for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        if 'winws.exe' in line:
                            parts = line.split(',')
                            if len(parts) >= 2:
                                pid = parts[1].strip('"')
                                memory = parts[4].strip('"') if len(parts) > 4 else "N/A"
                                self.log_message(f"   PID: {pid}, –ü–∞–º—è—Ç—å: {memory}")
                else:
                    self.log_message("‚ùå –ü—Ä–æ—Ü–µ—Å—Å winws.exe –ù–ï –∑–∞–ø—É—â–µ–Ω")
                    self.log_message("   Zapret –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å winws.exe")
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self.check_current_strategy()
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Zapret: {e}")
            
        self.log_message("")

    def check_current_strategy(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π StrategyChecker
            checker = StrategyChecker()
            strategy_info = checker.check_current_strategy()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_lines = checker.format_strategy_info(strategy_info)
            for line in info_lines:
                self.log_message(line)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
            self._check_autostart_settings()
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    def _check_autostart_settings(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        try:
            from config import get_dpi_autostart, get_strategy_autoload
            
            self.log_message("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–ó–ê–ü–£–°–ö–ê:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ DPI
            dpi_autostart = get_dpi_autostart()
            status_dpi = "‚úÖ –í–∫–ª—é—á–µ–Ω" if dpi_autostart else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            self.log_message(f"   DPI –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: {status_dpi}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            strategy_autoload = get_strategy_autoload()
            status_strategy = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if strategy_autoload else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
            self.log_message(f"   –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {status_strategy}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
            self._check_system_autostart()
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")

    def _check_system_autostart(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            command = [
                "schtasks", "/query", "/tn", "ZapretAutoStart", "/fo", "csv"
            ]

            result = subprocess.run(command, capture_output=True, text=True, timeout=10,
                                  creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result and result.returncode == 0 and result.stdout:
                if "ZapretAutoStart" in result.stdout:
                    self.log_message("   –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á)")
                else:
                    self._check_registry_autostart()
            else:
                self._check_registry_autostart()
                    
        except Exception as e:
            self.log_message(f"   –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({e})")
            
    def _check_registry_autostart(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä"""
        try:
            import winreg
            key_path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
            
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path) as key:
                try:
                    winreg.QueryValueEx(key, "Zapret")
                    self.log_message("   –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω (—Ä–µ–µ—Å—Ç—Ä)")
                except FileNotFoundError:
                    self.log_message("   –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    
        except Exception:
            self.log_message("   –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: ‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

    def get_strategy_info_summary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞"""
        try:
            checker = StrategyChecker()
            strategy_info = checker.check_current_strategy()
            
            status_icon = "‚úÖ" if strategy_info['file_status'] in ['found', 'N/A'] else "‚ùå"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            summary = f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_info['name']} ({strategy_info['type']})"
            
            if strategy_info['type'] == 'combined':
                details = strategy_info.get('details', {})
                if details.get('active_categories'):
                    summary += f" [{', '.join(details['active_categories'])}]"
            
            return summary
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}"

    def check_curl_domain(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ curl —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        if self.is_stop_requested():
            return
            
        try:
            self.log_message(f"Curl-—Ç–µ—Å—Ç: {domain}")
            
            if not self.is_curl_available():
                self.log_message("  ‚ö†Ô∏è curl –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º HTTP-—Ç–µ—Å—Ç—ã")
                return
            
            if self.is_stop_requested():
                return
                
            # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å 443 –ø–æ—Ä—Ç–∞
            self.check_port_443(domain)
            
            if self.is_stop_requested():
                return
            
            # 2. –ó–∞—Ç–µ–º –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTTPS –∑–∞–ø—Ä–æ—Å
            curl_exe = self._get_curl_path()
            if not curl_exe:
                self.log_message("  ‚ö†Ô∏è curl –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            command = [
                curl_exe,
                "-I",  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                "--connect-timeout", "3",  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
                "--max-time", "8", 
                "--silent",
                "--show-error",
                f"https://{domain}/"
            ]

            result = subprocess.run(command, capture_output=True, timeout=10,
                                  creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)

            if self.is_stop_requested():
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result and result.returncode == 0:
                output = result.stdout.decode('utf-8', errors='ignore') if result.stdout else ""
                        
                lines = output.strip().split('\n') if output else []
                status_line = lines[0] if lines else ""
                
                if "HTTP/" in status_line:
                    try:
                        status_code = status_line.split()[1]
                        if status_code.startswith('2'):
                            self.log_message(f"  ‚úÖ HTTPS –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {status_code})")
                        elif status_code.startswith('3'):
                            self.log_message(f"  ‚ÜóÔ∏è HTTPS –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (HTTP {status_code})")
                        elif status_code.startswith('4'):
                            self.log_message(f"  ‚ö†Ô∏è HTTPS –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ (HTTP {status_code})")
                        elif status_code.startswith('5'):
                            self.log_message(f"  ‚ùå HTTPS —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ (HTTP {status_code})")
                        else:
                            self.log_message(f"  ‚ùì HTTPS –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (HTTP {status_code})")
                    except IndexError:
                        self.log_message(f"  ‚úÖ HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    self.log_message(f"  ‚úÖ HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    
            else:
                error_output = result.stderr.decode('utf-8', errors='ignore') if result and result.stderr else ""
                
                if "could not resolve host" in error_output.lower():
                    self.log_message(f"  ‚ùå DNS –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è")
                elif "connection timed out" in error_output.lower():
                    self.log_message(f"  ‚è±Ô∏è HTTPS —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                elif "connection refused" in error_output.lower():
                    self.log_message(f"  üö´ HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                elif "ssl" in error_output.lower() or "certificate" in error_output.lower():
                    self.log_message(f"  üîí –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º")
                else:
                    self.log_message(f"  ‚ùå HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except subprocess.TimeoutExpired:
            if not self.is_stop_requested():
                self.log_message(f"  ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç HTTPS curl-–∑–∞–ø—Ä–æ—Å–∞")
        except FileNotFoundError:
            if not self.is_stop_requested():
                self.log_message(f"  ‚ö†Ô∏è curl –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        except Exception as e:
            if not self.is_stop_requested():
                self.log_message(f"  ‚ùå –û—à–∏–±–∫–∞ HTTPS curl-—Ç–µ—Å—Ç–∞: {str(e)}")

    def _get_curl_path(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ curl"""
        curl_paths = [
            "C:\\Windows\\System32\\curl.exe",
            "C:\\Windows\\SysWOW64\\curl.exe",
            "curl.exe",
            "curl"
        ]
        
        for path in curl_paths:
            try:
                test_result = subprocess.run(
                    [path, "--version"], 
                    capture_output=True, 
                    timeout=2,
                    creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
                )
                if test_result.returncode == 0:
                    return path
            except:
                continue
        
        return None

    def check_port_443(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å 443 –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ telnet/nc –∏–ª–∏ Python socket."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python socket –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
            import socket
            
            self.log_message(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 443 –¥–ª—è {domain}...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)  # 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            try:
                result = sock.connect_ex((domain, 443))
                
                if result == 0:
                    self.log_message(f"  ‚úÖ –ü–æ—Ä—Ç 443 –æ—Ç–∫—Ä—ã—Ç")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º SSL handshake
                    try:
                        import ssl
                        context = ssl.create_default_context()
                        
                        with socket.create_connection((domain, 443), timeout=5) as sock:
                            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                                cert = ssock.getpeercert()
                                if cert:
                                    subject = dict(x[0] for x in cert['subject'])
                                    common_name = subject.get('commonName', 'Unknown')
                                    self.log_message(f"  üîí SSL handshake —É—Å–ø–µ—à–µ–Ω (CN: {common_name})")
                                else:
                                    self.log_message(f"  üîí SSL handshake —É—Å–ø–µ—à–µ–Ω")
                                    
                    except Exception as ssl_e:
                        self.log_message(f"  ‚ö†Ô∏è –ü–æ—Ä—Ç 443 –æ—Ç–∫—Ä—ã—Ç, –Ω–æ SSL handshake –Ω–µ—É–¥–∞—á–µ–Ω: {str(ssl_e)}")
                        
                else:
                    self.log_message(f"  ‚ùå –ü–æ—Ä—Ç 443 –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {result})")
                    
            finally:
                sock.close()
                
        except socket.timeout:
            self.log_message(f"  ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞ 443")
        except socket.gaierror as e:
            self.log_message(f"  ‚ùå DNS –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞ 443: {str(e)}")
        except Exception as e:
            self.log_message(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞ 443: {str(e)}")

    def check_curl_http(self, domain):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP (–±–µ–∑ HTTPS)."""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Ä—Ç–∞ 80
            self.check_port_80(domain)
            
            curl_exe = self._get_curl_path()
            if not curl_exe:
                self.log_message("  ‚ö†Ô∏è curl –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            command = [
                curl_exe, "-I",
                "--connect-timeout", "5",
                "--max-time", "10",
                "--silent", "--show-error",
                f"http://{domain}/"
            ]

            result = subprocess.run(command, capture_output=True, timeout=10,
                                  creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)

            if result and result.returncode == 0:
                output = result.stdout.decode('utf-8', errors='ignore') if result.stdout else ""
                        
                lines = output.strip().split('\n') if output else []
                status_line = lines[0] if lines else ""
                if "HTTP/" in status_line:
                    status_code = status_line.split()[1] if len(status_line.split()) > 1 else "???"
                    self.log_message(f"  ‚úÖ HTTP –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {status_code})")
                else:
                    self.log_message(f"  ‚úÖ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                self.log_message(f"  ‚ùå HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            self.log_message(f"  ‚ùå –û—à–∏–±–∫–∞ HTTP —Ç–µ—Å—Ç–∞: {str(e)}")

    def check_port_80(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å 80 –ø–æ—Ä—Ç–∞."""
        try:
            import socket
            
            self.log_message(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 80 –¥–ª—è {domain}...")
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)  # 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è HTTP
            
            try:
                result = sock.connect_ex((domain, 80))
                
                if result == 0:
                    self.log_message(f"  ‚úÖ –ü–æ—Ä—Ç 80 –æ—Ç–∫—Ä—ã—Ç")
                else:
                    self.log_message(f"  ‚ùå –ü–æ—Ä—Ç 80 –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
            finally:
                sock.close()
                
        except Exception as e:
            self.log_message(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–∞ 80: {str(e)}")

    def check_curl_extended(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ curl —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        test_domain = "rr2---sn-axq7sn7z.googlevideo.com"
        
        self.log_message("=" * 40)
        self.log_message("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è curl-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
        self.log_message("=" * 40)
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∏ –±–∞–∑–æ–≤–æ–µ HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.log_message(f"1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∏ HTTPS –¥–ª—è {test_domain}:")
        self.check_curl_domain(test_domain)
        
        # –¢–µ—Å—Ç 2: HTTP (–±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è)
        self.log_message(f"2. HTTP —Ç–µ—Å—Ç (–±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è):")
        self.check_curl_http(test_domain)
        
        # –¢–µ—Å—Ç 3: –° –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º SSL –æ—à–∏–±–æ–∫
        self.log_message(f"3. HTTPS —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º SSL:")
        self.check_curl_insecure(test_domain)
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ TLS –≤–µ—Ä—Å–∏—è–º–∏
        self.log_message(f"4. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö TLS –≤–µ—Ä—Å–∏–π:")
        self.check_tls_versions(test_domain)

    def check_tls_versions(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ TLS."""
        curl_exe = self._get_curl_path()
        if not curl_exe:
            self.log_message("  ‚ö†Ô∏è curl –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        tls_versions = [
            ("TLS 1.2", "--tlsv1.2"),
            ("TLS 1.3", "--tlsv1.3"),
            ("TLS 1.1", "--tlsv1.1"),
            ("TLS 1.0", "--tlsv1.0")
        ]
        
        for version_name, tls_flag in tls_versions:
            try:
                command = [
                    curl_exe, "-I", "-k",  # -k –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç SSL –æ—à–∏–±–∫–∏
                    "--connect-timeout", "3",
                    "--max-time", "8",
                    "--silent", "--show-error",
                    tls_flag,
                    f"https://{domain}/"
                ]

                result = subprocess.run(command, capture_output=True, timeout=10,
                                      creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)

                if result and result.returncode == 0:
                    output = result.stdout.decode('utf-8', errors='ignore') if result.stdout else ""
                            
                    lines = output.strip().split('\n') if output else []
                    status_line = lines[0] if lines else ""
                    if "HTTP/" in status_line:
                        status_code = status_line.split()[1] if len(status_line.split()) > 1 else "???"
                        self.log_message(f"  ‚úÖ {version_name} —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥ {status_code})")
                    else:
                        self.log_message(f"  ‚úÖ {version_name} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    self.log_message(f"  ‚ùå {version_name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
            except Exception as e:
                self.log_message(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ {version_name}: {str(e)}")

    def check_curl_insecure(self, domain):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º SSL –æ—à–∏–±–æ–∫."""
        try:
            curl_exe = self._get_curl_path()
            if not curl_exe:
                self.log_message("  ‚ö†Ô∏è curl –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            command = [
                curl_exe, "-I", "-k",  # -k –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç SSL –æ—à–∏–±–∫–∏
                "--connect-timeout", "5", 
                "--max-time", "10",
                "--silent", "--show-error",
                f"https://{domain}/"
            ]

            result = subprocess.run(command, capture_output=True, timeout=15,
                                  creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)

            if result and result.returncode == 0:
                output = result.stdout.decode('utf-8', errors='ignore') if result.stdout else ""
                        
                lines = output.strip().split('\n') if output else []
                status_line = lines[0] if lines else ""
                if "HTTP/" in status_line:
                    status_code = status_line.split()[1] if len(status_line.split()) > 1 else "???"
                    self.log_message(f"  ‚úÖ HTTPS –¥–æ—Å—Ç—É–ø–µ–Ω —Å -k (–∫–æ–¥ {status_code})")
                else:
                    self.log_message(f"  ‚úÖ HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å -k")
            else:
                self.log_message(f"  ‚ùå HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ —Å -k")
                
        except Exception as e:
            self.log_message(f"  ‚ùå –û—à–∏–±–∫–∞ HTTPS -k —Ç–µ—Å—Ç–∞: {str(e)}")

    def is_curl_available(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å curl –≤ —Å–∏—Å—Ç–µ–º–µ."""
        try:
            if not hasattr(self, '_curl_available'):
                self._curl_available = (self._get_curl_path() is not None)
                
                if self._curl_available:
                    self.log_message(f"–ù–∞–π–¥–µ–Ω curl")
                
            return self._curl_available
            
        except Exception as e:
            if hasattr(self, 'log_message'):
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ curl: {e}")
            self._curl_available = False
            return False
    
    def run(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π."""
        try:
            self.log_message(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
            self.log_message("="*50)
            
            if self.test_type == "discord":
                self.check_discord()
            elif self.test_type == "youtube":
                self.check_youtube()
            elif self.test_type == "all":
                self.check_discord()
                if not self.is_stop_requested():
                    self.log_message("\n" + "="*30 + "\n")
                    self.check_youtube()
            
            if self.is_stop_requested():
                self.log_message("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            else:
                self.log_message("="*50)
                self.log_message("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
        except Exception as e:
            if not self.is_stop_requested():
                self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {str(e)}")
        finally:
            # ‚úÖ –í–°–ï–ì–î–ê —ç–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.finished_signal.emit()

class LogSendWorker(QObject):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    finished = pyqtSignal(bool, str)  # success, message
    
    def __init__(self, log_path: str, caption: str):
        super().__init__()
        self.log_path = log_path
        self.caption = caption
    
    def run(self):
        try:
            success, error_msg = send_log_file(self.log_path, self.caption)
            if success:
                self.finished.emit(True, "–õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                self.finished.emit(False, error_msg or "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        except Exception as e:
            self.finished.emit(False, str(e))

class ConnectionTestDialog(QDialog):
    """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        self.setMinimumWidth(700)
        self.setMinimumHeight(500)
        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º, –Ω–æ –ù–ï –±–ª–æ–∫–∏—Ä—É—é—â–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
        self.setModal(False)
        
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
        self.is_testing = False
        self.is_sending_log = False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞
        
        self.init_ui()
        self.worker = None
        self.worker_thread = None
        self.log_send_thread = None  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        from PyQt6.QtWidgets import QLabel
        from PyQt6.QtCore import Qt
        
        title_label = QLabel("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("font-size: 16px; font-weight: bold; margin: 10px;")
        layout.addWidget(title_label)
        
        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
        self.test_combo = QComboBox(self)
        self.test_combo.addItems([
            "üåê –í—Å–µ —Ç–µ—Å—Ç—ã (Discord + YouTube)", 
            "üéÆ –¢–æ–ª—å–∫–æ Discord", 
            "üé¨ –¢–æ–ª—å–∫–æ YouTube"
        ])
        self.test_combo.setStyleSheet("padding: 8px; font-size: 12px;")
        layout.addWidget(self.test_combo)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
        button_layout = QVBoxLayout()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º layout
        main_buttons_layout = QHBoxLayout()
        
        self.start_button = QPushButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", self)
        self.start_button.clicked.connect(self.start_test_async)
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                padding: 8px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        main_buttons_layout.addWidget(self.start_button)
        
        self.stop_button = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç", self)
        self.stop_button.clicked.connect(self.stop_test)
        self.stop_button.setEnabled(False)
        self.stop_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                font-weight: bold;
                padding: 8px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        main_buttons_layout.addWidget(self.stop_button)
        
        button_layout.addLayout(main_buttons_layout)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        extra_buttons_layout = QHBoxLayout()
        
        self.dns_check_button = QPushButton("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –ø–æ–¥–º–µ–Ω—ã", self)
        self.dns_check_button.clicked.connect(self.show_dns_check)
        self.dns_check_button.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                font-weight: bold;
                padding: 8px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        extra_buttons_layout.addWidget(self.dns_check_button)
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥" –Ω–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥"
        self.send_log_button = QPushButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", self)
        self.send_log_button.clicked.connect(self.send_log_to_telegram)
        self.send_log_button.setEnabled(False)
        self.send_log_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                font-weight: bold;
                padding: 8px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        extra_buttons_layout.addWidget(self.send_log_button)
        
        button_layout.addLayout(extra_buttons_layout)
        
        layout.addLayout(button_layout)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setStyleSheet("margin: 10px 0;")
        layout.addWidget(separator)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        from PyQt6.QtWidgets import QProgressBar
        self.progress_bar = QProgressBar(self)
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid grey;
                border-radius: 5px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
                width: 20px;
            }
        """)
        layout.addWidget(self.progress_bar)
        
        # –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("padding: 5px; font-weight: bold; color: #666;")
        layout.addWidget(self.status_label)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.result_text = QTextEdit(self)
        self.result_text.setReadOnly(True)
        layout.addWidget(self.result_text)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", self)
        close_button.clicked.connect(self.close_dialog_safely)
        close_button.setStyleSheet("""
            QPushButton {
                background-color: #666;
                color: white;
                font-weight: bold;
                padding: 8px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #555;
            }
        """)
        layout.addWidget(close_button)
        
        self.setLayout(layout)

    def send_log_to_telegram(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram"""
        if self.is_sending_log:
            QMessageBox.information(self, "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", 
                                "–õ–æ–≥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–∞
        temp_log_path = os.path.join(LOGS_FOLDER, "connection_test_temp.log")
        
        if not os.path.exists(temp_log_path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", 
                            "–§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            return
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            bot_connected = check_bot_connection()
            
            if not bot_connected:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram –±–æ—Ç—É"
            else:
                error_msg = None
                
        except Exception as e:
            bot_connected = False
            error_msg = str(e)
        
        if not bot_connected:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            msg_box.setIcon(QMessageBox.Icon.Warning)
            msg_box.setText(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤.\n\n"
                f"–û—à–∏–±–∫–∞: {error_msg or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –ª–æ–∫–∞–ª—å–Ω–æ?"
            )
            msg_box.setStandardButtons(
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if msg_box.exec() == QMessageBox.StandardButton.Yes:
                self.save_log_locally()
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º caption —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        import time
        test_type = self.test_combo.currentText()
        caption = (
            f"üìä <b>–õ–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</b>\n"
            f"–¢–∏–ø: {test_type}\n"
            f"Zapret v{APP_VERSION}\n"
            f"ID: <code>{get_client_id()}</code>\n"
            f"Host: {platform.node()}\n"
            f"Time: {time.strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.send_log_button.setEnabled(False)
        self.is_sending_log = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.setText("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ Telegram...")
        self.status_label.setStyleSheet("color: #2196F3; font-weight: bold;")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä –∏ –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.log_send_thread = QThread(self)
        self.log_send_worker = LogSendWorker(temp_log_path, caption)
        self.log_send_worker.moveToThread(self.log_send_thread)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.log_send_thread.started.connect(self.log_send_worker.run)
        self.log_send_worker.finished.connect(self.on_log_sent)
        self.log_send_worker.finished.connect(self.log_send_thread.quit)
        self.log_send_worker.finished.connect(self.log_send_worker.deleteLater)
        self.log_send_thread.finished.connect(self.log_send_thread.deleteLater)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        self.log_send_thread.start()
        
        from log import log
        log(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram", "INFO")
    
    def on_log_sent(self, success: bool, message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞"""
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(False)
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.send_log_button.setEnabled(True)
        self.is_sending_log = False
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.setText("‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            self.status_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.result_text.append("\n" + "=" * 50)
            self.result_text.append("‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏!")
            self.result_text.append("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            QMessageBox.information(
                self,
                "–£—Å–ø–µ—à–Ω–æ",
                "–õ–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—É—á–∏—Ç –≤–∞—à –æ—Ç—á–µ—Ç –∏ —Å–º–æ–∂–µ—Ç "
                "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                temp_log_path = os.path.join(LOGS_FOLDER, "connection_test_temp.log")
                if os.path.exists(temp_log_path):
                    os.remove(temp_log_path)
            except:
                pass
                
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–± –æ—à–∏–±–∫–µ
            self.status_label.setText("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞")
            self.status_label.setStyleSheet("color: #f44336; font-weight: bold;")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            msg_box.setIcon(QMessageBox.Icon.Warning)
            msg_box.setText(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥:\n{message}\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –ª–æ–∫–∞–ª—å–Ω–æ?"
            )
            msg_box.setStandardButtons(
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if msg_box.exec() == QMessageBox.StandardButton.Yes:
                self.save_log_locally()
        
        # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
        self.log_send_worker = None
        self.log_send_thread = None
    
    def save_log_locally(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        temp_log_path = os.path.join(LOGS_FOLDER, "connection_test_temp.log")
        
        if not os.path.exists(temp_log_path):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        try:
            from datetime import datetime
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            save_path = os.path.join(
                LOGS_FOLDER, 
                f"connection_test_{timestamp}.log"
            )
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            with open(temp_log_path, "r", encoding="utf-8-sig") as src, \
                 open(save_path, "w", encoding="utf-8-sig") as dest:
                dest.write(src.read())
            
            QMessageBox.information(
                self, 
                "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ", 
                f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{save_path}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –≤—Ä—É—á–Ω—É—é."
            )
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º
            import subprocess
            subprocess.run(f'explorer /select,"{save_path}"', shell=True)
            
        except Exception as e:
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", 
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞:\n{str(e)}"
            )
    
    def show_dns_check(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            from log import log
            log("–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS –∏–∑ —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π", "INFO")
            
            # –ï—Å–ª–∏ –∏–¥–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
            if self.is_testing:
                reply = QMessageBox.question(
                    self,
                    "–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                    "–°–µ—Ç–µ–≤–æ–π —Ç–µ—Å—Ç –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.\n–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É DNS –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ?",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                )
                
                if reply != QMessageBox.StandardButton.Yes:
                    return
            
            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ DNS –ø—Ä–æ–≤–µ—Ä–∫–∏
            dns_dialog = DNSCheckDialog(self)
            dns_dialog.exec()
            
        except Exception as e:
            from log import log
            log(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è DNS –¥–∏–∞–ª–æ–≥–∞: {e}", "‚ùå ERROR")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É DNS:\n{str(e)}"
            )
    
    def start_test_async(self):
        """‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç."""
        if self.is_testing:
            QMessageBox.information(self, "–¢–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", 
                                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
        selection = self.test_combo.currentText()
        test_type = "all"
        
        if "–¢–æ–ª—å–∫–æ Discord" in selection:
            test_type = "discord"
        elif "–¢–æ–ª—å–∫–æ YouTube" in selection:
            test_type = "youtube"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º UI
        self.result_text.clear()
        self.result_text.append(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {selection}")
        self.result_text.append("=" * 50)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.dns_check_button.setEnabled(False)  # –ë–ª–æ–∫–∏—Ä—É–µ–º DNS –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
        self.test_combo.setEnabled(False)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)
        self.status_label.setText("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
        self.status_label.setStyleSheet("color: #2196F3; font-weight: bold;")
        
        # ‚úÖ –°–û–ó–î–ê–ï–ú –û–¢–î–ï–õ–¨–ù–´–ô –ü–û–¢–û–ö –î–õ–Ø WORKER'–∞
        self.worker_thread = QThread(self)           # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –¥–∏–∞–ª–æ–≥—É
        self.worker = ConnectionTestWorker(test_type)
        
        # ‚úÖ –ü–ï–†–ï–ù–û–°–ò–ú WORKER –í –û–¢–î–ï–õ–¨–ù–´–ô –ü–û–¢–û–ö
        self.worker.moveToThread(self.worker_thread)
        
        # ‚úÖ –ü–û–î–ö–õ–Æ–ß–ê–ï–ú –°–ò–ì–ù–ê–õ–´
        self.worker_thread.started.connect(self.worker.run)
        self.worker.update_signal.connect(self.update_result_async)
        self.worker.finished_signal.connect(self.on_test_finished_async)
        
        # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        self.worker.finished_signal.connect(self.worker_thread.quit)
        self.worker.finished_signal.connect(self.worker.deleteLater)
        self.worker_thread.finished.connect(self.worker_thread.deleteLater)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        self.is_testing = True
        
        # –∑–∞–ø—É—Å–∫–∞–µ–º
        self.worker_thread.start()
        
        from log import log
        log(f"–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {test_type}", "INFO")
    
    def stop_test(self):
        """‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò GUI."""
        if not self.worker or not self.worker_thread:
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.result_text.append("\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞...")
        self.status_label.setText("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
        self.status_label.setStyleSheet("color: #ff9800; font-weight: bold;")
        
        # –ü—Ä–æ—Å–∏–º worker –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        self.worker.stop_gracefully()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò
        from PyQt6.QtCore import QTimer
        
        self.stop_check_timer = QTimer()
        self.stop_check_attempts = 0
        
        def check_thread_stopped():
            self.stop_check_attempts += 1
            
            # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ù–ê None
            if not self.worker_thread:
                # –ü–æ—Ç–æ–∫ —É–∂–µ –æ—á–∏—â–µ–Ω
                self.stop_check_timer.stop()
                self.result_text.append("‚úÖ –¢–µ—Å—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            
            if not self.worker_thread.isRunning():
                # –ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
                self.stop_check_timer.stop()
                self.result_text.append("‚úÖ –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                self.on_test_finished_async()
                
            elif self.stop_check_attempts > 50:  # 5 —Å–µ–∫—É–Ω–¥ (50 * 100–º—Å)
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                self.stop_check_timer.stop()
                self.result_text.append("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞...")
                if self.worker_thread:  # ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    self.worker_thread.terminate()
                    
                    # –î–∞–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ terminate
                    QTimer.singleShot(1000, lambda: self._finalize_stop())
                else:
                    self._finalize_stop()
        
        self.stop_check_timer.timeout.connect(check_thread_stopped)
        self.stop_check_timer.start(100)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å

    def _finalize_stop(self):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ terminate."""
        if self.worker_thread and self.worker_thread.isRunning():
            self.result_text.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç")
        else:
            self.result_text.append("‚úÖ –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.on_test_finished_async()
    
    def update_result_async(self, message):
        """‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è DNS —Å–æ–æ–±—â–µ–Ω–∏–π
        if "DNS" in message and "–ø–æ–¥–º–µ–Ω" in message:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ DNS –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.result_text.append(message)
            self.result_text.append("üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –ø–æ–¥–º–µ–Ω—ã' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        else:
            # ‚úÖ THREAD-SAFE –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
            self.result_text.append(message)
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞
        scrollbar = self.result_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if len(message) < 60:
            clean_message = message.replace("‚úÖ", "").replace("‚ùå", "").replace("‚ö†Ô∏è", "").strip()
            if clean_message:
                self.status_label.setText(f"üîÑ {clean_message}")
    
    def on_test_finished_async(self):
        """‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤."""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.dns_check_button.setEnabled(True)  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º DNS –ø—Ä–æ–≤–µ—Ä–∫—É
        self.test_combo.setEnabled(True)
        self.send_log_button.setEnabled(True)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.setText("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        self.status_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.result_text.append("\n" + "=" * 50)
        self.result_text.append("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –õ–æ–≥ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        self.result_text.append("üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –ø–æ–¥–º–µ–Ω—ã'")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        self.is_testing = False
        
        # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ç–æ–∫
        self.worker = None
        self.worker_thread = None
        
        from log import log
        log("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω", "INFO")
    
    def close_dialog_safely(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
        if self.is_testing:
            reply = QMessageBox.question(
                self, 
                "–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                "–¢–µ—Å—Ç –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                self.stop_test()
                self.close()
        else:
            self.close()
    
    def closeEvent(self, event):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
        # ‚úÖ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self, 'stop_check_timer') and self.stop_check_timer:
            self.stop_check_timer.stop()
            self.stop_check_timer.deleteLater()
        
        if self.is_testing:
            reply = QMessageBox.question(
                self, 
                "–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                "–¢–µ—Å—Ç –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # –ú—è–≥–∫–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç
                if self.worker:
                    self.worker.stop_gracefully()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if self.worker_thread and self.worker_thread.isRunning():
                    if not self.worker_thread.wait(3000):
                        self.worker_thread.terminate()
                        self.worker_thread.wait(1000)
                
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()