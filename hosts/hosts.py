import ctypes
import stat
import os
from pathlib import Path
from PyQt6.QtWidgets import QMessageBox
from .proxy_domains import PROXY_DOMAINS
from .menu import HostsSelectorDialog
from log import log

HOSTS_PATH = Path(r"C:\Windows\System32\drivers\etc\hosts")

def check_hosts_file_name():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ hosts"""
    hosts_dir = Path(r"C:\Windows\System32\drivers\etc")
    
    # ‚úÖ –ù–û–í–û–ï: –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not hosts_dir.exists():
        try:
            hosts_dir.mkdir(parents=True, exist_ok=True)
            log(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {hosts_dir}")
        except Exception as e:
            log(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {e}", "‚ùå ERROR")
            return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é etc: {e}"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª hosts
    hosts_lower = hosts_dir / "hosts"
    if hosts_lower.exists():
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
        try:
            hosts_lower.read_text(encoding="utf-8-sig")
            return True, None
        except UnicodeDecodeError:
            # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            log("–§–∞–π–ª hosts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", level="‚ö† WARNING")
            return False, "–§–∞–π–ª hosts —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ UTF-8"
    
    # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HOSTS
    hosts_upper = hosts_dir / "HOSTS"
    if hosts_upper.exists():
        log("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª HOSTS (—Å –±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏) - —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", level="‚ö† WARNING")
        return False, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è 'hosts' (—Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏), –∞ –Ω–µ 'HOSTS'"
    
    # ‚úÖ –ù–û–í–û–ï: –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤–æ–æ–±—â–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –º—ã –µ–≥–æ —Å–æ–∑–¥–∞–¥–∏–º
    return True, None  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å False –Ω–∞ True

def is_file_readonly(filepath):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∞—Ç—Ä–∏–±—É—Ç '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è' —É —Ñ–∞–π–ª–∞"""
    try:
        file_stat = os.stat(filepath)
        return not (file_stat.st_mode & stat.S_IWRITE)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ñ–∞–π–ª–∞: {e}")
        return False

def remove_readonly_attribute(filepath):
    """–°–Ω–∏–º–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è' —Å —Ñ–∞–π–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–∞
        file_stat = os.stat(filepath)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–æ –Ω–∞ –∑–∞–ø–∏—Å—å
        os.chmod(filepath, file_stat.st_mode | stat.S_IWRITE)
        log(f"–ê—Ç—Ä–∏–±—É—Ç '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è' —Å–Ω—è—Ç —Å —Ñ–∞–π–ª–∞: {filepath}")
        return True
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è': {e}")
        return False

def safe_read_hosts_file():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª hosts —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
    hosts_path = HOSTS_PATH
    
    # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not hosts_path.exists():
        log(f"–§–∞–π–ª hosts –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π: {hosts_path}")
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            hosts_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª hosts —Å –±–∞–∑–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            default_content = """# Copyright (c) 1993-2009 Microsoft Corp.
#
# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.
#
# This file contains the mappings of IP addresses to host names. Each
# entry should be kept on an individual line. The IP address should
# be placed in the first column followed by the corresponding host name.
# The IP address and the host name should be separated by at least one
# space.
#
# Additionally, comments (such as these) may be inserted on individual
# lines or following the machine name denoted by a '#' symbol.
#
# For example:
#
#      102.54.94.97     rhino.acme.com          # source server
#       38.25.63.10     x.acme.com              # x client host

# localhost name resolution is handled within DNS itself.
#	127.0.0.1       localhost
#	::1             localhost
"""
            hosts_path.write_text(default_content, encoding='utf-8-sig')
            log("–§–∞–π–ª hosts —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –±–∞–∑–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º")
            return default_content
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ hosts: {e}", "‚ùå ERROR")
            return None
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
    encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'cp866', 'latin1']
    
    for encoding in encodings:
        try:
            content = hosts_path.read_text(encoding=encoding)
            log(f"–§–∞–π–ª hosts —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {encoding}")
            return content
        except UnicodeDecodeError:
            continue
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ hosts —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
            continue
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
    try:
        content = hosts_path.read_text(encoding='utf-8', errors='ignore')
        log("–§–∞–π–ª hosts –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏", level="‚ö† WARNING")
        return content
    except Exception as e:
        log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ hosts: {e}", "‚ùå ERROR")
        return None

def safe_write_hosts_file(content):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª hosts —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç "—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è" –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        if is_file_readonly(HOSTS_PATH):
            log("–§–∞–π–ª hosts –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è', –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω—è—Ç—å...")
            if not remove_readonly_attribute(HOSTS_PATH):
                log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∞—Ç—Ä–∏–±—É—Ç '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è'")
                return False
        
        HOSTS_PATH.write_text(content, encoding="utf-8-sig", newline='\n')
        return True
    except PermissionError:
        log("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ hosts (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")
        return False
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ hosts: {e}")
        return False
    
class HostsManager:
    def __init__(self, status_callback=None):
        self.status_callback = status_callback
        # üÜï –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º api.github.com
        self.check_and_remove_github_api()

    # üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° api.github.com
    def check_github_api_in_hosts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å api.github.com –≤ hosts —Ñ–∞–π–ª–µ"""
        try:
            content = safe_read_hosts_file()
            if content is None:
                return False
                
            lines = content.splitlines()
            
            for line in lines:
                line = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if not line or line.startswith('#'):
                    continue
                    
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ (IP –¥–æ–º–µ–Ω)
                parts = line.split()
                if len(parts) >= 2:
                    domain = parts[1]  # –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –¥–æ–º–µ–Ω
                    if domain.lower() == "api.github.com":
                        return True
                        
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ api.github.com –≤ hosts: {e}")
            return False

    def remove_github_api_from_hosts(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å api.github.com –∏–∑ hosts —Ñ–∞–π–ª–∞"""
        try:
            content = safe_read_hosts_file()
            if content is None:
                log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª hosts –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è api.github.com")
                return False
                
            lines = content.splitlines(keepends=True)
            new_lines = []
            removed_lines = []
            
            for line in lines:
                line_stripped = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if not line_stripped or line_stripped.startswith('#'):
                    new_lines.append(line)
                    continue
                    
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ (IP –¥–æ–º–µ–Ω)
                parts = line_stripped.split()
                if len(parts) >= 2:
                    domain = parts[1]  # –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –¥–æ–º–µ–Ω
                    if domain.lower() == "api.github.com":
                        # –ù–∞—à–ª–∏ –∑–∞–ø–∏—Å—å api.github.com - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                        removed_lines.append(line_stripped)
                        log(f"–£–¥–∞–ª—è–µ–º –∏–∑ hosts: {line_stripped}")
                        continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                new_lines.append(line)
            
            if removed_lines:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
                while new_lines and new_lines[-1].strip() == "":
                    new_lines.pop()
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                if new_lines and not new_lines[-1].endswith('\n'):
                    new_lines[-1] += '\n'
                elif new_lines:
                    new_lines.append('\n')

                if not safe_write_hosts_file("".join(new_lines)):
                    log("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª hosts –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è api.github.com")
                    return False
                
                log(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å api.github.com –∏–∑ hosts —Ñ–∞–π–ª–∞: {removed_lines}")
                self.set_status("–ó–∞–ø–∏—Å—å api.github.com —É–¥–∞–ª–µ–Ω–∞ –∏–∑ hosts —Ñ–∞–π–ª–∞")
                return True
            else:
                log("–ó–∞–ø–∏—Å—å api.github.com –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ hosts —Ñ–∞–π–ª–µ")
                return True  # –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏
                
        except PermissionError:
            log("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è api.github.com –∏–∑ hosts —Ñ–∞–π–ª–∞")
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ api.github.com –∏–∑ hosts: {e}")
            return False

    def check_and_remove_github_api(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª—è–µ—Ç api.github.com –∏–∑ hosts"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞
            from config import get_remove_github_api
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ GitHub API
            if not get_remove_github_api():
                log("‚öôÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ api.github.com –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return
                
            if self.check_github_api_in_hosts():
                log("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å api.github.com –≤ hosts —Ñ–∞–π–ª–µ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º...")
                if self.remove_github_api_from_hosts():
                    log("‚úÖ –ó–∞–ø–∏—Å—å api.github.com —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ hosts")
                else:
                    log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å api.github.com –∏–∑ hosts")
            else:
                log("‚úÖ –ó–∞–ø–∏—Å—å api.github.com –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ hosts —Ñ–∞–π–ª–µ")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—É–¥–∞–ª–µ–Ω–∏–∏ api.github.com: {e}")

    # ------------------------- HostsSelectorDialog -------------------------
    def show_hosts_selector_dialog(self, parent=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è hosts"""
        from PyQt6.QtWidgets import QDialog

        current_active = set()
        if self.is_proxy_domains_active():
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∏–∑ hosts —Ñ–∞–π–ª–∞
            try:
                content = HOSTS_PATH.read_text(encoding="utf-8-sig")
                for domain in PROXY_DOMAINS.keys():
                    if domain in content:
                        current_active.add(domain)
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ hosts: {e}")
        
        dialog = HostsSelectorDialog(parent, current_active)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            selected_domains = dialog.get_selected_domains()
            return self.apply_selected_domains(selected_domains)
        return False
    
    # ------------------------- —Å–µ—Ä–≤–∏—Å -------------------------

    def set_status(self, message: str):
        if self.status_callback:
            self.status_callback(message)
        else:
            print(message)

    # ------------------------- –ø—Ä–æ–≤–µ—Ä–∫–∏ -------------------------

    def is_proxy_domains_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ (–ù–ï –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) –∑–∞–ø–∏—Å–∏ –Ω–∞—à–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ hosts"""
        try:
            content = safe_read_hosts_file()
            if content is None:
                return False
                
            lines = content.splitlines()
            domains = set(PROXY_DOMAINS.keys())
            
            for line in lines:
                line = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if not line or line.startswith('#'):
                    continue
                    
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ (IP –¥–æ–º–µ–Ω)
                parts = line.split()
                if len(parts) >= 2:
                    domain = parts[1]  # –í—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –¥–æ–º–µ–Ω
                    if domain in domains:
                        # –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π (–Ω–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –¥–æ–º–µ–Ω
                        return True
                        
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ hosts: {e}")
            return False

    def is_hosts_file_accessible(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª hosts –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            is_correct, error_msg = check_hosts_file_name()
            if not is_correct:
                log(error_msg)
                return False
            
            # ‚úÖ –ù–û–í–û–ï: –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not HOSTS_PATH.exists():
                log("–§–∞–π–ª hosts –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    test_file = HOSTS_PATH.parent / "test_write_permission.tmp"
                    test_file.write_text("test", encoding="utf-8")
                    test_file.unlink()  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    return True
                except PermissionError:
                    log("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ hosts. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            content = safe_read_hosts_file()
            if content is None:
                return False
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç "—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"
            if is_file_readonly(HOSTS_PATH):
                log("–§–∞–π–ª hosts –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
            try:
                with HOSTS_PATH.open("a", encoding="utf-8-sig") as f:
                    pass
            except PermissionError:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏, –Ω–æ —Ñ–∞–π–ª –ù–ï readonly, 
                # –∑–Ω–∞—á–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if not is_file_readonly(HOSTS_PATH):
                    raise
                # –ï—Å–ª–∏ —Ñ–∞–π–ª readonly, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω—è—Ç—å –∞—Ç—Ä–∏–±—É—Ç
                log("–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–∑-–∑–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è'")
            
            return True
            
        except PermissionError:
            log(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É hosts: {HOSTS_PATH}")
            return False
        except FileNotFoundError:
            log(f"–§–∞–π–ª hosts –Ω–µ –Ω–∞–π–¥–µ–Ω: {HOSTS_PATH}")
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ hosts: {e}")
            return False

    def _no_perm(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        self.set_status("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ hosts")
        log("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ hosts")

    def add_proxy_domains(self) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–º–µ–Ω—ã –≤ hosts —Ñ–∞–π–ª"""
        log("üü° add_proxy_domains –Ω–∞—á–∞—Ç", "DEBUG")
        
        if not self.is_hosts_file_accessible():
            self.set_status("–§–∞–π–ª hosts –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return False
        
        # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º check_and_remove_github_api —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
        self.check_and_remove_github_api()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            content = safe_read_hosts_file()
            if content is None:
                return False
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Ä—É—á–Ω—É—é
            lines = content.splitlines(keepends=True)
            domains_to_remove = set(PROXY_DOMAINS.keys())
            
            new_lines = []
            for line in lines:
                if (line.strip() and 
                    not line.lstrip().startswith("#") and 
                    len(line.split()) >= 2 and 
                    line.split()[1] in domains_to_remove):
                    continue
                new_lines.append(line)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            while new_lines and new_lines[-1].strip() == "":
                new_lines.pop()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã
            if new_lines and not new_lines[-1].endswith('\n'):
                new_lines.append('\n')
            new_lines.append('\n')
            
            for domain, ip in PROXY_DOMAINS.items():
                new_lines.append(f"{ip} {domain}\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º
            if not safe_write_hosts_file("".join(new_lines)):
                return False
            
            self.set_status(f"–§–∞–π–ª hosts –æ–±–Ω–æ–≤–ª—ë–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(PROXY_DOMAINS)} –∑–∞–ø–∏—Å–µ–π")
            log(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–º–µ–Ω—ã: {list(PROXY_DOMAINS.keys())[:5]}...", "DEBUG")
            return True
            
        except PermissionError:
            log("–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ add_proxy_domains", "ERROR")
            self._no_perm()
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ add_proxy_domains: {e}", "ERROR")
            return False

    def remove_proxy_domains(self) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –¥–æ–º–µ–Ω—ã –∏–∑ hosts —Ñ–∞–π–ª–∞"""
        log("üü° remove_proxy_domains –Ω–∞—á–∞—Ç", "DEBUG")
        
        if not self.is_hosts_file_accessible():
            self.set_status("–§–∞–π–ª hosts –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return False
        
        # ‚úÖ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º check_and_remove_github_api –∑–¥–µ—Å—å
        
        try:
            content = safe_read_hosts_file()
            if content is None:
                return False
            
            lines = content.splitlines(keepends=True)
            domains = set(PROXY_DOMAINS.keys())
            
            new_lines = []
            removed_count = 0
            
            for line in lines:
                if (line.strip() and 
                    not line.lstrip().startswith("#") and 
                    len(line.split()) >= 2 and 
                    line.split()[1] in domains):
                    removed_count += 1
                    continue
                new_lines.append(line)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            while new_lines and new_lines[-1].strip() == "":
                new_lines.pop()
            
            if new_lines and not new_lines[-1].endswith('\n'):
                new_lines.append('\n')
            
            if not safe_write_hosts_file("".join(new_lines)):
                return False
            
            self.set_status(f"–§–∞–π–ª hosts –æ–±–Ω–æ–≤–ª—ë–Ω: —É–¥–∞–ª–µ–Ω–æ {removed_count} –∑–∞–ø–∏—Å–µ–π")
            log(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –¥–æ–º–µ–Ω–æ–≤", "DEBUG")
            return True
            
        except PermissionError:
            log("–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ remove_proxy_domains", "ERROR")
            self._no_perm()
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ remove_proxy_domains: {e}", "ERROR")
            return False
    
    def apply_selected_domains(self, selected_domains):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∫ —Ñ–∞–π–ª—É hosts"""
        log(f"üü° apply_selected_domains –Ω–∞—á–∞—Ç: {len(selected_domains)} –¥–æ–º–µ–Ω–æ–≤", "DEBUG")
        
        if not self.is_hosts_file_accessible():
            self.set_status("–§–∞–π–ª hosts –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
        selected_proxy_domains = {
            domain: ip for domain, ip in PROXY_DOMAINS.items() 
            if domain in selected_domains
        }
        
        if not selected_proxy_domains:
            log("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤, —É–¥–∞–ª—è–µ–º –≤—Å–µ", "DEBUG")
            return self.remove_proxy_domains()
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = safe_read_hosts_file()
            if content is None:
                self.set_status("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª hosts")
                return False
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –í–†–£–ß–ù–£–Æ
            lines = content.splitlines(keepends=True)
            domains_to_remove = set(PROXY_DOMAINS.keys())
            
            new_lines = []
            for line in lines:
                if (line.strip() and 
                    not line.lstrip().startswith("#") and 
                    len(line.split()) >= 2 and 
                    line.split()[1] in domains_to_remove):
                    continue
                new_lines.append(line)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            while new_lines and new_lines[-1].strip() == "":
                new_lines.pop()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            if new_lines and not new_lines[-1].endswith('\n'):
                new_lines.append('\n')
            
            new_lines.append('\n')  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            
            for domain, ip in selected_proxy_domains.items():
                new_lines.append(f"{ip} {domain}\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_content = "".join(new_lines)
            
            if not safe_write_hosts_file(final_content):
                self.set_status("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª hosts")
                return False
            
            count = len(selected_proxy_domains)
            self.set_status(f"–§–∞–π–ª hosts –æ–±–Ω–æ–≤–ª—ë–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")
            log(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã: {list(selected_proxy_domains.keys())}", "DEBUG")
            
            log(f"üü° apply_selected_domains –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ", "DEBUG")
            return True
            
        except PermissionError:
            log("üü° –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", "DEBUG") 
            self._no_perm()
            return False
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ hosts: {e}"
            self.set_status(error_msg)
            log(error_msg, "ERROR")
            return False