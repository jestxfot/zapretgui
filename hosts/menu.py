# hosts/menu.py - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QCheckBox, 
    QScrollArea, QWidget, QLabel, QFrame, QTreeWidget, QTreeWidgetItem,
    QDialogButtonBox, QMessageBox, QTabWidget, QGridLayout, QButtonGroup
)
from PyQt6.QtCore import Qt, pyqtSignal, QPropertyAnimation, QEasingCurve, pyqtProperty
from PyQt6.QtGui import QFont, QIcon, QPalette, QColor, QBrush
from .proxy_domains import PROXY_DOMAINS
from log import log
from typing import Set, Dict, List

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞
try:
    from config import get_active_hosts_domains, set_active_hosts_domains
except ImportError:
    log("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤", "‚ö† WARNING")
    def get_active_hosts_domains(): return set()
    def set_active_hosts_domains(d): return False

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
DOMAIN_CATEGORIES = {
    "ü§ñ ChatGPT & OpenAI": [
        "chatgpt.com",
        "ab.chatgpt.com",
        "auth.openai.com",
        "auth0.openai.com",
        "platform.openai.com",
        "cdn.oaistatic.com",
        "files.oaiusercontent.com",
        "cdn.auth0.com",
        "tcr9i.chat.openai.com",
        "webrtc.chatgpt.com",
        "android.chat.openai.com",
        "api.openai.com",
        "sora.com",
        "sora.chatgpt.com",
        "videos.openai.com",
        "us.posthog.com",
    ],
    
    "üß† Google AI": [
        "gemini.google.com",
        "aistudio.google.com",
        "generativelanguage.googleapis.com",
        "alkalimakersuite-pa.clients6.google.com",
        "aitestkitchen.withgoogle.com",
        "aisandbox-pa.googleapis.com",
        "webchannel-alkalimakersuite-pa.clients6.google.com",
        "proactivebackend-pa.googleapis.com",
        "o.pki.goog",
        "labs.google",
        "notebooklm.google",
        "notebooklm.google.com",
    ],
    
    "ü§ñ –î—Ä—É–≥–∏–µ AI —Å–µ—Ä–≤–∏—Å—ã": [
        "claude.ai",
        "copilot.microsoft.com",
        "www.bing.com",
        "sydney.bing.com",
        "edgeservices.bing.com",
        "rewards.bing.com",
        "xsts.auth.xboxlive.com",
        "grok.com",
        "assets.grok.com",
        "accounts.x.ai",
        "elevenlabs.io",
        "api.us.elevenlabs.io",
        "elevenreader.io",
        "codeium.com",
        "inference.codeium.com",
        "api.individual.githubcopilot.com",
        "proxy.individual.githubcopilot.com",
        "deepl.com",
        "www.deepl.com",
        "s.deepl.com",
        "ita-free.www.deepl.com",
        "experimentation.deepl.com",
        "w.deepl.com",
        "login-wall.deepl.com",
        "gtm.deepl.com",
        "checkout.www.deepl.com",
    ],
    
    "üìò Facebook & Instagram": [
        "facebook.com",
        "www.facebook.com",
        "static.xx.fbcdn.net",
        "external-hel3-1.xx.fbcdn.net",
        "scontent-hel3-1.xx.fbcdn.net",
        "www.instagram.com",
        "instagram.com",
        "scontent.cdninstagram.com",
        "scontent-hel3-1.cdninstagram.com",
        "static.cdninstagram.com",
        "b.i.instagram.com",
        "z-p42-chat-e2ee-ig.facebook.com",
        "threads.com",
        "www.threads.com",
    ],
    
    "üéµ Spotify": [
        "api.spotify.com",
        "xpui.app.spotify.com",
        "appresolve.spotify.com",
        "login5.spotify.com",
        "gew1-spclient.spotify.com",
        "gew1-dealer.spotify.com",
        "spclient.wg.spotify.com",
        "api-partner.spotify.com",
        "aet.spotify.com",
        "www.spotify.com",
        "accounts.spotify.com",
        "spotifycdn.com",
        "open-exp.spotifycdn.com",
        "www-growth.scdn.co",
        "login.app.spotify.com",
        "encore.scdn.co",
        "accounts.scdn.co",
        "ap-gew1.spotify.com",
    ],
    
    "üéµ SoundCloud": [
        "soundcloud.com",
        "style.sndcdn.com",
        "a-v2.sndcdn.com",
        "secure.sndcdn.com",
    ],
    
    "üéÆ Twitch": [
        "usher.ttvnw.net",
    ],
    
    "üì∫ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã": [
        "www.netflix.com",
        "netflix.com",
        "www.hulu.com",
        "hulu.com",
    ],
    
    "üìù –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": [
        "www.notion.so",
        "notion.so",
        "calendar.notion.so",
        "www.canva.com",
        "datalore.jetbrains.com",
        "plugins.jetbrains.com",
    ],
    
    "üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å": [
        "protonmail.com",
        "mail.proton.me",
    ],
    
    "üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞": [
        "autodesk.com",
        "accounts.autodesk.com",
        "www.intel.com",
        "www.dell.com",
        "developer.nvidia.com",
        "www.aomeitech.com",
        "www.elgato.com",
    ],
    
    "üéØ –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã": [
        "www.tiktok.com",
        "truthsocial.com",
        "static-assets-1.truthsocial.com",
        "anilib.me",
        "ntc.party",
        "pump.fun",
        "frontend-api-v3.pump.fun",
        "images.pump.fun",
        "swap-api.pump.fun",
        "rutracker.org",
        "static.rutracker.cc",
    ],
    
    "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–∫–∞–∑–∏–Ω–æ)": [
        "1xbet.kz",
        "1xbet.com",
        "1xlite-06044.top",
        "only-fans.uk",
        "only-fans.me",
        "only-fans.wtf",
    ]
}

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
PRESET_COLLECTIONS = {
    "AI –°–µ—Ä–≤–∏—Å—ã": [
        "chatgpt.com", "auth.openai.com", "platform.openai.com", "api.openai.com",
        "gemini.google.com", "aistudio.google.com", "notebooklm.google.com",
        "claude.ai", "copilot.microsoft.com", "www.bing.com",
        "grok.com", "deepl.com", "elevenlabs.io"
    ],
    "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏": [
        "facebook.com", "www.facebook.com", "instagram.com", "www.instagram.com",
        "threads.com", "www.threads.com", "www.tiktok.com", "truthsocial.com"
    ],
    "–ú—É–∑—ã–∫–∞ –∏ –º–µ–¥–∏–∞": [
        "spotify.com", "www.spotify.com", "api.spotify.com", "accounts.spotify.com",
        "soundcloud.com", "netflix.com", "hulu.com"
    ],
    "–†–∞–±–æ—Ç–∞ –∏ —É—á–µ–±–∞": [
        "notion.so", "www.notion.so", "canva.com", "datalore.jetbrains.com",
        "plugins.jetbrains.com", "autodesk.com"
    ],
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä": [
        "chatgpt.com", "instagram.com", "spotify.com", "notion.so"
    ]
}


class ModernButton(QPushButton):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    def __init__(self, text, parent=None, primary=False):
        super().__init__(text, parent)
        self.primary = primary
        self._animation = QPropertyAnimation(self, b"color")
        self._animation.setDuration(200)
        self.setMinimumHeight(32)
        self.setCursor(Qt.CursorShape.PointingHandCursor)
        
    def enterEvent(self, event):
        super().enterEvent(event)
        self.setProperty("hover", True)
        self.style().polish(self)
        
    def leaveEvent(self, event):
        super().leaveEvent(event)
        self.setProperty("hover", False)
        self.style().polish(self)


class StatusButton(QPushButton):
    """–ö–Ω–æ–ø–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Å—Ç–∞—Ç—É—Å–∞"""
    def __init__(self, text, parent=None, is_active=False):
        super().__init__(text, parent)
        self.is_active = is_active
        self.setCursor(Qt.CursorShape.PointingHandCursor)
        self.setCheckable(True)
        self.setMinimumHeight(36)
        self.update_style()
        
    def set_active(self, active):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.is_active = active
        self.setProperty("is_active", active)
        self.update_style()
        
    def update_style(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.is_active:
            self.setToolTip("‚úÖ –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω –≤ hosts")
        else:
            self.setToolTip("‚ûï –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ hosts")
        self.style().polish(self)


class CompactTreeWidget(QTreeWidget):
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–µ—Ä–µ–≤–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setHeaderHidden(True)
        self.setRootIsDecorated(True)
        self.setAnimated(True)
        self.setIndentation(15)
        self.setAlternatingRowColors(False)
        self.setUniformRowHeights(True)


class HostsSelectorDialog(QDialog):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–æ–º–µ–Ω–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
    
    def __init__(self, parent=None, current_active_domains=None):
        super().__init__(parent)
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∏–∑ hosts —Ñ–∞–π–ª–∞
        self.current_active_domains = current_active_domains or set()
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        self.saved_active_domains = get_active_hosts_domains()
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
        self.all_active_domains = self.current_active_domains | self.saved_active_domains
        
        self.selected_domains = set()
        self.service_buttons = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        self.is_dark_theme = self._detect_dark_theme()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Adobe
        self.adobe_callback = None
        self.is_adobe_active = False
        
        self.setWindowTitle("üåê –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        self.setModal(True)
        self.setMinimumSize(650, 650)
        self.resize(720, 650)
        
        self.init_ui()
        self.apply_modern_styles()
        self.load_domains()
        self.update_service_buttons_state()
        
    def _detect_dark_theme(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞"""
        palette = self.palette()
        bg_color = palette.color(QPalette.ColorRole.Window)
        return bg_color.lightness() < 128
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_layout = QVBoxLayout()
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(15, 15, 15, 15)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        header_layout = QHBoxLayout()
        title_label = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å–µ—Ä–≤–∏—Å–æ–≤")
        title_label.setStyleSheet(f"""
            font-size: 14pt;
            font-weight: 600;
            color: {'#ffffff' if self.is_dark_theme else '#2c3e50'};
        """)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
        self.active_indicator = QLabel("‚óè –ê–∫—Ç–∏–≤–Ω–æ: 0")
        self.active_indicator.setStyleSheet(f"""
            QLabel {{
                color: #3182ce;
                font-weight: bold;
                font-size: 10pt;
                padding: 0 5px;
            }}
        """)
        header_layout.addWidget(self.active_indicator)
        
        self.selected_indicator = QLabel("‚óã –í—ã–±—Ä–∞–Ω–æ: 0")
        self.selected_indicator.setStyleSheet(f"""
            QLabel {{
                color: {'#a0aec0' if self.is_dark_theme else '#718096'};
                font-weight: bold;
                font-size: 10pt;
                padding: 0 5px;
            }}
        """)
        header_layout.addWidget(self.selected_indicator)
        
        main_layout.addLayout(header_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö
        info_frame = QFrame()
        info_frame.setStyleSheet(f"""
            QFrame {{
                background: {'#2d3748' if self.is_dark_theme else '#f0f9ff'};
                border: 1px solid {'#4a5568' if self.is_dark_theme else '#90cdf4'};
                border-radius: 6px;
                padding: 8px;
            }}
        """)
        info_layout = QHBoxLayout()
        info_layout.setSpacing(15)
        
        # –õ–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        legend_items = [
            ("üîµ", "–ê–∫—Ç–∏–≤–Ω–æ –≤ hosts", "#3182ce"),
            ("‚ö™", "–ù–µ –∞–∫—Ç–∏–≤–Ω–æ", "#718096"),
            ("‚úÖ", "–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ", "#48bb78"),
            ("‚ùå", "–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ", "#f56565")
        ]
        
        for icon, text, color in legend_items:
            item_layout = QHBoxLayout()
            item_layout.setSpacing(4)
            
            icon_label = QLabel(icon)
            icon_label.setStyleSheet(f"font-size: 12pt;")
            item_layout.addWidget(icon_label)
            
            text_label = QLabel(text)
            text_label.setStyleSheet(f"""
                color: {color};
                font-size: 9pt;
                font-weight: 500;
            """)
            item_layout.addWidget(text_label)
            
            info_layout.addLayout(item_layout)
            
        info_layout.addStretch()
        info_frame.setLayout(info_layout)
        main_layout.addWidget(info_frame)
        
        # –¢–æ–Ω–∫–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        line = QFrame()
        line.setFrameShape(QFrame.Shape.HLine)
        line.setStyleSheet(f"""
            QFrame {{
                border: 0px;
                background-color: {'#4a5568' if self.is_dark_theme else '#e0e0e0'};
                max-height: 1px;
            }}
        """)
        main_layout.addWidget(line)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ç–∞–±—ã
        self.tab_widget = QTabWidget()
        self.tab_widget.setDocumentMode(True)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()
        control_layout.setSpacing(8)
        
        select_all_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        select_all_btn.clicked.connect(self.select_all)
        control_layout.addWidget(select_all_btn)
        
        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä")
        clear_btn.clicked.connect(self.deselect_all)
        control_layout.addWidget(clear_btn)
        
        control_layout.addStretch()
        main_layout.addLayout(control_layout)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º addLayout –≤–º–µ—Å—Ç–æ addWidget

        # –í–∫–ª–∞–¥–∫–∞ —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º
        quick_tab = self.create_quick_select_tab()
        self.tab_widget.addTab(quick_tab, "‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä")
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –¥–µ—Ä–µ–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        tree_tab = self.create_tree_tab()
        self.tab_widget.addTab(tree_tab, "üìã –í—Å–µ –¥–æ–º–µ–Ω—ã")
        
        main_layout.addWidget(self.tab_widget)
        
        # Adobe —Å–µ–∫—Ü–∏—è
        self.adobe_section = self.create_adobe_section()
        main_layout.addWidget(self.adobe_section)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        button_layout = QHBoxLayout()
        button_layout.setSpacing(10)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è hosts
        self.hosts_btn = QPushButton("üìù Hosts")
        self.hosts_btn.setToolTip("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª hosts")
        self.hosts_btn.clicked.connect(self.open_hosts_file)
        button_layout.addWidget(self.hosts_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        self.reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
        self.reset_btn.setToolTip("–í–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        self.reset_btn.clicked.connect(self.reset_to_current)
        button_layout.addWidget(self.reset_btn)
        
        button_layout.addStretch()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_btn)
        
        self.apply_btn = QPushButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.apply_btn.setObjectName("apply_btn")
        self.apply_btn.clicked.connect(self.accept)
        self.apply_btn.setDefault(True)
        button_layout.addWidget(self.apply_btn)
        
        main_layout.addLayout(button_layout)
        self.setLayout(main_layout)

    def create_quick_select_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Å—Ç–∞—Ç—É—Å–∞"""
        widget = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(8)
        
        # –°–µ—Ç–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        services_grid = QGridLayout()
        services_grid.setSpacing(8)
        
        services = [
            ("ü§ñ ChatGPT", self.get_service_domains("chatgpt"), 0, 0),
            ("üß† Gemini", self.get_service_domains("gemini"), 0, 1),
            ("ü§ñ Claude", ["claude.ai"], 0, 2),
            ("üì± Instagram", self.get_service_domains("instagram"), 1, 0),
            ("üìò Facebook", self.get_service_domains("facebook"), 1, 1),
            ("üéµ Spotify", self.get_service_domains("spotify"), 1, 2),
            ("üìù Notion", self.get_service_domains("notion"), 2, 0),
            ("üé• Twitch", ["usher.ttvnw.net"], 2, 1),
            ("üîÑ DeepL", self.get_service_domains("deepl"), 2, 2),
        ]
        
        for name, domains, row, col in services:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–º–µ–Ω —Å–µ—Ä–≤–∏—Å–∞
            is_active = any(d in self.all_active_domains for d in domains)
            
            btn = StatusButton(name, is_active=is_active)
            btn.clicked.connect(lambda checked, d=domains, b=btn: self.toggle_service(d, b))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.service_buttons[name] = (btn, domains)
            
            services_grid.addWidget(btn, row, col)
            
        layout.addLayout(services_grid)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setStyleSheet(f"""
            QFrame {{
                border: none;
                background: {'#4a5568' if self.is_dark_theme else '#e0e0e0'};
                max-height: 1px;
                margin: 10px 0;
            }}
        """)
        layout.addWidget(separator)
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
        presets_label = QLabel("–ì–æ—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã:")
        presets_label.setStyleSheet(f"""
            font-weight: 600;
            color: {'#a0aec0' if self.is_dark_theme else '#7f8c8d'};
            font-size: 9pt;
        """)
        layout.addWidget(presets_label)
        
        presets_layout = QHBoxLayout()
        presets_layout.setSpacing(8)
        
        presets = [
            ("üéØ –ú–∏–Ω–∏–º—É–º", ["chatgpt.com", "instagram.com", "spotify.com"]),
            ("ü§ñ –í—Å–µ AI", self.get_all_ai_domains()),
            ("üì± –°–æ—Ü—Å–µ—Ç–∏", self.get_all_social_domains()),
            ("‚ú® –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ", self.get_popular_domains()),
        ]
        
        for preset_name, domains in presets:
            btn = QPushButton(preset_name)
            btn.clicked.connect(lambda checked, d=domains: self.apply_preset_domains(d))
            presets_layout.addWidget(btn)
            
        layout.addLayout(presets_layout)
        
        layout.addStretch()
        widget.setLayout(layout)
        return widget
        
    def create_tree_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –¥–µ—Ä–µ–≤–æ–º"""
        widget = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(5)
        
        # –î–µ—Ä–µ–≤–æ –¥–æ–º–µ–Ω–æ–≤
        self.tree_widget = CompactTreeWidget()
        self.tree_widget.itemChanged.connect(self.on_item_changed)
        layout.addWidget(self.tree_widget)
        
        widget.setLayout(layout)
        return widget
        
    def create_adobe_section(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é Adobe"""
        frame = QFrame()
        frame.setStyleSheet(f"""
            QFrame {{
                background: {'#2d3748' if self.is_dark_theme else '#f8f9fa'};
                border: 1px solid {'#4a5568' if self.is_dark_theme else '#dee2e6'};
                border-radius: 6px;
                padding: 8px;
            }}
        """)
        
        layout = QHBoxLayout()
        layout.setSpacing(10)
        
        icon_label = QLabel("üîí")
        icon_label.setStyleSheet("font-size: 16pt;")
        layout.addWidget(icon_label)
        
        text_label = QLabel("Adobe –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
        text_label.setStyleSheet(f"""
            font-weight: 600;
            color: {'#e2e8f0' if self.is_dark_theme else '#495057'};
        """)
        layout.addWidget(text_label)
        
        layout.addStretch()
        
        self.adobe_btn = QPushButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å")
        self.adobe_btn.clicked.connect(self.show_adobe_menu)
        layout.addWidget(self.adobe_btn)
        
        frame.setLayout(layout)
        return frame
        
    def apply_modern_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
        if self.is_dark_theme:
            bg_primary = "#1a202c"
            bg_secondary = "#2d3748"
            bg_hover = "#4a5568"
            text_primary = "#e2e8f0"
            text_secondary = "#a0aec0"
            accent = "#4299e1"
            accent_hover = "#3182ce"
            active_bg = "#2b6cb0"  # –°–∏–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
            inactive_bg = "#4a5568"  # –°–µ—Ä—ã–π –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
        else:
            bg_primary = "#ffffff"
            bg_secondary = "#f7fafc"
            bg_hover = "#edf2f7"
            text_primary = "#2d3748"
            text_secondary = "#718096"
            accent = "#3182ce"
            accent_hover = "#2c5282"
            active_bg = "#3182ce"  # –°–∏–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
            inactive_bg = "#cbd5e0"  # –°–µ—Ä—ã–π –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
            
        self.setStyleSheet(f"""
            QDialog {{
                background-color: {bg_primary};
            }}
            
            QTabWidget {{
                border: 0px;
            }}
            
            QTabWidget::pane {{
                border: 0px; /* ‚Üê —É–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–æ–ª–Ω–æ—Å—Ç—å—é */
                background-color: {bg_secondary};
                padding: 10px;
            }}
            
            QTabBar::tab {{
                background-color: {bg_secondary};
                color: {text_secondary};
                padding: 8px 16px;
                margin-right: 4px;
                font-weight: 500;
                border: 0px;  /* ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ */
            }}
            
            QTabBar::tab:selected {{
                background-color: {bg_primary};
                color: {text_primary};
                font-weight: 600;
                border: none;  /* ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ */
            }}
            
            QTabBar::tab:hover {{
                background-color: {bg_hover};
            }}
            
            QPushButton {{
                background-color: {bg_secondary};
                color: {text_primary};
                border: 1px solid {bg_hover};
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: 500;
                min-width: 80px;
            }}
            
            QPushButton:hover {{
                background-color: {bg_hover};
                border-color: {accent};
            }}
            
            QPushButton:pressed {{
                background-color: {bg_hover};
            }}
            
            QPushButton#apply_btn {{
                background-color: {accent};
                color: white;
                border: none;
            }}
            
            QPushButton#apply_btn:hover {{
                background-color: {accent_hover};
            }}
            
            StatusButton {{
                border: 2px solid {inactive_bg};
                background-color: {bg_secondary};
                color: {text_primary};
            }}
            
            StatusButton[is_active="true"] {{
                border: 2px solid {active_bg};
                background-color: {active_bg};
                color: white;
                font-weight: 600;
            }}
            
            StatusButton:checked {{
                background-color: {accent};
                color: white;
                border-color: {accent};
            }}
            
            QTreeWidget {{
                background-color: {bg_secondary};
                border: 0px solid {bg_hover};
                border-radius: 6px;
                outline: none;
                color: {text_primary};
            }}
            
            QTreeWidget::item {{
                padding: 4px;
                border-radius: 4px;
            }}
            
            QTreeWidget::item:hover {{
                background-color: {bg_hover};
            }}
            
            QTreeWidget::item:selected {{
                background-color: {accent};
                color: white;
            }}
            
            QTreeWidget::indicator {{
                width: 16px;
                height: 16px;
            }}
            
            QTreeWidget::indicator:unchecked {{
                border: 2px solid {text_secondary};
                background-color: transparent;
                border-radius: 3px;
            }}
            
            QTreeWidget::indicator:checked {{
                border: 2px solid {accent};
                background-color: {accent};
                border-radius: 3px;
            }}
            
            QLabel {{
                color: {text_primary};
            }}
        """)
        
    def load_domains(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–º–µ–Ω—ã –≤ –¥–µ—Ä–µ–≤–æ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        all_domains = set(PROXY_DOMAINS.keys())
        categorized = set()
        
        for category_name, category_domains in DOMAIN_CATEGORIES.items():
            existing = [d for d in category_domains if d in all_domains]
            if existing:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                active_count = len([d for d in existing if d in self.all_active_domains])
                category_text = f"{category_name} ({active_count}/{len(existing)})"
                
                category_item = QTreeWidgetItem([category_text])
                category_item.setFlags(category_item.flags() | Qt.ItemFlag.ItemIsAutoTristate)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                font = QFont()
                font.setBold(True)
                category_item.setFont(0, font)
                
                # –¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if active_count > 0:
                    category_item.setForeground(0, QBrush(QColor("#3182ce")))
                
                for domain in existing:
                    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
                    if domain in self.all_active_domains:
                        domain_text = f"üîµ {domain}"
                    else:
                        domain_text = f"‚ö™ {domain}"
                        
                    domain_item = QTreeWidgetItem([domain_text])
                    domain_item.setFlags(domain_item.flags() | Qt.ItemFlag.ItemIsUserCheckable)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if domain in self.all_active_domains:
                        domain_item.setCheckState(0, Qt.CheckState.Checked)
                        # –í—ã–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Ü–≤–µ—Ç–æ–º
                        domain_item.setForeground(0, QBrush(QColor("#3182ce")))
                    else:
                        domain_item.setCheckState(0, Qt.CheckState.Unchecked)
                    
                    domain_item.setData(0, Qt.ItemDataRole.UserRole, domain)
                    category_item.addChild(domain_item)
                    categorized.add(domain)
                
                self.tree_widget.addTopLevelItem(category_item)
                # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
                if active_count > 0:
                    category_item.setExpanded(True)
                else:
                    category_item.setExpanded(False)
        
        # –ù–µ–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        other = all_domains - categorized
        if other:
            active_count = len([d for d in other if d in self.all_active_domains])
            other_text = f"üéØ –î—Ä—É–≥–∏–µ ({active_count}/{len(other)})"
            other_item = QTreeWidgetItem([other_text])
            other_item.setFlags(other_item.flags() | Qt.ItemFlag.ItemIsAutoTristate)
            
            font = QFont()
            font.setBold(True)
            other_item.setFont(0, font)
            
            for domain in sorted(other):
                if domain in self.all_active_domains:
                    domain_text = f"üîµ {domain}"
                else:
                    domain_text = f"‚ö™ {domain}"
                    
                domain_item = QTreeWidgetItem([domain_text])
                domain_item.setFlags(domain_item.flags() | Qt.ItemFlag.ItemIsUserCheckable)
                
                if domain in self.all_active_domains:
                    domain_item.setCheckState(0, Qt.CheckState.Checked)
                    domain_item.setForeground(0, QBrush(QColor("#3182ce")))
                else:
                    domain_item.setCheckState(0, Qt.CheckState.Unchecked)
                
                domain_item.setData(0, Qt.ItemDataRole.UserRole, domain)
                other_item.addChild(domain_item)
            
            self.tree_widget.addTopLevelItem(other_item)
            other_item.setExpanded(active_count > 0)
        
        self.update_indicators()
        
    def update_indicators(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞"""
        active_count = len(self.all_active_domains)
        selected_count = len(self.get_checked_domains())
        
        self.active_indicator.setText(f"‚óè –ê–∫—Ç–∏–≤–Ω–æ: {active_count}")
        self.selected_indicator.setText(f"‚óã –í—ã–±—Ä–∞–Ω–æ: {selected_count}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        if selected_count != active_count:
            if selected_count > active_count:
                self.apply_btn.setText(f"‚úÖ –î–æ–±–∞–≤–∏—Ç—å {selected_count - active_count} –¥–æ–º–µ–Ω–æ–≤")
            elif selected_count < active_count:
                self.apply_btn.setText(f"‚ùå –£–¥–∞–ª–∏—Ç—å {active_count - selected_count} –¥–æ–º–µ–Ω–æ–≤")
            self.apply_btn.setEnabled(True)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å–æ—Å—Ç–∞–≤–µ
            selected_domains = self.get_checked_domains()
            if selected_domains != self.all_active_domains:
                self.apply_btn.setText("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                self.apply_btn.setEnabled(True)
            else:
                self.apply_btn.setText("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
                self.apply_btn.setEnabled(False)
        
    def update_service_buttons_state(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        for name, (btn, domains) in self.service_buttons.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            is_active = any(d in self.all_active_domains for d in domains)
            is_selected = any(d in self.get_checked_domains() for d in domains)
            
            btn.set_active(is_active)
            btn.setChecked(is_selected)
            
    def on_item_changed(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        if item.childCount() == 0:  # –≠—Ç–æ –¥–æ–º–µ–Ω, –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            domain = item.data(0, Qt.ItemDataRole.UserRole)
            if domain:
                is_checked = item.checkState(0) == Qt.CheckState.Checked
                is_active = domain in self.all_active_domains
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
                if is_active:
                    if is_checked:
                        item.setText(0, f"üîµ {domain}")
                    else:
                        item.setText(0, f"‚ùå {domain}")  # –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω
                else:
                    if is_checked:
                        item.setText(0, f"‚úÖ {domain}")  # –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω
                    else:
                        item.setText(0, f"‚ö™ {domain}")
                        
        self.update_indicators()
        self.update_service_buttons_state()
        
    def reset_to_current(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é hosts"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ all_active_domains
        for i in range(self.tree_widget.topLevelItemCount()):
            category = self.tree_widget.topLevelItem(i)
            for j in range(category.childCount()):
                item = category.child(j)
                domain = item.data(0, Qt.ItemDataRole.UserRole)
                if domain:
                    if domain in self.all_active_domains:
                        item.setCheckState(0, Qt.CheckState.Checked)
                    else:
                        item.setCheckState(0, Qt.CheckState.Unchecked)
        
        self.update_indicators()
        self.update_service_buttons_state()
        
    def toggle_service(self, domains, button):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        all_checked = all(self.is_domain_checked(d) for d in domains if d in PROXY_DOMAINS)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        for domain in domains:
            if domain in PROXY_DOMAINS:
                self.set_domain_checked(domain, not all_checked)
        
        self.update_indicators()
        self.update_service_buttons_state()
        
    def is_domain_checked(self, domain):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–º–µ—á–µ–Ω –ª–∏ –¥–æ–º–µ–Ω"""
        for i in range(self.tree_widget.topLevelItemCount()):
            category = self.tree_widget.topLevelItem(i)
            for j in range(category.childCount()):
                item = category.child(j)
                if item.data(0, Qt.ItemDataRole.UserRole) == domain:
                    return item.checkState(0) == Qt.CheckState.Checked
        return False
        
    def set_domain_checked(self, domain, checked):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –≤ –¥–µ—Ä–µ–≤–µ"""
        for i in range(self.tree_widget.topLevelItemCount()):
            category = self.tree_widget.topLevelItem(i)
            for j in range(category.childCount()):
                item = category.child(j)
                if item.data(0, Qt.ItemDataRole.UserRole) == domain:
                    item.setCheckState(0, Qt.CheckState.Checked if checked else Qt.CheckState.Unchecked)
                    return
                    
    def apply_preset_domains(self, domains):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–±–æ—Ä –¥–æ–º–µ–Ω–æ–≤"""
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ
        self.deselect_all()
        # –ó–∞—Ç–µ–º –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ
        for domain in domains:
            if domain in PROXY_DOMAINS:
                self.set_domain_checked(domain, True)
        self.update_indicators()
        self.update_service_buttons_state()
        
    def select_all(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–æ–º–µ–Ω—ã"""
        for i in range(self.tree_widget.topLevelItemCount()):
            self.tree_widget.topLevelItem(i).setCheckState(0, Qt.CheckState.Checked)
        self.update_indicators()
        self.update_service_buttons_state()
        
    def deselect_all(self):
        """–°–Ω–∏–º–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤"""
        for i in range(self.tree_widget.topLevelItemCount()):
            self.tree_widget.topLevelItem(i).setCheckState(0, Qt.CheckState.Unchecked)
        self.update_indicators()
        self.update_service_buttons_state()
        
    def get_checked_domains(self) -> Set[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤"""
        checked = set()
        for i in range(self.tree_widget.topLevelItemCount()):
            category = self.tree_widget.topLevelItem(i)
            for j in range(category.childCount()):
                item = category.child(j)
                if item.checkState(0) == Qt.CheckState.Checked:
                    domain = item.data(0, Qt.ItemDataRole.UserRole)
                    if domain:
                        checked.add(domain)
        return checked
        
    def get_selected_domains(self) -> Set[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã"""
        selected = self.get_checked_domains()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
        set_active_hosts_domains(selected)
        return selected
        
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
    def get_service_domains(self, service_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–µ–Ω—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        domains = []
        for domain in PROXY_DOMAINS.keys():
            if service_name.lower() in domain.lower():
                domains.append(domain)
        return domains[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        
    def get_all_ai_domains(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ AI –¥–æ–º–µ–Ω—ã"""
        ai_domains = []
        for cat in ["ü§ñ ChatGPT & OpenAI", "üß† Google AI", "ü§ñ –î—Ä—É–≥–∏–µ AI —Å–µ—Ä–≤–∏—Å—ã"]:
            if cat in DOMAIN_CATEGORIES:
                ai_domains.extend([d for d in DOMAIN_CATEGORIES[cat] if d in PROXY_DOMAINS])
        return ai_domains
        
    def get_all_social_domains(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ–º–µ–Ω—ã —Å–æ—Ü—Å–µ—Ç–µ–π"""
        if "üìò Facebook & Instagram" in DOMAIN_CATEGORIES:
            return [d for d in DOMAIN_CATEGORIES["üìò Facebook & Instagram"] if d in PROXY_DOMAINS]
        return []
        
    def get_popular_domains(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ–º–µ–Ω—ã"""
        return ["chatgpt.com", "instagram.com", "spotify.com", 
                "notion.so", "claude.ai", "gemini.google.com"]
    
    # Adobe –º–µ—Ç–æ–¥—ã
    def add_adobe_section(self, is_adobe_active, adobe_callback):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è Adobe —Å–µ–∫—Ü–∏–∏"""
        self.adobe_callback = adobe_callback
        self.is_adobe_active = is_adobe_active
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ Adobe –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if hasattr(self, 'adobe_btn'):
            if is_adobe_active:
                self.adobe_btn.setText("üîì –û—Ç–∫–ª—é—á–µ–Ω–æ")
                self.adobe_btn.setStyleSheet(f"""
                    QPushButton {{
                        background-color: {'#dc3545' if not self.is_dark_theme else '#991b1b'};
                        color: white;
                        border: none;
                        padding: 8px 16px;
                        border-radius: 6px;
                        font-weight: 500;
                    }}
                    QPushButton:hover {{
                        background-color: {'#c82333' if not self.is_dark_theme else '#7f1d1d'};
                    }}
                """)
            else:
                self.adobe_btn.setText("üîí –í–∫–ª—é—á–∏—Ç—å")
                self.adobe_btn.setStyleSheet(f"""
                    QPushButton {{
                        background-color: {'#28a745' if not self.is_dark_theme else '#166534'};
                        color: white;
                        border: none;
                        padding: 8px 16px;
                        border-radius: 6px;
                        font-weight: 500;
                    }}
                    QPushButton:hover {{
                        background-color: {'#218838' if not self.is_dark_theme else '#14532d'};
                    }}
                """)

    def show_adobe_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é Adobe —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if hasattr(self, 'is_adobe_active'):
            if self.is_adobe_active:
                # Adobe –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å
                reply = QMessageBox.question(
                    self,
                    "Adobe –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                    "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Adobe –∞–∫—Ç–∏–≤–Ω–∞.\n\n–û—Ç–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ Adobe?",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                )
                if reply == QMessageBox.StandardButton.Yes:
                    if hasattr(self, 'adobe_callback'):
                        self.adobe_callback(False)
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                        self.is_adobe_active = False
                        self.add_adobe_section(False, self.adobe_callback)
            else:
                # Adobe –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∫–ª—é—á–∏—Ç—å
                reply = QMessageBox.question(
                    self,
                    "Adobe –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", 
                    "–í–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Adobe?\n\n"
                    "–≠—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç:\n"
                    "‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫—É –ª–∏—Ü–µ–Ω–∑–∏–π\n"
                    "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è Adobe\n\n"
                    "‚ö†Ô∏è –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Adobe!",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                )
                if reply == QMessageBox.StandardButton.Yes:
                    if hasattr(self, 'adobe_callback'):
                        self.adobe_callback(True)
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                        self.is_adobe_active = True
                        self.add_adobe_section(True, self.adobe_callback)
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.show_adobe_info()

    def show_adobe_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± Adobe"""
        QMessageBox.information(
            self,
            "Adobe –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
            "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Adobe –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n\n"
            "‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏—Ü–µ–Ω–∑–∏–π\n"
            "‚Ä¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–∞–º–º\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ\n\n"
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
        )
        
    def open_hosts_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª hosts"""
        try:
            import ctypes
            import os
            hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
            
            if os.path.exists(hosts_path):
                ctypes.windll.shell32.ShellExecuteW(
                    None, "runas", "notepad.exe", hosts_path, None, 1
                )
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å hosts: {str(e)}")
            
    def accept(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"""
        self.selected_domains = self.get_selected_domains()
        
        if not self.selected_domains and self.all_active_domains:
            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ {len(self.all_active_domains)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏–∑ hosts —Ñ–∞–π–ª–∞.\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if reply == QMessageBox.StandardButton.No:
                return
                
        super().accept()