# hosts/hosts_ui.py - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
import os
from pathlib import Path
from PyQt6.QtWidgets import QMessageBox, QDialog
from PyQt6.QtCore import QThread, QObject, pyqtSignal, QTimer
from log import log

class HostsUIManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä UI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å hosts —Ñ–∞–π–ª–æ–º"""
    
    def __init__(self, parent, hosts_manager, status_callback=None):
        self.parent = parent
        self.hosts_manager = hosts_manager
        self.status_callback = status_callback or (lambda msg: None)
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self._hosts_operation_thread = None
        self._hosts_operation_worker = None
        self._adobe_thread = None
        self._adobe_worker = None

    def check_hosts_entries_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ hosts —Ñ–∞–π–ª–µ"""
        try:
            if self.hosts_manager:
                is_active = self.hosts_manager.is_proxy_domains_active()
                log(f"–°—Ç–∞—Ç—É—Å proxy –¥–æ–º–µ–Ω–æ–≤ –≤ hosts: {is_active}", "DEBUG")
                return is_active
            else:
                log("hosts_manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "‚ö† WARNING")
                return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ hosts –∑–∞–ø–∏—Å–µ–π: {e}", "‚ùå ERROR")
            return False

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ hosts –æ–ø–µ—Ä–∞—Ü–∏–π
            if self._hosts_operation_thread and self._hosts_operation_thread.isRunning():
                self._hosts_operation_thread.quit()
                self._hosts_operation_thread.wait(1000)
            
            if self._hosts_operation_worker:
                self._hosts_operation_worker.deleteLater()
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ Adobe –æ–ø–µ—Ä–∞—Ü–∏–π
            if self._adobe_thread and self._adobe_thread.isRunning():
                self._adobe_thread.quit()
                self._adobe_thread.wait(1000)
            
            if self._adobe_worker:
                self._adobe_worker.deleteLater()
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ HostsUIManager: {e}", "DEBUG")
    
    def toggle_proxy_domains(self, proxy_button):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            if not self.hosts_manager:
                self.status_callback("–û—à–∏–±–∫–∞: –º–µ–Ω–µ–¥–∂–µ—Ä hosts –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–æ–º–µ–Ω–æ–≤
            self.open_domains_selector_dialog(proxy_button)
                    
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ toggle_proxy_domains: {e}", "ERROR")
            import traceback
            log(traceback.format_exc(), "ERROR")

    def open_domains_selector_dialog(self, proxy_button):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–æ–º–µ–Ω–æ–≤"""
        log("üîµ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–º–µ–Ω–æ–≤", "DEBUG")
        
        from .menu import HostsSelectorDialog
        from .proxy_domains import PROXY_DOMAINS
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        current_active = self.hosts_manager.get_active_domains()
        log(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(current_active)}", "DEBUG")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
        dialog = HostsSelectorDialog(self.parent, current_active)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Adobe, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(dialog, 'add_adobe_section'):
            dialog.add_adobe_section(
                self.hosts_manager.is_adobe_domains_active(),
                self.handle_adobe_toggle
            )
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –Ω–∞–ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback
            dialog.adobe_callback = self.handle_adobe_toggle
            dialog.is_adobe_active = self.hosts_manager.is_adobe_domains_active()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Adobe –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(dialog, 'adobe_btn'):
                if dialog.is_adobe_active:
                    dialog.adobe_btn.setText("üîì –û—Ç–∫–ª—é—á–∏—Ç—å")
                else:
                    dialog.adobe_btn.setText("üîí –í–∫–ª—é—á–∏—Ç—å")
        
        result = dialog.exec()
        log(f"–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {result}", "DEBUG")
        
        if result == QDialog.DialogCode.Accepted:
            selected_domains = dialog.get_selected_domains()
            log(f"–í—ã–±—Ä–∞–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {len(selected_domains)}", "DEBUG")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            self.perform_hosts_operation_async('select', proxy_button, selected_domains)
        else:
            log("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω", "DEBUG")

    def handle_adobe_toggle(self, enable):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è Adobe –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if enable:
            self.handle_adobe_enable_async(None)
        else:
            self.handle_adobe_disable_async(None)

    def handle_adobe_disable_async(self, proxy_button):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Adobe"""
        try:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Icon.Question)
            msg.setWindowTitle("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Adobe")
            msg.setText("–û—Ç–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Adobe?")
            msg.setInformativeText(
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –∑–∞–ø–∏—Å–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Adobe –∏–∑ —Ñ–∞–π–ª–∞ hosts.\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Adobe —Å–º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
            )
            msg.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            
            if msg.exec() == QMessageBox.StandardButton.Yes:
                self.perform_adobe_operation_async('remove', proxy_button)
            else:
                self.status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_adobe_disable_async: {e}", "ERROR")

    def handle_adobe_enable_async(self, proxy_button):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Adobe"""
        try:
            from .adobe_domains import ADOBE_DOMAINS
            
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Icon.Warning)
            msg.setWindowTitle("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Adobe")
            msg.setText("–í–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Adobe?")
            msg.setInformativeText(
                f"–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(ADOBE_DOMAINS)} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª hosts –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n"
                "‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n"
                "‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–π\n"
                "‚Ä¢ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤ Adobe\n\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Adobe!"
            )
            msg.setStandardButtons(QMessageBox.StandardButton.Ok | QMessageBox.StandardButton.Cancel)
            
            if msg.exec() == QMessageBox.StandardButton.Ok:
                self.perform_adobe_operation_async('add', proxy_button)
            else:
                self.status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_adobe_enable_async: {e}", "ERROR")

    def perform_adobe_operation_async(self, operation, proxy_button):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å Adobe –¥–æ–º–µ–Ω–∞–º–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        log(f"üîµ perform_adobe_operation_async –Ω–∞—á–∞—Ç: operation={operation}", "DEBUG")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if hasattr(self.parent, 'set_proxy_button_loading'):
                self.parent.set_proxy_button_loading(True, "–û–±—Ä–∞–±–æ—Ç–∫–∞ Adobe...")
            
            if proxy_button:
                proxy_button.setEnabled(False)
            
            # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            worker = AdobeWorker(self.hosts_manager, operation)
            thread = QThread()
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–æ—Ä–∫–µ—Ä –≤ –ø–æ—Ç–æ–∫
            worker.moveToThread(thread)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            thread.started.connect(worker.run)
            worker.progress.connect(self.status_callback)
            worker.finished.connect(
                lambda success, msg: self.on_adobe_operation_complete(success, msg, proxy_button)
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            worker.finished.connect(thread.quit)
            worker.finished.connect(worker.deleteLater)
            thread.finished.connect(thread.deleteLater)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
            self._adobe_thread = thread
            self._adobe_worker = worker
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            thread.start()
            log("üîµ Adobe –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω", "DEBUG")
            
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ perform_adobe_operation_async: {e}", "ERROR")
            import traceback
            log(traceback.format_exc(), "ERROR")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if proxy_button:
                proxy_button.setEnabled(True)
            if hasattr(self.parent, 'set_proxy_button_loading'):
                self.parent.set_proxy_button_loading(False)
            
            QMessageBox.critical(self.parent, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é: {str(e)}")

    def on_adobe_operation_complete(self, success, message, proxy_button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Adobe"""
        try:
            log(f"üü¢ on_adobe_operation_complete: success={success}, message={message}", "DEBUG")
            
            # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if hasattr(self.parent, 'set_proxy_button_loading'):
                self.parent.set_proxy_button_loading(False)
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            if proxy_button:
                proxy_button.setEnabled(True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.status_callback(message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ proxy
            if hasattr(self.parent, 'ui_manager'):
                QTimer.singleShot(100, self.parent.ui_manager.update_proxy_button_state)
            elif hasattr(self.parent, 'update_proxy_button_state'):
                QTimer.singleShot(100, self.parent.update_proxy_button_state)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if success:
                if hasattr(self.parent, 'tray_manager') and self.parent.tray_manager:
                    try:
                        self.parent.tray_manager.show_notification(
                            "Adobe –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                            message
                        )
                    except:
                        pass
            else:
                QMessageBox.warning(self.parent, "–í–Ω–∏–º–∞–Ω–∏–µ", message)
                
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_adobe_operation_complete: {e}", "ERROR")
            import traceback
            log(traceback.format_exc(), "ERROR")

    def perform_hosts_operation_async(self, operation, proxy_button, domains=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å hosts —Ñ–∞–π–ª–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        log(f"üîµ perform_hosts_operation_async –Ω–∞—á–∞—Ç: operation={operation}", "DEBUG")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if hasattr(self.parent, 'set_proxy_button_loading'):
                self.parent.set_proxy_button_loading(True, "–û–±—Ä–∞–±–æ—Ç–∫–∞...")
            
            proxy_button.setEnabled(False)
            
            # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            worker = HostsWorker(self.hosts_manager, operation, domains)
            thread = QThread()
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–æ—Ä–∫–µ—Ä –≤ –ø–æ—Ç–æ–∫
            worker.moveToThread(thread)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            thread.started.connect(worker.run)
            worker.progress.connect(self.status_callback)
            worker.finished.connect(
                lambda success, msg: self.on_hosts_operation_complete(success, msg, proxy_button)
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            worker.finished.connect(thread.quit)
            worker.finished.connect(worker.deleteLater)
            thread.finished.connect(thread.deleteLater)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
            self._hosts_operation_thread = thread
            self._hosts_operation_worker = worker
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            thread.start()
            log("üîµ Hosts –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω", "DEBUG")
            
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ perform_hosts_operation_async: {e}", "ERROR")
            import traceback
            log(traceback.format_exc(), "ERROR")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            proxy_button.setEnabled(True)
            if hasattr(self.parent, 'set_proxy_button_loading'):
                self.parent.set_proxy_button_loading(False)
            
            QMessageBox.critical(self.parent, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é: {str(e)}")

    def on_hosts_operation_complete(self, success, message, proxy_button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å hosts"""
        log(f"üü¢ on_hosts_operation_complete –≤—ã–∑–≤–∞–Ω: success={success}, message={message}", "DEBUG")
        
        try:
            # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if hasattr(self.parent, 'set_proxy_button_loading'):
                self.parent.set_proxy_button_loading(False)
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            proxy_button.setEnabled(True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.status_callback(message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            if hasattr(self.parent, 'ui_manager'):
                QTimer.singleShot(100, self.parent.ui_manager.update_proxy_button_state)
            elif hasattr(self.parent, 'update_proxy_button_state'):
                QTimer.singleShot(100, self.parent.update_proxy_button_state)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                QMessageBox.information(
                    self.parent, 
                    "–£—Å–ø–µ—à–Ω–æ",
                    message + "\n\n–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä!"
                )
                
                if hasattr(self.parent, 'tray_manager') and self.parent.tray_manager:
                    try:
                        self.parent.tray_manager.show_notification(
                            "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                            message
                        )
                    except:
                        pass
            else:
                QMessageBox.warning(self.parent, "–í–Ω–∏–º–∞–Ω–∏–µ", message)
                
            log("üü¢ on_hosts_operation_complete –∑–∞–≤–µ—Ä—à–µ–Ω", "DEBUG")
            
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_hosts_operation_complete: {e}", "ERROR")
            import traceback
            log(traceback.format_exc(), "ERROR")

    def open_hosts_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª hosts –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
            
            if not os.path.exists(hosts_path):
                QMessageBox.warning(self.parent, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                                f"–§–∞–π–ª hosts –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏:\n{hosts_path}")
                return
            
            editors = [
                r'C:\Program Files\Notepad++\notepad++.exe',
                r'C:\Program Files (x86)\Notepad++\notepad++.exe',
                r'C:\Windows\System32\notepad.exe',
            ]
            
            opened = False
            
            for editor in editors:
                if os.path.exists(editor):
                    try:
                        import ctypes
                        ctypes.windll.shell32.ShellExecuteW(
                            None, 
                            "runas",
                            editor, 
                            hosts_path,
                            None, 
                            1
                        )
                        
                        editor_name = os.path.basename(editor)
                        self.status_callback(f"–§–∞–π–ª hosts –æ—Ç–∫—Ä—ã—Ç –≤ {editor_name}")
                        log(f"–§–∞–π–ª hosts —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –≤ {editor_name}")
                        opened = True
                        break
                        
                    except Exception as e:
                        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤ {editor}: {e}")
                        continue
            
            if not opened:
                try:
                    os.startfile(hosts_path)
                    self.status_callback("–§–∞–π–ª hosts –æ—Ç–∫—Ä—ã—Ç")
                    log("–§–∞–π–ª hosts –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é")
                except Exception as e:
                    QMessageBox.critical(self.parent, "–û—à–∏–±–∫–∞", 
                                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª hosts")
                    log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª hosts: {e}")
                    
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ hosts: {str(e)}"
            log(error_msg, level="‚ùå ERROR")
            self.status_callback(error_msg)


# –ö–ª–∞—Å—Å—ã –≤–æ—Ä–∫–µ—Ä–æ–≤
class AdobeWorker(QObject):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å Adobe –¥–æ–º–µ–Ω–∞–º–∏"""
    finished = pyqtSignal(bool, str)
    progress = pyqtSignal(str)
    
    def __init__(self, hosts_manager, operation):
        super().__init__()
        self.hosts_manager = hosts_manager
        self.operation = operation
        log(f"üîµ AdobeWorker —Å–æ–∑–¥–∞–Ω: operation={operation}", "DEBUG")
    
    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é"""
        log(f"üîµ AdobeWorker.run() –Ω–∞—á–∞—Ç: operation={self.operation}", "DEBUG")
        try:
            success = False
            message = ""
            
            if self.operation == 'add':
                self.progress.emit("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ Adobe –≤ hosts...")
                log("üîµ –í—ã–∑—ã–≤–∞–µ–º add_adobe_domains()", "DEBUG")
                success = self.hosts_manager.add_adobe_domains()
                log(f"üîµ add_adobe_domains –∑–∞–≤–µ—Ä—à–µ–Ω: success={success}", "DEBUG")
                if success:
                    message = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Adobe –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Adobe."
                else:
                    message = "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Adobe."
            
            elif self.operation == 'remove':
                self.progress.emit("–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ Adobe –∏–∑ hosts...")
                log("üîµ –í—ã–∑—ã–≤–∞–µ–º remove_adobe_domains()", "DEBUG")
                success = self.hosts_manager.remove_adobe_domains()
                log(f"üîµ remove_adobe_domains –∑–∞–≤–µ—Ä—à–µ–Ω: success={success}", "DEBUG")
                if success:
                    message = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Adobe –æ—Ç–∫–ª—é—á–µ–Ω–∞."
                else:
                    message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Adobe."
            
            log(f"üîµ AdobeWorker.run() –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∏—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª finished", "DEBUG")
            self.finished.emit(success, message)
            log(f"üîµ –°–∏–≥–Ω–∞–ª finished –∏—Å–ø—É—â–µ–Ω", "DEBUG")
            
        except Exception as e:
            log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ AdobeWorker.run(): {e}", "ERROR")
            import traceback
            log(traceback.format_exc(), "ERROR")
            self.finished.emit(False, f"–û—à–∏–±–∫–∞: {str(e)}")


class HostsWorker(QObject):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å hosts —Ñ–∞–π–ª–æ–º"""
    finished = pyqtSignal(bool, str)
    progress = pyqtSignal(str)
    
    def __init__(self, hosts_manager, operation, domains=None):
        super().__init__()
        self.hosts_manager = hosts_manager
        self.operation = operation
        self.domains = domains
        log(f"üîµ HostsWorker —Å–æ–∑–¥–∞–Ω: operation={operation}", "DEBUG")
    
    def run(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é"""
        log(f"üîµ HostsWorker.run() –Ω–∞—á–∞—Ç: operation={self.operation}", "DEBUG")
        try:
            success = False
            message = ""
            
            if self.operation == 'select' and self.domains is not None:
                if len(self.domains) == 0:
                    # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ
                    self.progress.emit("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ –∏–∑ hosts...")
                    success = self.hosts_manager.remove_proxy_domains()
                    if success:
                        message = "–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ hosts —Ñ–∞–π–ª–∞."
                    else:
                        message = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ hosts —Ñ–∞–π–ª–∞."
                else:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                    self.progress.emit(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {len(self.domains)} –¥–æ–º–µ–Ω–æ–≤...")
                    success = self.hosts_manager.apply_selected_domains(self.domains)
                    if success:
                        message = f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(self.domains)} –¥–æ–º–µ–Ω–æ–≤."
                    else:
                        message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã."
            
            self.finished.emit(success, message)
            
        except Exception as e:
            log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ HostsWorker.run(): {e}", "ERROR")
            import traceback
            log(traceback.format_exc(), "ERROR")
            self.finished.emit(False, f"–û—à–∏–±–∫–∞: {str(e)}")