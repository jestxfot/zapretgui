# utils/ipsets_manager.py

import os
import json
from typing import Set, List, Dict
from log import log
from config import LISTS_FOLDER, reg

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
IPSET_ALL_PATH = os.path.join(LISTS_FOLDER, "ipset-base.txt")
IPSET_ALL2_PATH = os.path.join(LISTS_FOLDER, "ipset-all2.txt")

# –ö–ª—é—á–∏ —Ä–µ–µ—Å—Ç—Ä–∞
_IPSETS_KEY = r"Software\Zapret"
_IPSETS_SERVICES = "IpsetsServices"  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
_IPSETS_CUSTOM = "IpsetsCustom"      # JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ IP

# –ë–∞–∑–æ–≤—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã –≤ ipset-base.txt)
BASE_IPS_TEXT = """
# Cloudflare DNS
1.1.1.1
1.1.1.2
1.1.1.3
1.0.0.1
1.0.0.2
1.0.0.3
"""

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å–µ—Ä–≤–∏—Å–æ–≤
PREDEFINED_IP_RANGES = {
    'discord': {
        'name': 'üéÆ Discord',
        'ranges': [
            '162.159.128.0/20',
            '162.159.200.0/21',
            '162.159.216.0/21',
            '162.159.160.0/20',
            '162.159.176.0/20',
            '162.159.192.0/20'
        ]
    },
    'twitter': {
        'name': 'üê¶ Twitter/X',
        'ranges': [
            '104.244.42.0/24',
            '104.244.43.0/24',
            '104.244.44.0/24',
            '104.244.45.0/24',
            '104.244.46.0/24',
            '192.133.76.0/22',
            '199.16.156.0/22',
            '199.59.148.0/22',
            '199.96.56.0/22',
            '202.160.128.0/22',
            '209.237.192.0/19'
        ]
    },
    'facebook': {
        'name': 'üìò Facebook/Meta',
        'ranges': [
            '31.13.24.0/21',
            '31.13.64.0/18',
            '45.64.40.0/22',
            '66.220.144.0/20',
            '69.63.176.0/20',
            '69.171.224.0/19',
            '74.119.76.0/22',
            '102.132.96.0/20',
            '103.4.96.0/22',
            '129.134.0.0/16',
            '157.240.0.0/16',
            '173.252.64.0/18',
            '179.60.192.0/22',
            '185.60.216.0/22',
            '204.15.20.0/22'
        ]
    }
}

def get_base_ips() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö IP"""
    ips = []
    for line in BASE_IPS_TEXT.strip().split('\n'):
        line = line.strip()
        if line and not line.startswith('#'):
            ips.append(line)
    return ips

def save_ipsets_settings(selected_services: Set[str], custom_ips: List[str]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IPsets –≤ —Ä–µ–µ—Å—Ç—Ä"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services_json = json.dumps(list(selected_services))
        if not reg(_IPSETS_KEY, _IPSETS_SERVICES, services_json):
            log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è IP —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä", "‚ùå ERROR")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ IP
        custom_json = json.dumps(custom_ips)
        if not reg(_IPSETS_KEY, _IPSETS_CUSTOM, custom_json):
            log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö IP –≤ —Ä–µ–µ—Å—Ç—Ä", "‚ùå ERROR")
            return False
        
        log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä: {len(selected_services)} IP —Å–µ—Ä–≤–∏—Å–æ–≤, {len(custom_ips)} IP –∞–¥—Ä–µ—Å–æ–≤", "INFO")
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ IPsets: {e}", "‚ùå ERROR")
        return False

def load_ipsets_settings() -> tuple[Set[str], List[str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IPsets –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
    selected_services = set()
    custom_ips = []
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services_json = reg(_IPSETS_KEY, _IPSETS_SERVICES)
        if services_json:
            services_list = json.loads(services_json)
            selected_services = set(services_list)
            log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {len(selected_services)} IP —Å–µ—Ä–≤–∏—Å–æ–≤", "DEBUG")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ IP
        custom_json = reg(_IPSETS_KEY, _IPSETS_CUSTOM)
        if custom_json:
            custom_ips = json.loads(custom_json)
            log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {len(custom_ips)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö IP", "DEBUG")
            
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ IPsets: {e}", "‚ö† WARNING")
    
    return selected_services, custom_ips

def rebuild_ipsets_from_registry():
    """–ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã ipset-base.txt –∏ ipset-all2.txt –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
    try:
        log("–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ IPsets –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞...", "INFO")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        selected_services, custom_ips = load_ipsets_settings()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É lists –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(LISTS_FOLDER, exist_ok=True)
        
        # --- –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º ipset-base.txt (–±–∞–∑–æ–≤—ã–µ + —Å–µ—Ä–≤–∏—Å—ã) ---
        all_ips = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ IP
        all_ips.extend(get_base_ips())
        
        # –î–æ–±–∞–≤–ª—è–µ–º IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service_id in selected_services:
            if service_id in PREDEFINED_IP_RANGES:
                service_ranges = PREDEFINED_IP_RANGES[service_id]['ranges']
                all_ips.extend(service_ranges)
                log(f"–î–æ–±–∞–≤–ª–µ–Ω—ã IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å–µ—Ä–≤–∏—Å–∞ {service_id}: {len(service_ranges)} —à—Ç.", "DEBUG")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ipset-base.txt
        with open(IPSET_ALL_PATH, 'w', encoding='utf-8') as f:
            for ip in all_ips:
                f.write(f"{ip}\n")
        
        log(f"–°–æ–∑–¥–∞–Ω ipset-base.txt: {len(all_ips)} –∑–∞–ø–∏—Å–µ–π", "‚úÖ SUCCESS")
        
        # --- –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º ipset-all2.txt (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ) ---
        with open(IPSET_ALL2_PATH, 'w', encoding='utf-8') as f:
            for ip in custom_ips:
                f.write(f"{ip}\n")
        
        log(f"–°–æ–∑–¥–∞–Ω ipset-all2.txt: {len(custom_ips)} –∑–∞–ø–∏—Å–µ–π", "‚úÖ SUCCESS")
        
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ IPsets: {e}", "‚ùå ERROR")
        return False

def ensure_ipsets_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ IPsets –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É lists –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(LISTS_FOLDER, exist_ok=True)
        
        files_created = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ipset-base.txt
        if not os.path.exists(IPSET_ALL_PATH):
            log("–°–æ–∑–¥–∞–Ω–∏–µ ipset-base.txt...", "INFO")
            
            # –°–æ–∑–¥–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ IP
            with open(IPSET_ALL_PATH, 'w', encoding='utf-8') as f:
                f.write("# –ë–∞–∑–æ–≤—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã\n\n")
                for ip in get_base_ips():
                    f.write(f"{ip}\n")
            
            log(f"–°–æ–∑–¥–∞–Ω ipset-base.txt —Å –±–∞–∑–æ–≤—ã–º–∏ IP", "‚úÖ SUCCESS")
            files_created = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ipset-all2.txt
        if not os.path.exists(IPSET_ALL2_PATH):
            log("–°–æ–∑–¥–∞–Ω–∏–µ ipset-all2.txt...", "INFO")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ IP –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            _, custom_ips = load_ipsets_settings()
            
            with open(IPSET_ALL2_PATH, 'w', encoding='utf-8') as f:
                for ip in custom_ips:
                    f.write(f"{ip}\n")
            
            log(f"–°–æ–∑–¥–∞–Ω ipset-all2.txt", "‚úÖ SUCCESS")
            files_created = True
        
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ IPsets: {e}", "‚ùå ERROR")
        return False

def startup_ipsets_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ IPsets –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        log("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ IPsets –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===", "üîß IPSETS")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        ensure_ipsets_exist()
        
        # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
        selected_services, custom_ips = load_ipsets_settings()
        
        if selected_services or custom_ips:
            log(f"–ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IPsets –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤, {len(custom_ips)} IP", "INFO")
            # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            rebuild_ipsets_from_registry()
        else:
            log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ IPsets –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã", "INFO")
        
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IPsets: {e}", "‚ùå ERROR")
        return False