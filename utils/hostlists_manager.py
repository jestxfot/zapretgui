# utils/hostlists_manager.py

import os
import json
from datetime import datetime
from typing import Set, List, Dict
from log import log
from config import OTHER_PATH, OTHER2_PATH, reg
from .BASE_DOMAINS_TEXT import BASE_DOMAINS_TEXT # –ë–∞–∑–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã)

# –ö–ª—é—á–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤
_HOSTLISTS_KEY = r"Software\ZapretReg2"
_HOSTLISTS_SERVICES = "HostlistsServices"  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
_HOSTLISTS_CUSTOM = "HostlistsCustom"      # JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å–µ—Ä–≤–∏—Å–æ–≤
PREDEFINED_DOMAINS = {
    'steam': {
        'name': 'üéÆ Steam',
        'domains': [
            'steamcommunity.com',
            'steampowered.com',
            'steam-chat.com',
            'steamgames.com',
            'steamusercontent.com',
            'steamcontent.com',
            'steamstatic.com',
            'akamaihd.net',
            'steam-api.com',
            'steamserver.net',
            'playartifact.com',
            's.team',
            'steam.tv',
            'steamdeck.com',
            'underlords.com',
            'valvesoftware.com'
        ]
    },
    'Rockstar & Epic Games': {
        'name': 'üéÆ Rockstar & Epic Games',
        'domains': [
            'epicgames.com',
            'cdn1.unrealengine.com',
            'cdn2.unrealengine.com',
            'epicgames-download1.akamaized.net',
            'fortnite.com',
            'rockstargames.com'
        ]
    },
    'telegram': {
        'name': '‚úàÔ∏è Telegram',
        'domains': [
            'telegram.org',
            'telegram.me',
            't.me',
            'telegra.ph',
            'telesco.pe',
            'telegram-cdn.org',
            'tdesktop.com'
        ]
    },
    'whatsapp': {
        'name': 'üí¨ WhatsApp', 
        'domains': [
            'whatsapp.com',
            'whatsapp.net',
            'wa.me',
            'web.whatsapp.com',
            'www.whatsapp.com',
            'api.whatsapp.com',
            'chat.whatsapp.com',
            'w1.web.whatsapp.com',
            'w2.web.whatsapp.com',
            'w3.web.whatsapp.com',
            'w4.web.whatsapp.com',
            'w5.web.whatsapp.com',
            'w6.web.whatsapp.com',
            'w7.web.whatsapp.com',
            'w8.web.whatsapp.com'
        ]
    }
}

def get_base_domains() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤"""
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        from utils import BASE_DOMAINS_TEXT
        
        # –ü–∞—Ä—Å–∏–º –¥–æ–º–µ–Ω—ã
        domains = [
            domain.strip() 
            for domain in BASE_DOMAINS_TEXT.strip().split('\n') 
            if domain.strip() and not domain.strip().startswith('#')
        ]
        
        log(f"get_base_domains: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(domains)} –¥–æ–º–µ–Ω–æ–≤", "DEBUG")
        
        # –ï—Å–ª–∏ –¥–æ–º–µ–Ω–æ–≤ –º–∞–ª–æ - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
        if len(domains) < 5:
            log(f"‚ö† WARNING: –¢–æ–ª—å–∫–æ {len(domains)} –¥–æ–º–µ–Ω–æ–≤ –≤ BASE_DOMAINS_TEXT", "WARNING")
            return []  # –í–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª fallback
        
        return domains
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_base_domains: {e}", "ERROR")
        return []

def rebuild_hostlists_from_registry():
    """–ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã other.txt –∏ other2.txt –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
    try:
        log("–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞...", "INFO")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        selected_services, custom_domains = load_hostlists_settings()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É lists –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(OTHER_PATH), exist_ok=True)
        
        # --- –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º other.txt ---
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã
        base_domains = get_base_domains()
        log(f"–ë–∞–∑–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –∏–∑ BASE_DOMAINS_TEXT: {len(base_domains)}", "DEBUG")
        
        # ‚úÖ –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –±–∞–∑–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –Ω–µ—Ç –∏–ª–∏ –∏—Ö –º–∞–ª–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
        if len(base_domains) < 5:  # –ú–µ–Ω—å—à–µ 5 –¥–æ–º–µ–Ω–æ–≤ - —è–≤–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
            log("BASE_DOMAINS_TEXT –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ –¥–æ–º–µ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ", "‚ö† WARNING")
            
            # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            try:
                from BASE_DOMAINS_TEXT import BASE_DOMAINS_TEXT
                direct_domains = [
                    line.strip() 
                    for line in BASE_DOMAINS_TEXT.strip().split('\n')
                    if line.strip() and not line.strip().startswith('#')
                ]
                if len(direct_domains) > 5:
                    base_domains = direct_domains
                    log(f"–ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: {len(base_domains)} –¥–æ–º–µ–Ω–æ–≤", "INFO")
                else:
                    raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–º–µ–Ω–æ–≤")
            except:
                log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∏–º–ø–æ—Ä—Ç–µ –±–∞–∑–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤", "‚ùå ERROR")

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
        all_domains = set(base_domains)
        log(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –±–∞–∑–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(all_domains)}", "INFO")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service_id in selected_services:
            if service_id in PREDEFINED_DOMAINS:
                service_domains = PREDEFINED_DOMAINS[service_id]['domains']
                all_domains.update(service_domains)
                log(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–º–µ–Ω—ã —Å–µ—Ä–≤–∏—Å–∞ {PREDEFINED_DOMAINS[service_id]['name']}: {len(service_domains)} —à—Ç.", "DEBUG")
        
        # ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–æ–º–µ–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
        if not all_domains:
            log("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ other.txt!", "‚ùå ERROR")
            # –ê–≤–∞—Ä–∏–π–Ω—ã–π –º–∏–Ω–∏–º—É–º
            all_domains = {'youtube.com', 'googlevideo.com', 'discord.com'}
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º other.txt
        with open(OTHER_PATH, 'w', encoding='utf-8') as f:
            for domain in sorted(all_domains):
                f.write(f"{domain}\n")
        
        log(f"‚úÖ –°–æ–∑–¥–∞–Ω other.txt: {len(all_domains)} –¥–æ–º–µ–Ω–æ–≤", "SUCCESS")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        with open(OTHER_PATH, 'r', encoding='utf-8') as f:
            verification = f.read()
            lines = [l for l in verification.split('\n') if l.strip()]
            if not lines:
                log("‚ùå –û–®–ò–ë–ö–ê: other.txt –∑–∞–ø–∏—Å–∞–Ω, –Ω–æ –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º!", "ERROR")
            else:
                log(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: other.txt —Å–æ–¥–µ—Ä–∂–∏—Ç {len(lines)} —Å—Ç—Ä–æ–∫", "DEBUG")
        
        # --- –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º other2.txt ---
        with open(OTHER2_PATH, 'w', encoding='utf-8') as f:
            for domain in sorted(custom_domains):
                f.write(f"{domain}\n")
        
        log(f"‚úÖ –°–æ–∑–¥–∞–Ω other2.txt: {len(custom_domains)} –¥–æ–º–µ–Ω–æ–≤", "SUCCESS")
        
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "ERROR")
        import traceback
        log(f"Traceback: {traceback.format_exc()}", "ERROR")
        return False

def save_hostlists_settings(selected_services: Set[str], custom_domains: List[str]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services_json = json.dumps(list(selected_services))
        if not reg(_HOSTLISTS_KEY, _HOSTLISTS_SERVICES, services_json):
            log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä", "‚ùå ERROR")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        custom_json = json.dumps(custom_domains)
        if not reg(_HOSTLISTS_KEY, _HOSTLISTS_CUSTOM, custom_json):
            log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä", "‚ùå ERROR")
            return False
        
        log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä: {len(selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤, {len(custom_domains)} –¥–æ–º–µ–Ω–æ–≤", "INFO")
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ùå ERROR")
        return False

def load_hostlists_settings() -> tuple[Set[str], List[str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
    selected_services = set()
    custom_domains = []
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services_json = reg(_HOSTLISTS_KEY, _HOSTLISTS_SERVICES)
        if services_json:
            services_list = json.loads(services_json)
            selected_services = set(services_list)
            log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {len(selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤", "DEBUG")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        custom_json = reg(_HOSTLISTS_KEY, _HOSTLISTS_CUSTOM)
        if custom_json:
            custom_domains = json.loads(custom_json)
            log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {len(custom_domains)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤", "DEBUG")
            
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ö† WARNING")
    
    return selected_services, custom_domains

def ensure_hostlists_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É lists –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(OTHER_PATH), exist_ok=True)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –ø—É—Å—Ç—ã–µ - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        other_exists = os.path.exists(OTHER_PATH) and os.path.getsize(OTHER_PATH) > 0
        other2_exists = os.path.exists(OTHER2_PATH)  # other2.txt –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        
        if other_exists and other2_exists:
            log("–§–∞–π–ª—ã —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç", "DEBUG")
            return True
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –∏–ª–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        log("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤...", "INFO")
        
        if not other_exists:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            selected_services, _ = load_hostlists_settings()
            
            # –ï—Å–ª–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –ø—É—Å—Ç–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if not selected_services:
                log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ", "INFO")
            
            # –°–æ–∑–¥–∞–µ–º other.txt
            all_domains = set(get_base_domains())
            
            for service_id in selected_services:
                if service_id in PREDEFINED_DOMAINS:
                    all_domains.update(PREDEFINED_DOMAINS[service_id]['domains'])
            
            with open(OTHER_PATH, 'w', encoding='utf-8') as f:
                for domain in sorted(all_domains):
                    f.write(f"{domain}\n")
            
            log(f"–°–æ–∑–¥–∞–Ω other.txt —Å {len(all_domains)} –¥–æ–º–µ–Ω–∞–º–∏", "‚úÖ SUCCESS")
        
        if not other2_exists:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π other2.txt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            with open(OTHER2_PATH, 'w', encoding='utf-8') as f:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                _, custom_domains = load_hostlists_settings()
                for domain in sorted(custom_domains):
                    f.write(f"{domain}\n")
            
            log(f"–°–æ–∑–¥–∞–Ω other2.txt", "‚úÖ SUCCESS")
        
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ùå ERROR")
        return False

def startup_hostlists_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        log("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===", "üîß HOSTLISTS")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        ensure_hostlists_exist()
        
        # ‚úÖ –ù–û–í–û–ï: –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å other.txt
        if os.path.exists(OTHER_PATH):
            with open(OTHER_PATH, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = [l.strip() for l in content.split('\n') 
                        if l.strip() and not l.strip().startswith('#')]
                
                if not lines:
                    log("other.txt –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º", "‚ö† WARNING")
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
                    rebuild_hostlists_from_registry()
                    return True
        
        # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
        selected_services, custom_domains = load_hostlists_settings()
        
        if selected_services or custom_domains:
            log(f"–ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤, {len(custom_domains)} –¥–æ–º–µ–Ω–æ–≤", "INFO")
            rebuild_hostlists_from_registry()
        else:
            log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "INFO")
            # ‚úÖ –ù–û–í–û–ï: –ï—Å–ª–∏ —Ä–µ–µ—Å—Ç—Ä –ø—É—Å—Ç, –Ω–æ —Ñ–∞–π–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏
            rebuild_hostlists_from_registry()
        
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ùå ERROR")
        return False