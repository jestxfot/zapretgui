# utils/hostlists_manager.py

import os
import json
from typing import Set, List, Dict
from log import log
from config import OTHER_PATH, OTHER2_PATH, reg

# –ö–ª—é—á–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤
_HOSTLISTS_KEY = r"Software\Zapret"
_HOSTLISTS_SERVICES = "HostlistsServices"  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
_HOSTLISTS_CUSTOM = "HostlistsCustom"      # JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏

# –ë–∞–∑–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã)
BASE_DOMAINS_TEXT = """
1.1.1.1
4pda.ws
5sim.net
adtidy.org
amazon.com
amazonaws.com
animego.org
aol.com
archive.org
articles.sk
bbc.com
bellingcat.com
bigvideo.net
bravotube.tv
btdig.com
cdn.betterttv.net
cdn.frankerfacez.com
cdn.hsmedia.ru
cdn.strapsco.com
cdn.vigo.one
cdn77.com
cdnbunny.org
cdninstagram.com
cdnst.net
cloudflare-ech.com
cloudflare.com
codenames.game
coursera.org
cryptpad.fr
currenttime.tv
delfi.lv
dept.one
detectportal.firefox.com
donationalerts.com
doppiocdn.live
doppiocdn.media
downdetector.com
doxa.team
dpidetector.org
dtf.ru
dw.com
e621.net
element.io
erome.com
escapefromtarkov.com
etahub.com
exitgames.com
eyeofgod.bot
eyezgod.ru
facebook.com
fbcdn.net
fbsbx.com
fburl.com
flibusta.is
flibusta.site
fonts.googleapis.com
gifer.com
glaznews.com
googleads.g.doubleclick.net
hd2.lordfilm-ru.net
hentai-img.com
hmvmania.com
holod.media
hrw.org
i.kym-cdn.com
idelreal.org
indigogobot.com
ingest.sentry.io
instagram.com
invizible.net
jut.su
krymr.com
lantern.io
link.usersbox.io
linkedin.com
lordfilm.llc
lordfilms.day
matrix.org
maven.neoforged.net
medium.com
meduza.io
minecraftrating.ru
moscowtimes.ru
mullvad.net
mytpn.net
news.google.com
nexusmods.com
nnmclub.to
nnmstatic.win
notion.so
novayagazeta.eu
ntc.party
onlinesim.io
ooklaserver.net
otzovik.com
oxu.az
papervpn.io
patreon.com
phncdn.com
phpmyadmin.net
play.google.com
prostovpn.org
proton.me
protonmail.com
protonvpn.com
psiphon.ca
quora.com
radiofrance.fr
re-russia.net
republic.ru
reutersagency.com
rferl.org
roskomsvoboda.org
rtmps.youtube.com
rule34.xxx
rumble.com
rutor.info
rutor.is
rutracker.cc
rutracker.org
rutracker.wiki
save4k.top
signal.org
singlelogin.cc
sms-activate.guru
sndcdn.com
soundcloud.cloud
soundcloud.com
spankbang.com
speedtest.net
static.doubleclick.net
store-steam.ru
streamable.com
svoboda.org
t-ru.org
t.co
te-st.org
thebell.io
theins.ru
tntracker.org
torproject.org
tuta.com
twimg.com
twitter.com
udemy.com
unian.net
vector.im
viber.com
vpngate.net
vpngen.org
vpnguild.org
web.archive.org
wixmp.com
x.com
xhamster.com
xnxx.com
xvideos-cdn.com
xvideos.com
yande.re
z-lib.gs
z-lib.id
z-lib.io
z-library.cc
z-library.sk
ziffstatic.com
zlibrary.to
znanija.com
"""

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å–µ—Ä–≤–∏—Å–æ–≤
PREDEFINED_DOMAINS = {
    'steam': {
        'name': 'üéÆ Steam',
        'domains': [
            'store.steampowered.com',
            'steamcommunity.com',
            'steampowered.com',
            'steam-chat.com',
            'steamgames.com',
            'steamusercontent.com',
            'steamcontent.com',
            'steamstatic.com',
            'akamaihd.net',
            'steamcdn-a.akamaihd.net',
            'steam-api.com',
            'steamserver.net',
            'valve.net',
            'valvesoftware.com',
            'dota2.com',
            'csgo.com'
        ]
    },
    'telegram': {
        'name': '‚úàÔ∏è Telegram',
        'domains': [
            'telegram.org',
            'telegram.me',
            't.me',
            'telegra.ph',
            'telesco.pe',
            'telegram-cdn.org',
            'core.telegram.org',
            'desktop.telegram.org',
            'web.telegram.org',
            'updates.tdesktop.com',
            'venus.web.telegram.org',
            'flora.web.telegram.org',
            'vesta.web.telegram.org',
            'aurora.web.telegram.org',
            'api.telegram.org'
        ]
    },
    'whatsapp': {
        'name': 'üí¨ WhatsApp', 
        'domains': [
            'whatsapp.com',
            'whatsapp.net',
            'wa.me',
            'web.whatsapp.com',
            'www.whatsapp.com',
            'api.whatsapp.com',
            'chat.whatsapp.com',
            'w1.web.whatsapp.com',
            'w2.web.whatsapp.com',
            'w3.web.whatsapp.com',
            'w4.web.whatsapp.com',
            'w5.web.whatsapp.com',
            'w6.web.whatsapp.com',
            'w7.web.whatsapp.com',
            'w8.web.whatsapp.com'
        ]
    },
    'twitch': {
        'name': 'üé• Twitch',
        'domains': [
            'twitch.tv',
            'twitch.com',
            'twitchcdn.net',
            'twitchsvc.net',
            'jtvnw.net',
            'ttvnw.net',
            'twitch-ext.rootonline.de',
            'ext-twitch.tv',
            'pubster.twitch.tv',
            'app.twitch.tv',
            'player.twitch.tv',
            'clips.twitch.tv',
            'gql.twitch.tv',
            'vod-secure.twitch.tv',
            'usher.ttvnw.net',
            'video-weaver.fra02.hls.ttvnw.net'
        ]
    }
}

def get_base_domains() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤"""
    return [
        domain.strip() 
        for domain in BASE_DOMAINS_TEXT.strip().split('\n') 
        if domain.strip() and not domain.strip().startswith('#')
    ]

def save_hostlists_settings(selected_services: Set[str], custom_domains: List[str]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services_json = json.dumps(list(selected_services))
        if not reg(_HOSTLISTS_KEY, _HOSTLISTS_SERVICES, services_json):
            log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä", "‚ùå ERROR")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        custom_json = json.dumps(custom_domains)
        if not reg(_HOSTLISTS_KEY, _HOSTLISTS_CUSTOM, custom_json):
            log("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä", "‚ùå ERROR")
            return False
        
        log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä: {len(selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤, {len(custom_domains)} –¥–æ–º–µ–Ω–æ–≤", "INFO")
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ùå ERROR")
        return False

def load_hostlists_settings() -> tuple[Set[str], List[str]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
    selected_services = set()
    custom_domains = []
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services_json = reg(_HOSTLISTS_KEY, _HOSTLISTS_SERVICES)
        if services_json:
            services_list = json.loads(services_json)
            selected_services = set(services_list)
            log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {len(selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤", "DEBUG")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        custom_json = reg(_HOSTLISTS_KEY, _HOSTLISTS_CUSTOM)
        if custom_json:
            custom_domains = json.loads(custom_json)
            log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {len(custom_domains)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤", "DEBUG")
            
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ö† WARNING")
    
    return selected_services, custom_domains

def rebuild_hostlists_from_registry():
    """–ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã other.txt –∏ other2.txt –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ"""
    try:
        log("–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞...", "INFO")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        selected_services, custom_domains = load_hostlists_settings()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É lists –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(OTHER_PATH), exist_ok=True)
        
        # --- –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º other.txt ---
        all_domains = set(get_base_domains())  # –ë–∞–∑–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service_id in selected_services:
            if service_id in PREDEFINED_DOMAINS:
                service_domains = PREDEFINED_DOMAINS[service_id]['domains']
                all_domains.update(service_domains)
                log(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–º–µ–Ω—ã —Å–µ—Ä–≤–∏—Å–∞ {service_id}: {len(service_domains)} —à—Ç.", "DEBUG")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º other.txt
        with open(OTHER_PATH, 'w', encoding='utf-8') as f:
            for domain in sorted(all_domains):
                f.write(f"{domain}\n")
        
        log(f"–°–æ–∑–¥–∞–Ω other.txt: {len(all_domains)} –¥–æ–º–µ–Ω–æ–≤", "‚úÖ SUCCESS")
        
        # --- –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º other2.txt ---
        with open(OTHER2_PATH, 'w', encoding='utf-8') as f:
            for domain in sorted(custom_domains):
                f.write(f"{domain}\n")
        
        log(f"–°–æ–∑–¥–∞–Ω other2.txt: {len(custom_domains)} –¥–æ–º–µ–Ω–æ–≤", "‚úÖ SUCCESS")
        
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ùå ERROR")
        return False

def ensure_hostlists_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É lists –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(OTHER_PATH), exist_ok=True)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –ø—É—Å—Ç—ã–µ - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        other_exists = os.path.exists(OTHER_PATH) and os.path.getsize(OTHER_PATH) > 0
        other2_exists = os.path.exists(OTHER2_PATH)  # other2.txt –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        
        if other_exists and other2_exists:
            log("–§–∞–π–ª—ã —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç", "DEBUG")
            return True
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –∏–ª–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        log("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤...", "INFO")
        
        if not other_exists:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            selected_services, _ = load_hostlists_settings()
            
            # –ï—Å–ª–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –ø—É—Å—Ç–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if not selected_services:
                log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ", "INFO")
            
            # –°–æ–∑–¥–∞–µ–º other.txt
            all_domains = set(get_base_domains())
            
            for service_id in selected_services:
                if service_id in PREDEFINED_DOMAINS:
                    all_domains.update(PREDEFINED_DOMAINS[service_id]['domains'])
            
            with open(OTHER_PATH, 'w', encoding='utf-8') as f:
                for domain in sorted(all_domains):
                    f.write(f"{domain}\n")
            
            log(f"–°–æ–∑–¥–∞–Ω other.txt —Å {len(all_domains)} –¥–æ–º–µ–Ω–∞–º–∏", "‚úÖ SUCCESS")
        
        if not other2_exists:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π other2.txt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            with open(OTHER2_PATH, 'w', encoding='utf-8') as f:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                _, custom_domains = load_hostlists_settings()
                for domain in sorted(custom_domains):
                    f.write(f"{domain}\n")
            
            log(f"–°–æ–∑–¥–∞–Ω other2.txt", "‚úÖ SUCCESS")
        
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ùå ERROR")
        return False

def startup_hostlists_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        log("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===", "üîß HOSTLISTS")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        ensure_hostlists_exist()
        
        # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
        selected_services, custom_domains = load_hostlists_settings()
        
        if selected_services or custom_domains:
            log(f"–ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤, {len(custom_domains)} –¥–æ–º–µ–Ω–æ–≤", "INFO")
            # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            rebuild_hostlists_from_registry()
        else:
            log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã", "INFO")
        
        return True
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ùå ERROR")
        return False