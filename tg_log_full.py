# tg_log_full.py
import os, time, platform
from PyQt6.QtCore import QObject, QTimer

from log import log
from tg_sender import send_file_to_tg
from tg_log_delta import get_client_id          # UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
from config import APP_VERSION                  # ‚Üê –≤–µ—Ä—Å–∏—è Zapret

def _file_hash(path: str) -> str:
    """
    –ë—ã—Å—Ç—Ä—ã–π MD5 –∏–∑ –ø–µ—Ä–≤—ã—Ö+–ø–æ—Å–ª–µ–¥–Ω–∏—Ö 64 –ö–ë ‚Äì —Ö–≤–∞—Ç–∞–µ—Ç, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å
    ¬´–º–µ–Ω—è–ª—Å—è –ª–∏ —Ñ–∞–π–ª¬ª –∏ –ø—Ä–∏ —ç—Ç–æ–º —Å—á–∏—Ç–∞—Ç—å —Ö—ç—à –∑–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã.
    """
    import hashlib, io
    h = hashlib.md5()
    with open(path, "rb") as f:
        first = f.read(64 * 1024)
        if len(first) < 64 * 1024:      # –º–µ–ª–∫–∏–π —Ñ–∞–π–ª
            h.update(first)
            return h.hexdigest()

        f.seek(-64 * 1024, io.SEEK_END)
        last = f.read(64 * 1024)
    h.update(first); h.update(last)
    return h.hexdigest()

class FullLogDaemon(QObject):
    """
    –î–µ–º–æ–Ω, –æ—Ç—Å—ã–ª–∞—é—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–∞ –≤ TG:
      ‚Ä¢ –∫–∞–∂–¥—ã–µ interval —Å–µ–∫—É–Ω–¥;
      ‚Ä¢ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è;
      ‚Ä¢ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –∏
        –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å [ERROR].
    """
    def __init__(self, log_path: str, interval: int = 120, parent=None):
        super().__init__(parent)

        self.log_path = os.path.abspath(log_path)
        os.makedirs(os.path.dirname(self.log_path) or ".", exist_ok=True)
        if not os.path.isfile(self.log_path):
            open(self.log_path, "a", encoding="utf-8").close()

        # ¬´—Å–Ω–∏–º–∫–∏¬ª –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_hash        = None
        self.last_line_count  = 0

        # –±–µ—Ä—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–π ¬´—Å–Ω–∏–º–æ–∫¬ª
        self._snapshot(first_time=True)

        # —Ç–∞–π–º–µ—Ä
        self.timer = QTimer(self)
        self.timer.setInterval(interval * 1000)
        self.timer.timeout.connect(self._tick)
        self.timer.start()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _tick(self):
        try:
            changed, added, added_lines = self._snapshot()
            if not changed:
                return  # –ª–æ–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è

            # –ò—â–µ–º ERROR-—Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –¥–æ–±–∞–≤–∏–≤—à–∏—Ö—Å—è —Å—Ç—Ä–æ–∫–∞—Ö
            error_lines = [ln for ln in added_lines if "[ERROR]" in ln]

            ts   = time.strftime("%d.%m.%Y %H:%M:%S")
            cid  = get_client_id()
            host = platform.node()

            caption_parts = [
                "üìÑ –ü–æ–ª–Ω—ã–π –ª–æ–≥ Zapret",
                f"Zapret v{APP_VERSION}",
                f"Host: {host}",
                f"üÜî {cid}",
                f"üïí {ts}",
                f"‚ûï {added} —Å—Ç—Ä–æ–∫(–∏)"
            ]

            if error_lines:
                # –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö error-—Å—Ç—Ä–æ–∫–∏
                snippet = "\n".join(error_lines[-3:])
                # Telegram caption ‚â§ 1024 —Å–∏–º–≤–æ–ª–∞, –æ–±—Ä–µ–∂–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if len(snippet) > 800:
                    snippet = snippet[-800:]
                caption_parts.append("‚ö†Ô∏è ERROR:\n" + snippet)

            caption = "\n".join(caption_parts)

            send_file_to_tg(self.log_path, caption)
        except Exception as e:
            log(f"[FullLogDaemon] –æ—à–∏–±–∫–∞: {e}", level="ERROR")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _snapshot(self, *, first_time=False):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–∑–º–µ–Ω–∏–ª—Å—è?, —Å–∫–æ–ª—å–∫–æ_–¥–æ–±–∞–≤–∏–ª–æ—Å—å, —Å–ø–∏—Å–æ–∫_–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö_—Å—Ç—Ä–æ–∫)
        """
        added_lines = []
        line_count  = 0

        # —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –∫–æ–ø–∏–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        with open(self.log_path, "r", encoding="utf-8", errors="replace") as f:
            for idx, line in enumerate(f, 1):
                if idx > self.last_line_count:
                    added_lines.append(line.rstrip("\n"))
                line_count = idx

        file_hash = _file_hash(self.log_path)

        if first_time:
            self.last_hash       = file_hash
            self.last_line_count = line_count
            return False, 0, []

        # —Ä–æ—Ç–∞—Ü–∏—è? –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ ‚Äì —Å—á–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª ¬´–Ω–æ–≤—ã–º¬ª
        if line_count < self.last_line_count:
            added_lines = self._read_all_lines()
            added       = line_count
            changed     = True
        else:
            added       = line_count - self.last_line_count
            changed     = (file_hash != self.last_hash)

        if changed:
            self.last_hash       = file_hash
            self.last_line_count = line_count

        return changed, added, added_lines

    # —á—Ç–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ (–ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏)
    def _read_all_lines(self):
        with open(self.log_path, "r", encoding="utf-8", errors="replace") as f:
            return [ln.rstrip("\n") for ln in f]