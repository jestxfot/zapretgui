# admin_check_debug.py
import os, ctypes
from ctypes import wintypes
from log import log

def debug_admin_status():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ê–í –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===", level="üîç DIAG")
    
    # 1. –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
    try:
        is_admin_old = ctypes.windll.shell32.IsUserAnAdmin()
        log(f"IsUserAnAdmin(): {bool(is_admin_old)}", level="üîç DIAG")
    except Exception as e:
        log(f"IsUserAnAdmin() failed: {e}", level="‚ö† WARNING")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ SID (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    try:
        import win32security
        # –ü–æ–ª—É—á–∞–µ–º SID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_sid = win32security.ConvertStringSidToSid("S-1-5-32-544")
        is_admin_sid = win32security.CheckTokenMembership(None, admin_sid)
        log(f"CheckTokenMembership(Administrators): {is_admin_sid}", level="üîç DIAG")
    except ImportError:
        log("win32security –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º SID –ø—Ä–æ–≤–µ—Ä–∫—É", level="‚ö† WARNING")
    except Exception as e:
        log(f"SID check failed: {e}", level="‚ö† WARNING")
    
    # 3. –¢–æ–∫–µ–Ω—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    advapi32 = ctypes.windll.advapi32
    kernel32 = ctypes.windll.kernel32
    
    TOKEN_QUERY = 0x0008
    TokenElevationType = 18
    TokenElevation = 20
    
    # GetCurrentProcess –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Å–µ–≤–¥–æ-—Ö—ç–Ω–¥–ª -1
    current_process = wintypes.HANDLE(kernel32.GetCurrentProcess())
    
    hToken = wintypes.HANDLE()
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ OpenProcessToken
    if advapi32.OpenProcessToken(
        current_process,
        TOKEN_QUERY,
        ctypes.byref(hToken)
    ):
        try:
            # Elevation Type
            elevation_type = wintypes.DWORD()
            size_needed = wintypes.DWORD()
            
            if advapi32.GetTokenInformation(
                hToken,
                TokenElevationType,
                ctypes.byref(elevation_type),
                ctypes.sizeof(elevation_type),
                ctypes.byref(size_needed)
            ):
                types = {
                    1: "TokenElevationTypeDefault",
                    2: "TokenElevationTypeFull", 
                    3: "TokenElevationTypeLimited"
                }
                log(f"TokenElevationType: {elevation_type.value} ({types.get(elevation_type.value, 'Unknown')})", level="üîç DIAG")
            else:
                error = kernel32.GetLastError()
                log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TokenElevationType, –∫–æ–¥ –æ—à–∏–±–∫–∏: {error}", level="‚ö† WARNING")
            
            # Elevation Status
            is_elevated = wintypes.DWORD()
            size_needed = wintypes.DWORD()
            
            if advapi32.GetTokenInformation(
                hToken,
                TokenElevation,
                ctypes.byref(is_elevated),
                ctypes.sizeof(is_elevated),
                ctypes.byref(size_needed)
            ):
                log(f"TokenElevation: {bool(is_elevated.value)}", level="üîç DIAG")
            else:
                error = kernel32.GetLastError()
                log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TokenElevation, –∫–æ–¥ –æ—à–∏–±–∫–∏: {error}", level="‚ö† WARNING")
                
        finally:
            kernel32.CloseHandle(hToken)
    else:
        error = kernel32.GetLastError()
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ–¥ –æ—à–∏–±–∫–∏: {error}", level="‚ùå ERROR")
    
    # 4. –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    log("=== –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–ê–í ===", level="üîç DIAG")
    test_file = "C:\\Windows\\System32\\admin_test.tmp"
    try:
        with open(test_file, 'w') as f:
            f.write("test")
        os.remove(test_file)
        log("‚úÖ –ú–æ–≥—É –ø–∏—Å–∞—Ç—å –≤ System32 - –ï–°–¢–¨ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞", level="‚úÖ SUCCESS")
    except Exception as e:
        log(f"‚ùå –ù–ï –º–æ–≥—É –ø–∏—Å–∞—Ç—å –≤ System32 - –ù–ï–¢ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ ({e})", level="‚ùå ERROR")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ UAC
    try:
        import winreg
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
                           r"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System")
        uac_enabled, _ = winreg.QueryValueEx(key, "EnableLUA")
        consent_prompt, _ = winreg.QueryValueEx(key, "ConsentPromptBehaviorAdmin")
        log(f"UAC –≤–∫–ª—é—á–µ–Ω: {bool(uac_enabled)}", level="üîç DIAG")
        log(f"ConsentPromptBehaviorAdmin: {consent_prompt}", level="üîç DIAG")
        winreg.CloseKey(key)
    except Exception as e:
        log(f"–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å UAC: {e}", level="‚ö† WARNING")
    
    # 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    log("=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===", level="üîç DIAG")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        import getpass
        log(f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {getpass.getuser()}", level="üîç DIAG")
    except Exception as e:
        log(f"–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", level="‚ö† WARNING")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    log(f"USERNAME: {os.environ.get('USERNAME', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}", level="üîç DIAG")
    log(f"USERDOMAIN: {os.environ.get('USERDOMAIN', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}", level="üîç DIAG")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
    log("=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===", level="üîç DIAG")