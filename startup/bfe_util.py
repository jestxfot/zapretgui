# bfe_util.py

from typing import Optional, Tuple
import time
import win32service
import win32serviceutil
import ctypes
import threading
from queue import Queue
from PyQt6.QtWidgets import QWidget

SERVICE_RUNNING = win32service.SERVICE_RUNNING
ERROR_SERVICE_DOES_NOT_EXIST = 1060

def _native_msg(title: str, text: str, icon: int = 0x40):
    # icon: 0x40 = MB_ICONINFORMATION, 0x10 = MB_ICONERROR
    ctypes.windll.user32.MessageBoxW(None, text, title, icon)

def is_service_running(name: str) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª—É–∂–±—ã —á–µ—Ä–µ–∑ Win32 API."""
    scm = win32service.OpenSCManager(None, None,
                                     win32service.SC_MANAGER_CONNECT)
    try:
        try:
            svc = win32service.OpenService(scm, name,
                                           win32service.SERVICE_QUERY_STATUS)
        except win32service.error as e:
            # –ï—Å–ª–∏ —Å–ª—É–∂–±—ã –Ω–µ—Ç ‚Äì –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            if e.winerror == ERROR_SERVICE_DOES_NOT_EXIST:
                return False
            raise                       # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
        try:
            status = win32service.QueryServiceStatus(svc)[1]
            return status == SERVICE_RUNNING
        finally:
            win32service.CloseServiceHandle(svc)
    finally:
        win32service.CloseServiceHandle(scm)


class ServiceCache:
    """–ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–ª—É–∂–±."""
    def __init__(self):
        self._cache = {}
        self._lock = threading.Lock()
        self._default_ttl = 300  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def get(self, service_name: str) -> Optional[bool]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –∞–∫—Ç—É–∞–ª–µ–Ω."""
        with self._lock:
            if service_name in self._cache:
                timestamp, status, ttl = self._cache[service_name]
                if time.time() - timestamp < ttl:
                    return status
        return None
    
    def set(self, service_name: str, status: bool, ttl: Optional[int] = None):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –∫—ç—à–µ."""
        if ttl is None:
            # –ï—Å–ª–∏ —Å–ª—É–∂–±–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ –¥–æ–ª—å—à–µ
            ttl = 600 if status else 60
        
        with self._lock:
            self._cache[service_name] = (time.time(), status, ttl)
    
    def invalidate(self, service_name: str):
        """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –¥–ª—è —Å–ª—É–∂–±—ã."""
        with self._lock:
            self._cache.pop(service_name, None)


class AsyncServiceChecker:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ–≤–µ—Ä—â–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–ª—É–∂–±."""
    def __init__(self):
        self._results = {}
        self._lock = threading.Lock()
        self._queue = Queue()
        self._running = True
        self._worker = threading.Thread(target=self._check_worker, daemon=True)
        self._worker.start()
    
    def _check_worker(self):
        """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª—É–∂–±."""
        while self._running:
            try:
                # –ñ–¥—ë–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                task = self._queue.get(timeout=1)
                if task is None:
                    break
                
                service_name, callback = task
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                try:
                    result = is_service_running(service_name)
                    with self._lock:
                        self._results[service_name] = (time.time(), result)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    service_cache.set(service_name, result)
                    
                    # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                    if callback:
                        callback(service_name, result)
                        
                except Exception as e:
                    from log import log
                    log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ {service_name}: {e}", "‚ùå ERROR")
                    
            except:
                # Timeout –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                pass
    
    def check_async(self, service_name: str, callback=None):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª—É–∂–±—ã."""
        self._queue.put((service_name, callback))
    
    def get_last_result(self, service_name: str) -> Optional[Tuple[float, bool]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        with self._lock:
            return self._results.get(service_name)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫."""
        self._running = False
        self._queue.put(None)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
service_cache = ServiceCache()
async_checker = AsyncServiceChecker()


def start_service(service_name: str, timeout: int = 10) -> bool:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É Windows."""
    try:
        win32serviceutil.StartService(service_name)
        
        # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
        start_time = time.time()
        while time.time() - start_time < timeout:
            if is_service_running(service_name):
                return True
            time.sleep(0.5)
        
        return False
        
    except Exception as e:
        # –ï—Å–ª–∏ —Å–ª—É–∂–±–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞
        if "—É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞" in str(e) or "already running" in str(e).lower():
            return True
        return False


def ensure_bfe_running(show_ui: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–±—É BFE —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.
    """
    from startup.check_cache import startup_cache
    from log import log
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–ª—É–∂–±—ã
    cached_status = service_cache.get("BFE")
    if cached_status is not None:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
        async_checker.check_async("BFE")
        return cached_status
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º startup –∫—ç—à
    has_cache, cached_result = startup_cache.is_cached_and_valid("bfe_check")
    if has_cache:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return cached_result
    
    log("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã Base Filtering Engine (BFE)", "üßπ bfe_util")
    
    try:
        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ Win32 API
        is_running = is_service_running("BFE")
        
        if not is_running:
            log("–°–ª—É–∂–±–∞ BFE –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å", "‚ö† WARNING")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if show_ui:
                _native_msg("–°–ª—É–∂–±–∞ BFE", 
                           "–°–ª—É–∂–±–∞ Base Filtering Engine –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
                           "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞...", 0x40)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É
            is_running = start_service("BFE", timeout=5)
            
            if not is_running:
                log("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É BFE", "‚ùå ERROR")
                if show_ui:
                    _native_msg("–û—à–∏–±–∫–∞", 
                               "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É Base Filtering Engine.\n"
                               "–ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä Windows –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", 0x10)
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à–∏
        service_cache.set("BFE", is_running)
        startup_cache.cache_result("bfe_check", is_running)
        
        # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if is_running:
            schedule_periodic_check("BFE", interval=300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        return is_running
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª—É–∂–±—ã BFE: {e}", "‚ùå ERROR")
        service_cache.set("BFE", False, ttl=30)  # –∫—ç—à–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        startup_cache.cache_result("bfe_check", False)
        return False

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
_periodic_checks = {}
_periodic_lock = threading.Lock()


def schedule_periodic_check(service_name: str, interval: int = 300):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª—É–∂–±—ã."""
    def periodic_check():
        while True:
            with _periodic_lock:
                if service_name not in _periodic_checks:
                    break
                    
            time.sleep(interval)
            async_checker.check_async(service_name)
    
    with _periodic_lock:
        if service_name not in _periodic_checks:
            thread = threading.Thread(target=periodic_check, daemon=True)
            thread.start()
            _periodic_checks[service_name] = thread


def stop_periodic_check(service_name: str):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª—É–∂–±—ã."""
    with _periodic_lock:
        _periodic_checks.pop(service_name, None)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def preload_service_status(service_name: str = "BFE"):
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É–∂–±—ã –≤ —Ñ–æ–Ω–µ."""
    async_checker.check_async(service_name)


# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
def cleanup():
    """–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    async_checker.stop()
    with _periodic_lock:
        _periodic_checks.clear()


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
import atexit
atexit.register(cleanup)