"""
–ú–æ–¥—É–ª—å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã MAX
"""

import os
import winreg
import ctypes
import subprocess
from pathlib import Path
from typing import Optional, Callable, List, Tuple
from log import log

# –ö–ª—é—á –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
REGISTRY_PATH = r"Software\ZapretReg2GUI"
REGISTRY_KEY_MAX_BLOCKED = "MaxBlocked"

# –ü—É—Ç—å –∫ –ø–æ–ª–∏—Ç–∏–∫–∞–º Explorer –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—É—Å–∫–∞
EXPLORER_POLICIES_PATH = r"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"
DISALLOW_RUN_PATH = r"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun"

# –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
MAX_PATHS = [
    r"%LOCALAPPDATA%\oneme",
    r"%LOCALAPPDATA%\max",
    r"C:\Program Files\max",
]

# –ü—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
MAX_PROCESSES = [
    "max.exe",
    "MAX.exe",
    "max.msi", 
    "MAX.msi", 
    "max1.exe",
    "MAX1.exe",
    "max1.msi", 
    "MAX1.msi", 
    "maxsetup.exe",
    "max_installer.exe",
    "maxupdater.exe",
    "max_uninstall.exe",
    "oneme.exe",
    "onemesetup.exe",
    "max-service.exe"
]


class MaxBlockerManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã MAX"""
    
    def __init__(self, status_callback: Optional[Callable] = None):
        self.status_callback = status_callback or (lambda x: None)
        
    def _set_status(self, msg: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ callback"""
        self.status_callback(msg)
        log(f"MaxBlocker: {msg}", "INFO")
    
    def is_max_blocked(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MAX"""
        try:
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, REGISTRY_PATH) as key:
                value, _ = winreg.QueryValueEx(key, REGISTRY_KEY_MAX_BLOCKED)
                return bool(value)
        except (FileNotFoundError, OSError):
            return False
    
    def set_max_blocked(self, blocked: bool) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, REGISTRY_PATH) as key:
                winreg.SetValueEx(key, REGISTRY_KEY_MAX_BLOCKED, 0, winreg.REG_DWORD, int(blocked))
            return True
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–µ—Å—Ç—Ä: {e}", "‚ùå ERROR")
            return False
    
    def block_processes_in_registry(self) -> bool:
        """
        –ë–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ MAX —á–µ—Ä–µ–∑ –ø–æ–ª–∏—Ç–∏–∫—É DisallowRun –≤ —Ä–µ–µ—Å—Ç—Ä–µ
        """
        try:
            # 1. –°–æ–∑–¥–∞–µ–º/–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á –ø–æ–ª–∏—Ç–∏–∫ Explorer
            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, EXPLORER_POLICIES_PATH) as explorer_key:
                # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É DisallowRun
                winreg.SetValueEx(explorer_key, "DisallowRun", 0, winreg.REG_DWORD, 1)
                log("–ü–æ–ª–∏—Ç–∏–∫–∞ DisallowRun –≤–∫–ª—é—á–µ–Ω–∞", "‚úÖ INFO")
            
            # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á DisallowRun –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
            with winreg.CreateKeyEx(winreg.HKEY_CURRENT_USER, DISALLOW_RUN_PATH) as disallow_key:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
                existing_values = {}
                index = 0
                while True:
                    try:
                        name, value, _ = winreg.EnumValue(disallow_key, index)
                        existing_values[value.lower()] = name
                        index += 1
                    except WindowsError:
                        break
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
                next_index = 1
                for process in MAX_PROCESSES:
                    process_lower = process.lower()
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if process_lower in existing_values:
                        log(f"–ü—Ä–æ—Ü–µ—Å—Å {process} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", "‚ÑπÔ∏è INFO")
                        continue
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    while str(next_index) in existing_values.values():
                        next_index += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–ø–∏—Å–æ–∫
                    winreg.SetValueEx(disallow_key, str(next_index), 0, winreg.REG_SZ, process)
                    log(f"–ü—Ä–æ—Ü–µ—Å—Å {process} –¥–æ–±–∞–≤–ª–µ–Ω –≤ DisallowRun —Å –∏–Ω–¥–µ–∫—Å–æ–º {next_index}", "‚úÖ INFO")
                    next_index += 1
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ Explorer –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            self._refresh_explorer_policies()
            
            return True
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {e}", "‚ùå ERROR")
            return False
    
    def unblock_processes_in_registry(self) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ MAX –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á DisallowRun
            try:
                with winreg.OpenKey(winreg.HKEY_CURRENT_USER, DISALLOW_RUN_PATH, 
                                   0, winreg.KEY_ALL_ACCESS) as disallow_key:
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    values_to_delete = []
                    index = 0
                    
                    while True:
                        try:
                            name, value, _ = winreg.EnumValue(disallow_key, index)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–¥–Ω–∏–º –∏–∑ –Ω–∞—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                            if value.lower() in [p.lower() for p in MAX_PROCESSES]:
                                values_to_delete.append(name)
                                log(f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å MAX –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {value} (–∫–ª—é—á: {name})", "üîç INFO")
                            index += 1
                        except WindowsError:
                            break
                    
                    # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    for name in values_to_delete:
                        try:
                            winreg.DeleteValue(disallow_key, name)
                            log(f"–£–¥–∞–ª–µ–Ω –∫–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {name}", "‚úÖ INFO")
                        except:
                            pass
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥—Ä—É–≥–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    remaining_count = 0
                    try:
                        index = 0
                        while True:
                            winreg.EnumValue(disallow_key, index)
                            remaining_count += 1
                            index += 1
                    except WindowsError:
                        pass
                    
                    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É
                    if remaining_count == 0:
                        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, EXPLORER_POLICIES_PATH,
                                           0, winreg.KEY_SET_VALUE) as explorer_key:
                            winreg.SetValueEx(explorer_key, "DisallowRun", 0, winreg.REG_DWORD, 0)
                            log("–ü–æ–ª–∏—Ç–∏–∫–∞ DisallowRun –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º)", "‚úÖ INFO")
                        
                        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –∫–ª—é—á DisallowRun
                        try:
                            winreg.DeleteKey(winreg.HKEY_CURRENT_USER, DISALLOW_RUN_PATH)
                            log("–ö–ª—é—á DisallowRun —É–¥–∞–ª–µ–Ω", "‚úÖ INFO")
                        except:
                            pass
                            
            except FileNotFoundError:
                log("–ö–ª—é—á DisallowRun –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞", "‚ÑπÔ∏è INFO")
                return True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ Explorer
            self._refresh_explorer_policies()
            
            return True
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {e}", "‚ùå ERROR")
            return False
    
    def _refresh_explorer_policies(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ Explorer –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        try:
            # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ gpupdate
            subprocess.run(['gpupdate', '/force'], capture_output=True, timeout=5)
            
            # –°–ø–æ—Å–æ–± 2: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Explorer (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
            # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∞–≤—è–∑—á–∏–≤–æ
            # subprocess.run(['taskkill', '/F', '/IM', 'explorer.exe'], capture_output=True)
            # subprocess.run(['start', 'explorer.exe'], shell=True, capture_output=True)
            
            # –°–ø–æ—Å–æ–± 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∏—Ç–∏–∫
            import ctypes
            from ctypes import wintypes
            
            HWND_BROADCAST = 0xFFFF
            WM_SETTINGCHANGE = 0x001A
            
            result = ctypes.windll.user32.SendMessageTimeoutW(
                HWND_BROADCAST,
                WM_SETTINGCHANGE,
                0,
                ctypes.cast("Policy", ctypes.c_wchar_p),
                2,  # SMTO_ABORTIFHUNG
                5000,
                ctypes.byref(wintypes.DWORD())
            )
            
            log("–ü–æ–ª–∏—Ç–∏–∫–∏ Explorer –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "‚úÖ INFO")
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫ Explorer: {e}", "‚ö†Ô∏è WARNING")
    
    def create_blocking_files(self) -> Tuple[int, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –≤ –º–µ—Å—Ç–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MAX
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—à–Ω–æ_—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö, –≤—Å–µ–≥–æ_–ø—É—Ç–µ–π)
        """
        success_count = 0
        paths = []
        
        for path_template in MAX_PATHS:
            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            path = os.path.expandvars(path_template)
            paths.append(path)
            
            try:
                # –ï—Å–ª–∏ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –ø–∞–ø–∫–∞ - —É–¥–∞–ª—è–µ–º
                if os.path.exists(path):
                    if os.path.isdir(path):
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
                            import shutil
                            shutil.rmtree(path, ignore_errors=True)
                            log(f"–£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ MAX: {path}", "üóëÔ∏è INFO")
                        except:
                            pass
                    elif os.path.isfile(path):
                        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Ñ–∞–π–ª-–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        success_count += 1
                        continue
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª-–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                # –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                parent_dir = os.path.dirname(path)
                if not os.path.exists(parent_dir):
                    os.makedirs(parent_dir, exist_ok=True)
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                with open(path, 'w') as f:
                    f.write("BLOCKED BY ZAPRET GUI\n")
                
                # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
                os.chmod(path, 0o444)
                
                success_count += 1
                log(f"–°–æ–∑–¥–∞–Ω –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª: {path}", "‚úÖ INFO")
                
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ {path}: {e}", "‚ö†Ô∏è WARNING")
        
        return success_count, len(paths)
    
    def remove_blocking_files(self) -> Tuple[int, int]:
        """
        –£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—à–Ω–æ_—É–¥–∞–ª–µ–Ω–Ω—ã—Ö, –≤—Å–µ–≥–æ_–ø—É—Ç–µ–π)
        """
        success_count = 0
        paths = []
        
        for path_template in MAX_PATHS:
            path = os.path.expandvars(path_template)
            paths.append(path)
            
            try:
                if os.path.exists(path) and os.path.isfile(path):
                    # –°–Ω–∏–º–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç "—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ"
                    os.chmod(path, 0o666)
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    os.remove(path)
                    success_count += 1
                    log(f"–£–¥–∞–ª–µ–Ω –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª: {path}", "‚úÖ INFO")
                else:
                    # –§–∞–π–ª–∞ –Ω–µ—Ç - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É—Å–ø–µ—à–Ω–æ
                    success_count += 1
                    
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ {path}: {e}", "‚ö†Ô∏è WARNING")
        
        return success_count, len(paths)
    
    def block_max_in_firewall(self) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ Windows Firewall –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ MAX
        """
        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è max.exe
            rules = [
                ('netsh', 'advfirewall', 'firewall', 'add', 'rule', 
                 'name=Block MAX Outbound', 'dir=out', 'program=*max.exe', 
                 'action=block', 'enable=yes'),
                ('netsh', 'advfirewall', 'firewall', 'add', 'rule',
                 'name=Block MAX Inbound', 'dir=in', 'program=*max.exe',
                 'action=block', 'enable=yes'),
            ]
            
            for rule_cmd in rules:
                result = subprocess.run(rule_cmd, capture_output=True, text=True, shell=True)
                if result.returncode != 0:
                    log(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ firewall: {result.stderr}", "‚ö†Ô∏è WARNING")
            
            log("–ü—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ MAX –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Windows Firewall", "‚úÖ INFO")
            return True
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ firewall: {e}", "‚ùå ERROR")
            return False
    
    def unblock_max_in_firewall(self) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ MAX –∏–∑ Windows Firewall
        """
        try:
            rules = [
                ('netsh', 'advfirewall', 'firewall', 'delete', 'rule', 'name=Block MAX Outbound'),
                ('netsh', 'advfirewall', 'firewall', 'delete', 'rule', 'name=Block MAX Inbound'),
            ]
            
            for rule_cmd in rules:
                subprocess.run(rule_cmd, capture_output=True, text=True, shell=True)
            
            log("–ü—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ MAX —É–¥–∞–ª–µ–Ω—ã –∏–∑ Windows Firewall", "‚úÖ INFO")
            return True
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª firewall: {e}", "‚ùå ERROR")
            return False
    
    def kill_max_processes(self) -> int:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã MAX
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        """
        killed_count = 0
        
        for process_name in MAX_PROCESSES:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º taskkill –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                result = subprocess.run(
                    ['taskkill', '/F', '/IM', process_name],
                    capture_output=True,
                    text=True,
                    shell=True
                )
                
                if result.returncode == 0:
                    killed_count += 1
                    log(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –∑–∞–≤–µ—Ä—à–µ–Ω", "üõë INFO")
                    
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_name}: {e}", "‚ö†Ô∏è WARNING")
        
        return killed_count
    
    def add_to_hosts_file(self) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ–º–µ–Ω–æ–≤ MAX –≤ —Ñ–∞–π–ª hosts
        """
        hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
        blocked_domains = [
            "max.ru",
            "download.max.ru",
            "update.max.ru",
            "api.max.ru",
            "cdn.max.ru",
            "oneme.com",
            "download.oneme.com",
        ]
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π hosts —Ñ–∞–π–ª
            with open(hosts_path, 'r', encoding='utf-8-sig') as f:
                content = f.read()
            
            # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –Ω–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
            marker = "# MAX BLOCKED BY ZAPRET GUI"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—à–∏ –∑–∞–ø–∏—Å–∏
            if marker in content:
                return True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            new_entries = [f"\n{marker}"]
            for domain in blocked_domains:
                new_entries.append(f"127.0.0.1 {domain}")
                new_entries.append(f"::1 {domain}")
            new_entries.append(f"# END MAX BLOCK\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(hosts_path, 'a', encoding='utf-8-sig') as f:
                f.write('\n'.join(new_entries))
            
            log("–î–æ–º–µ–Ω—ã MAX –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ hosts —Ñ–∞–π–ª", "‚úÖ INFO")
            return True
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è hosts —Ñ–∞–π–ª–∞: {e}", "‚ùå ERROR")
            return False
    
    def remove_from_hosts_file(self) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ–º–µ–Ω–æ–≤ MAX –∏–∑ —Ñ–∞–π–ª–∞ hosts
        """
        hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
        
        try:
            with open(hosts_path, 'r', encoding='utf-8-sig') as f:
                lines = f.readlines()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, —É–¥–∞–ª—è—è –Ω–∞—à–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            marker_start = "# MAX BLOCKED BY ZAPRET GUI"
            marker_end = "# END MAX BLOCK"
            
            new_lines = []
            skip = False
            
            for line in lines:
                if marker_start in line:
                    skip = True
                elif marker_end in line:
                    skip = False
                    continue
                elif not skip:
                    new_lines.append(line)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(hosts_path, 'w', encoding='utf-8-sig') as f:
                f.writelines(new_lines)
            
            log("–î–æ–º–µ–Ω—ã MAX —É–¥–∞–ª–µ–Ω—ã –∏–∑ hosts —Ñ–∞–π–ª–∞", "‚úÖ INFO")
            return True
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è hosts —Ñ–∞–π–ª–∞: {e}", "‚ùå ERROR")
            return False
    
    def enable_blocking(self) -> Tuple[bool, str]:
        """
        –í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É MAX
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        self._set_status("–í–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ MAX...")
        
        results = []
        
        # 1. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã MAX
        killed = self.kill_max_processes()
        if killed > 0:
            results.append(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {killed}")
        
        # 2. –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä (–ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï)
        if self.block_processes_in_registry():
            results.append("‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–∏—Ç–∏–∫–∏ Windows")
        else:
            results.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä")
        
        # 3. –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        created, total = self.create_blocking_files()
        results.append(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {created}/{total}")
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ firewall (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞)
        if ctypes.windll.shell32.IsUserAnAdmin():
            if self.block_max_in_firewall():
                results.append("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ firewall –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
            # 5. –ë–ª–æ–∫–∏—Ä—É–µ–º –≤ hosts —Ñ–∞–π–ª–µ
            if self.add_to_hosts_file():
                results.append("‚úÖ –î–æ–º–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ hosts")
        else:
            results.append("‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.set_max_blocked(True)
        
        message = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MAX –≤–∫–ª—é—á–µ–Ω–∞:\n" + "\n".join(results)
        self._set_status("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MAX –≤–∫–ª—é—á–µ–Ω–∞")
        
        log("=" * 50, "INFO")
        log("–ë–õ–û–ö–ò–†–û–í–ö–ê MAX –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê", "üõ°Ô∏è INFO")
        log("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:", "INFO")
        for proc in MAX_PROCESSES:
            log(f"  ‚Ä¢ {proc}", "INFO")
        log("=" * 50, "INFO")
        
        return True, message
    
    def disable_blocking(self) -> Tuple[bool, str]:
        """
        –û—Ç–∫–ª—é—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É MAX
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        self._set_status("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ MAX...")
        
        results = []
        
        # 1. –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ (–ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï)
        if self.unblock_processes_in_registry():
            results.append("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä —É–¥–∞–ª–µ–Ω–∞")
        else:
            results.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞")
        
        # 2. –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        removed, total = self.remove_blocking_files()
        results.append(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {removed}/{total}")
        
        # 3. –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ firewall (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞)
        if ctypes.windll.shell32.IsUserAnAdmin():
            if self.unblock_max_in_firewall():
                results.append("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ firewall —É–¥–∞–ª–µ–Ω—ã")
            
            # 4. –£–¥–∞–ª—è–µ–º –∏–∑ hosts —Ñ–∞–π–ª–∞
            if self.remove_from_hosts_file():
                results.append("‚úÖ –î–æ–º–µ–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ hosts")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.set_max_blocked(False)
        
        message = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MAX –æ—Ç–∫–ª—é—á–µ–Ω–∞:\n" + "\n".join(results)
        self._set_status("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MAX –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        
        log("=" * 50, "INFO")
        log("–ë–õ–û–ö–ò–†–û–í–ö–ê MAX –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê", "‚úÖ INFO")
        log("=" * 50, "INFO")
        
        return True, message


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
def is_max_blocked() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ MAX"""
    manager = MaxBlockerManager()
    return manager.is_max_blocked()

def set_max_blocked(blocked: bool) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ MAX"""
    manager = MaxBlockerManager()
    return manager.set_max_blocked(blocked)