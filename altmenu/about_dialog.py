from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QLabel, QPushButton,
    QHBoxLayout, QMessageBox, QTabWidget, QWidget,
    QScrollArea, QGroupBox, QFrame
)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QGuiApplication, QIcon, QFont, QPixmap

from config import APP_VERSION
from config.urls import INFO_URL, BOLVAN_URL


class AboutDialog(QDialog):
    def __init__(self, parent=None):
        from tgram import get_client_id

        super().__init__(parent)
        self.setWindowTitle("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        self.setFixedSize(600, 500)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∏ —Ü–≤–µ—Ç–∞
        self.theme_info = self._get_current_theme_info(parent)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        self._apply_theme_styles()
        
        cid = get_client_id()

        # –ö–æ—Ä–Ω–µ–≤–æ–π layout
        vbox = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤–µ—Ä—Å–∏–µ–π
        header_widget = QWidget()
        header_layout = QVBoxLayout(header_widget)
        header_layout.setContentsMargins(10, 10, 10, 5)
        
        title = QLabel(f"<h2 style='margin: 0;'>üöÄ Zapret GUI</h2>")
        version_label = QLabel(f"<span>–í–µ—Ä—Å–∏—è: <b>{APP_VERSION}</b></span>")
        
        header_layout.addWidget(title)
        header_layout.addWidget(version_label)
        
        # ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        id_frame = QFrame()
        id_frame.setFrameStyle(QFrame.Shape.Box)
        id_frame.setStyleSheet(self._get_id_frame_style())
        
        id_layout = QHBoxLayout(id_frame)
        id_label = QLabel(f"üîë ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <code style='font-family: monospace; padding: 2px 4px; border-radius: 3px;'>{cid}</code>")
        id_layout.addWidget(id_label)
        
        header_layout.addWidget(id_frame)
        vbox.addWidget(header_widget)

        # –¢–∞–±—ã
        tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        info_tab = self._create_info_tab()
        tabs.addTab(info_tab, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã"
        channels_tab = self._create_channels_tab()
        tabs.addTab(channels_tab, "üí¨ –¢–µ–ª–µ–≥—Ä–∞–º")
        
        vbox.addWidget(tabs)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bottom_frame = QFrame()
        bottom_frame.setFrameStyle(QFrame.Shape.NoFrame)
        bottom_layout = QHBoxLayout(bottom_frame)
        
        btn_copy = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID")
        btn_copy.setObjectName("copyBtn")
        btn_copy.setStyleSheet(self._get_button_style("copy"))
        btn_copy.clicked.connect(lambda: self._copy_cid(cid))
        bottom_layout.addWidget(btn_copy)
        
        bottom_layout.addStretch()
        
        btn_close = QPushButton("‚úñ –ó–∞–∫—Ä—ã—Ç—å")
        btn_close.setStyleSheet(self._get_button_style("close"))
        btn_close.clicked.connect(self.accept)
        bottom_layout.addWidget(btn_close)
        
        vbox.addWidget(bottom_frame)

    def _get_current_theme_info(self, parent):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ"""
        theme_info = {
            'name': 'default',
            'is_dark': True,
            'is_amoled': False,
            'is_pure_black': False,
            'button_color': '0, 125, 242',
            'status_color': '#ffffff',
            'accent_color': '#0088cc'
        }
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å theme_manager –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
            if parent and hasattr(parent, 'theme_manager'):
                from ui.theme import THEMES
                theme_manager = parent.theme_manager
                current_theme = theme_manager.current_theme
                
                theme_info['name'] = current_theme
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–º—ã
                theme_info['is_dark'] = (
                    current_theme.startswith("–¢–µ–º–Ω–∞—è") or 
                    current_theme.startswith("AMOLED") or
                    current_theme == "–ü–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–Ω–∞—è" or
                    current_theme == "–†–ö–ù –¢—è–Ω"
                )
                
                theme_info['is_amoled'] = current_theme.startswith("AMOLED")
                theme_info['is_pure_black'] = current_theme == "–ü–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–Ω–∞—è"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã
                if current_theme in THEMES:
                    theme_data = THEMES[current_theme]
                    theme_info['button_color'] = theme_data.get('button_color', '0, 125, 242')
                    theme_info['status_color'] = theme_data.get('status_color', '#ffffff')
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º RGB –≤ hex –¥–ª—è accent_color
                    try:
                        rgb = [int(x.strip()) for x in theme_info['button_color'].split(',')]
                        theme_info['accent_color'] = f"#{rgb[0]:02x}{rgb[1]:02x}{rgb[2]:02x}"
                    except:
                        theme_info['accent_color'] = '#0088cc'
                        
        except Exception as e:
            from log import log
            log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ: {e}", "WARNING")
            
        return theme_info

    def _apply_theme_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –¥–∏–∞–ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã"""
        if self.theme_info['is_pure_black']:
            # –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–Ω–æ–π —Ç–µ–º—ã
            self.setStyleSheet(self._get_pure_black_styles())
        elif self.theme_info['is_amoled']:
            # –°—Ç–∏–ª–∏ –¥–ª—è AMOLED —Ç–µ–º
            self.setStyleSheet(self._get_amoled_styles())
        elif self.theme_info['is_dark']:
            # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω—ã—Ö —Ç–µ–º
            self.setStyleSheet(self._get_dark_theme_styles())
        else:
            # –°—Ç–∏–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª—ã—Ö —Ç–µ–º
            self.setStyleSheet(self._get_light_theme_styles())

    def _get_pure_black_styles(self):
        """–°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–Ω–æ–π —Ç–µ–º—ã"""
        return f"""
            QDialog {{
                background-color: #000000;
                color: #ffffff;
            }}
            QTabWidget::pane {{
                border: 1px solid #333333;
                background-color: #000000;
                border-radius: 5px;
            }}
            QTabBar::tab {{
                background-color: #1a1a1a;
                color: #ffffff;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }}
            QTabBar::tab:selected {{
                background-color: #2a2a2a;
                border-bottom: 2px solid #666666;
            }}
            QGroupBox {{
                font-weight: bold;
                border: 1px solid #333333;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #0a0a0a;
                color: #ffffff;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #ffffff;
            }}
            QLabel {{
                color: #ffffff;
            }}
            QLabel a {{
                color: #888888;
                text-decoration: none;
            }}
            QLabel a:hover {{
                color: #aaaaaa;
                text-decoration: underline;
            }}
        """

    def _get_amoled_styles(self):
        """–°—Ç–∏–ª–∏ –¥–ª—è AMOLED —Ç–µ–º"""
        accent = self.theme_info['accent_color']
        return f"""
            QDialog {{
                background-color: #000000;
                color: #ffffff;
            }}
            QTabWidget::pane {{
                border: 1px solid #222222;
                background-color: #000000;
                border-radius: 5px;
            }}
            QTabBar::tab {{
                background-color: #000000;
                color: #ffffff;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
                border: 1px solid #222222;
            }}
            QTabBar::tab:selected {{
                background-color: #111111;
                border-bottom: 2px solid {accent};
            }}
            QGroupBox {{
                font-weight: bold;
                border: 1px solid #222222;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #000000;
                color: #ffffff;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #ffffff;
            }}
            QLabel {{
                color: #ffffff;
            }}
            QLabel a {{
                color: {accent};
                text-decoration: none;
            }}
            QLabel a:hover {{
                text-decoration: underline;
            }}
        """

    def _get_dark_theme_styles(self):
        """–°—Ç–∏–ª–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–º–Ω—ã—Ö —Ç–µ–º"""
        accent = self.theme_info['accent_color']
        return f"""
            QDialog {{
                background-color: #2b2b2b;
                color: #ffffff;
            }}
            QTabWidget::pane {{
                border: 1px solid #3c3c3c;
                background-color: #353535;
                border-radius: 5px;
            }}
            QTabBar::tab {{
                background-color: #2b2b2b;
                color: #ffffff;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }}
            QTabBar::tab:selected {{
                background-color: #353535;
                border-bottom: 2px solid {accent};
            }}
            QGroupBox {{
                font-weight: bold;
                border: 1px solid #3c3c3c;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: #2b2b2b;
                color: #ffffff;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #ffffff;
            }}
            QLabel {{
                color: #ffffff;
            }}
            QLabel a {{
                color: {accent};
                text-decoration: none;
            }}
            QLabel a:hover {{
                text-decoration: underline;
            }}
        """

    def _get_light_theme_styles(self):
        """–°—Ç–∏–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª—ã—Ö —Ç–µ–º"""
        accent = self.theme_info['accent_color']
        return f"""
            QDialog {{
                background-color: #f5f5f5;
                color: #333333;
            }}
            QTabWidget::pane {{
                border: 1px solid #d0d0d0;
                background-color: white;
                border-radius: 5px;
            }}
            QTabBar::tab {{
                background-color: #e8e8e8;
                color: #333333;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }}
            QTabBar::tab:selected {{
                background-color: white;
                border-bottom: 2px solid {accent};
            }}
            QGroupBox {{
                font-weight: bold;
                border: 1px solid #d0d0d0;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
                background-color: white;
                color: #333333;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #333333;
            }}
            QLabel {{
                color: #333333;
            }}
            QLabel a {{
                color: {accent};
                text-decoration: none;
            }}
            QLabel a:hover {{
                text-decoration: underline;
            }}
        """

    def _get_id_frame_style(self):
        """–°—Ç–∏–ª—å –¥–ª—è —Ñ—Ä–µ–π–º–∞ —Å ID"""
        if self.theme_info['is_pure_black']:
            return """
                QFrame {
                    background-color: #1a1a1a;
                    border: 1px solid #333333;
                    border-radius: 4px;
                    padding: 5px;
                }
            """
        elif self.theme_info['is_amoled']:
            return """
                QFrame {
                    background-color: #111111;
                    border: 1px solid #222222;
                    border-radius: 4px;
                    padding: 5px;
                }
            """
        elif self.theme_info['is_dark']:
            return """
                QFrame {
                    background-color: #3c3c3c;
                    border: 1px solid #4a4a4a;
                    border-radius: 4px;
                    padding: 5px;
                }
            """
        else:
            return """
                QFrame {
                    background-color: #e8f4fd;
                    border: 1px solid #bee5eb;
                    border-radius: 4px;
                    padding: 5px;
                }
            """

    def _get_button_style(self, button_type):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Ç–µ–º—ã"""
        if self.theme_info['is_pure_black']:
            if button_type == "copy":
                return """
                    QPushButton {
                        background-color: #2a2a2a;
                        color: white;
                        border: 1px solid #444444;
                        padding: 6px 16px;
                        border-radius: 4px;
                        font-weight: bold;
                        min-height: 30px;
                    }
                    QPushButton:hover {
                        background-color: #3a3a3a;
                        border: 1px solid #555555;
                    }
                """
            else:
                return """
                    QPushButton {
                        background-color: #1a1a1a;
                        color: white;
                        border: 1px solid #333333;
                        padding: 6px 16px;
                        border-radius: 4px;
                        font-weight: bold;
                        min-height: 30px;
                    }
                    QPushButton:hover {
                        background-color: #2a2a2a;
                        border: 1px solid #444444;
                    }
                """
        elif self.theme_info['is_dark']:
            color = self.theme_info['button_color']
            return f"""
                QPushButton {{
                    background-color: rgb({color});
                    color: white;
                    border: none;
                    padding: 6px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                    min-height: 30px;
                }}
                QPushButton:hover {{
                    background-color: rgba({color}, 0.8);
                }}
            """
        else:
            color = self.theme_info['button_color']
            return f"""
                QPushButton {{
                    background-color: rgb({color});
                    color: white;
                    border: none;
                    padding: 6px 16px;
                    border-radius: 4px;
                    font-weight: bold;
                    min-height: 30px;
                }}
                QPushButton:hover {{
                    background-color: rgba({color}, 0.8);
                }}
            """

    def _create_info_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(15, 15, 15, 15)
        
        info_html = f"""
        <style>
            p {{ margin: 8px 0; line-height: 1.6; }}
        </style>
        <p>üìñ <a href="{INFO_URL}">–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a></p>
        <p>üë®‚Äçüíª –ê–≤—Ç–æ—Ä GUI: <a href="https://t.me/bypassblock">@bypassblock</a></p>
        <p>üîß –ê–≤—Ç–æ—Ä Zapret: <a href="{BOLVAN_URL}">bol-van (GitHub)</a></p>
        <p>üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <a href="https://t.me/youtubenotwork">@youtubenotwork</a></p>
        <br>
        <p style="font-size: 11px;">
        Zapret GUI - —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.<br>
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–±—Ö–æ–¥–∞.
        </p>
        """
        
        info_label = QLabel(info_html)
        info_label.setTextFormat(Qt.TextFormat.RichText)
        info_label.setOpenExternalLinks(True)
        info_label.setWordWrap(True)
        
        layout.addWidget(info_label)
        layout.addStretch()
        
        return widget

    def _create_channels_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞–º–∏"""
        widget = QWidget()
        main_layout = QVBoxLayout(widget)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setFrameShape(QFrame.Shape.NoFrame)
        
        content = QWidget()
        layout = QVBoxLayout(content)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –ü–∞–ø–∫–∞ —Å —á–∞—Ç–∞–º–∏
        folder_group = self._create_link_group("üìÇ –ü–∞–ø–∫–∞ —Å —á–∞—Ç–∞–º–∏", [
            ("–í—Å–µ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –æ–¥–Ω–∏–º —Å–ø–∏—Å–∫–æ–º", "https://t.me/addlist/xjPs164MI7AxZWE6")
        ])
        layout.addWidget(folder_group)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        main_channels = self._create_link_group("üí¨ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", [
            ("üëÖ –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞", "https://t.me/bypassblock/399"),
            ("üß© –ì—Ä—É–ø–ø–∞ –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º", "https://t.me/youtubenotwork"),
            ("üòπ Android –∏ VPN —Å–µ—Ä–≤–∏—Å—ã", "https://t.me/zapretyoutubediscordvpn"),
            ("ü§ñ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥—ã APK", "https://t.me/androidawesome"),
            ("üîó –ü–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ (–≤—Å–µ –∫–∞–Ω–∞–ª—ã)", "https://t.me/runetvpnyoutubediscord")
        ])
        layout.addWidget(main_channels)
        
        # –û Zapret
        zapret_channels = self._create_link_group("üì¶ –û Zapret", [
            ("‚ò∫Ô∏è –°–∫–∞—á–∞—Ç—å Zapret (–≤—Å–µ –≤–µ—Ä—Å–∏–∏)", "https://t.me/zapretnetdiscordyoutube"),
            ("‚ÑπÔ∏è –°–∫–∞—á–∞—Ç—å Blockcheck", "https://t.me/zapretblockcheck"),
            ("üòí –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞", "https://t.me/approundmap"),
            ("‚ùì –ü–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏", "https://t.me/zaprethelp"),
            ("üò∑ –í–∏—Ä—É—Å—ã –≤ –ó–∞–ø—Ä–µ—Ç–µ?", "https://t.me/zapretvirus")
        ])
        layout.addWidget(zapret_channels)
        
        # –ë–æ—Ç—ã
        bots_group = self._create_link_group("ü§ñ –ë–æ—Ç—ã", [
            ("‚ò∫Ô∏è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±—Ö–æ–¥—É", "https://t.me/zapretbypass_bot"),
            ("üíµ –ü–ª–∞—Ç–Ω—ã–π VPN –æ—Ç –∫–æ–º–∞–Ω–¥—ã", "https://t.me/zapretvpns_bot")
        ])
        layout.addWidget(bots_group)
        
        layout.addStretch()
        
        scroll.setWidget(content)
        main_layout.addWidget(scroll)
        
        return widget

    def _create_link_group(self, title, links):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É —Å—Å—ã–ª–æ–∫"""
        group = QGroupBox(title)
        layout = QVBoxLayout()
        layout.setSpacing(5)
        
        hover_bg = "#f0f8ff" if not self.theme_info['is_dark'] else "#2a2a2a"
        if self.theme_info['is_pure_black']:
            hover_bg = "#1a1a1a"
        elif self.theme_info['is_amoled']:
            hover_bg = "#111111"
        
        for text, url in links:
            link_label = QLabel(f'<a href="{url}">{text}</a>')
            link_label.setTextFormat(Qt.TextFormat.RichText)
            link_label.setOpenExternalLinks(True)
            link_label.setStyleSheet(f"""
                QLabel {{
                    padding: 4px 8px;
                    background-color: transparent;
                    border-radius: 3px;
                }}
                QLabel:hover {{
                    background-color: {hover_bg};
                }}
            """)
            layout.addWidget(link_label)
        
        group.setLayout(layout)
        return group

    def _copy_cid(self, cid: str):
        """–ö–æ–ø–∏—Ä—É–µ—Ç CID –≤ clipboard –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        QGuiApplication.clipboard().setText(cid)
        msg = QMessageBox(self)
        msg.setWindowTitle("–£—Å–ø–µ—à–Ω–æ")
        msg.setText("ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        msg.setIcon(QMessageBox.Icon.Information)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ MessageBox –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        if self.theme_info['is_dark']:
            msg.setStyleSheet("""
                QMessageBox {
                    background-color: #2b2b2b;
                    color: white;
                }
                QPushButton {
                    min-width: 80px;
                    background-color: #3c3c3c;
                    color: white;
                    border: 1px solid #4a4a4a;
                    padding: 5px;
                    border-radius: 3px;
                }
                QPushButton:hover {
                    background-color: #4a4a4a;
                }
            """)
        
        msg.exec()