# dns_checker.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS –ø–æ–¥–º–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤ YouTube –∏ Discord —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã
"""

import socket
import subprocess
import re, os, sys
from typing import Dict, List, Tuple, Optional
from log import log


class DNSChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS –ø–æ–¥–º–µ–Ω—ã"""
    
    def __init__(self):
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ª–µ–≥–∏—Ç–∏–º–Ω—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.known_ranges = {
            'youtube': {
                'domains': ['www.youtube.com', 'youtube.com', 'googlevideo.com'],
                'valid_ranges': [
                    '142.250.',  # Google
                    '142.251.',  # Google
                    '172.217.',  # Google
                    '172.253.',  # Google
                    '173.194.',  # Google
                    '74.125.',   # Google
                    '209.85.',   # Google
                    '216.58.',   # Google
                    '108.177.',  # Google
                    '64.233.',   # Google
                    '192.178.',  # Google (–Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω!)
                    '192.179.',  # Google (–Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω!)
                ]
            },
            'discord': {
                'domains': ['discord.com', 'discordapp.com', 'discord.gg'],
                'valid_ranges': [
                    '162.159.',  # Cloudflare
                    '104.16.',   # Cloudflare
                    '104.17.',   # Cloudflare
                    '104.18.',   # Cloudflare
                    '104.19.',   # Cloudflare
                    '104.20.',   # Cloudflare
                    '104.21.',   # Cloudflare
                    '104.22.',   # Cloudflare
                    '104.23.',   # Cloudflare
                    '104.24.',   # Cloudflare
                    '104.25.',   # Cloudflare
                    '104.26.',   # Cloudflare
                    '104.27.',   # Cloudflare
                    '172.64.',   # Cloudflare
                    '172.65.',   # Cloudflare
                    '172.66.',   # Cloudflare
                    '172.67.',   # Cloudflare
                ]
            }
        }
        
        # DNS —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.dns_servers = {
            'System Default': None,  # –°–∏—Å—Ç–µ–º–Ω—ã–π DNS (–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
            'Google DNS': '8.8.8.8',
            'Google DNS 2': '8.8.4.4',
            'Cloudflare': '1.1.1.1',
            'Cloudflare 2': '1.0.0.1',
            'Quad9': '9.9.9.9',
            'OpenDNS': '208.67.222.222',
            'Yandex DNS': '77.88.8.8',
            'AdGuard DNS': '94.140.14.14',
        }
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self.known_block_ips = [
            '127.0.0.1',
            '0.0.0.0',
            '10.10.10.10',
            '195.82.146.214',  # –†–æ—Å—Ç–µ–ª–µ–∫–æ–º –∑–∞–≥–ª—É—à–∫–∞
            '81.19.72.32',     # –ú–¢–° –∑–∞–≥–ª—É—à–∫–∞
            '213.180.193.250', # –ë–∏–ª–∞–π–Ω –∑–∞–≥–ª—É—à–∫–∞
            '217.169.80.229',  # –ú–µ–≥–∞—Ñ–æ–Ω –∑–∞–≥–ª—É—à–∫–∞
            '62.33.207.196',   # –ó–∞–≥–ª—É—à–∫–∞ –†–ö–ù
            '62.33.207.197',   # –ó–∞–≥–ª—É—à–∫–∞ –†–ö–ù
            '62.33.207.198',   # –ó–∞–≥–ª—É—à–∫–∞ –†–ö–ù
        ]
    
    def check_dns_poisoning(self, log_callback=None) -> Dict:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS –ø–æ–¥–º–µ–Ω—ã
        
        Args:
            log_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {
            'youtube': {},
            'discord': {},
            'summary': {
                'youtube_blocked': False,
                'discord_blocked': False,
                'dns_poisoning_detected': False,
                'recommended_dns': None,
                'external_dns_blocked': False
            }
        }
        
        self._log("=" * 40, log_callback)
        self._log("üîç –ü–†–û–í–ï–†–ö–ê DNS –ü–û–î–ú–ï–ù–´", log_callback)
        self._log("=" * 40, log_callback)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö DNS
        self._log("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤:", log_callback)
        dns_availability = self._check_dns_servers_availability(log_callback)
        
        if not any(dns_availability.values()):
            self._log("‚ö†Ô∏è –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ DNS —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!", log_callback)
            self._log("–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ DNS", log_callback)
            results['summary']['external_dns_blocked'] = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube
        self._log("\nüìπ –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è YouTube:", log_callback)
        results['youtube'] = self._check_service('youtube', log_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Discord
        self._log("\nüí¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è Discord:", log_callback)
        results['discord'] = self._check_service('discord', log_callback)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._analyze_results(results, log_callback)
        
        return results

    def _nslookup(self, domain: str, dns_server: str) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç nslookup –¥–ª—è –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π DNS —Å–µ—Ä–≤–µ—Ä"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É nslookup
            command = ["nslookup", domain, dns_server]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                command,
                capture_output=True,
                timeout=10,
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform.startswith('win') else 0
            )
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Windows
            try:
                output = result.stdout.decode('cp866', errors='ignore')
            except:
                output = result.stdout.decode('utf-8', errors='ignore')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            log(f"nslookup {domain} @{dns_server} returned code {result.returncode}", "DEBUG")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            if "can't find" in output.lower() or "non-existent" in output.lower():
                return None
                
            if "timed out" in output.lower() or "timeout" in output.lower():
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–æ–¥—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            if result.returncode != 0 and not output:
                return None
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è multiline Addresses
            lines = output.split('\n')
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É "Addresses:" –∏–ª–∏ "–ê–¥—Ä–µ—Å–∞:"
            addresses_idx = -1
            for i, line in enumerate(lines):
                if any(addr in line for addr in ['Addresses:', '–ê–¥—Ä–µ—Å–∞:']):
                    addresses_idx = i
                    break
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ "Addresses:", –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
            if addresses_idx >= 0:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ IP –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
                addr_line = lines[addresses_idx]
                ip_match = re.search(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', addr_line)
                if ip_match:
                    ip = ip_match.group(1)
                    if self._is_valid_ip(ip) and ip != dns_server:
                        log(f"Found IP in Addresses line: {ip}", "DEBUG")
                        return ip
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ (–æ–±—ã—á–Ω–æ IP –∞–¥—Ä–µ—Å–∞ –∏–¥—É—Ç —Å –æ—Ç—Å—Ç—É–ø–æ–º)
                for j in range(addresses_idx + 1, min(addresses_idx + 30, len(lines))):
                    line = lines[j].strip()
                    
                    # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                    if line and not line[0].isspace() and ':' in line:
                        break
                    
                    # –ò—â–µ–º IPv4 –∞–¥—Ä–µ—Å
                    ip_match = re.search(r'^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$', line)
                    if ip_match:
                        ip = ip_match.group(1)
                        if self._is_valid_ip(ip) and ip != dns_server:
                            log(f"Found IP in multiline: {ip}", "DEBUG")
                            return ip
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –∏—â–µ–º —Å–µ–∫—Ü–∏—é "Non-authoritative answer"
            in_answer_section = False
            
            for i, line in enumerate(lines):
                line_stripped = line.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                if any(marker in line.lower() for marker in [
                    'non-authoritative answer', 
                    '–Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—â–∏–π –¥–æ–≤–µ—Ä–∏—è',
                    '–Ω–µ–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç'
                ]):
                    in_answer_section = True
                    continue
                
                # –ï—Å–ª–∏ –º—ã –≤ —Å–µ–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                if in_answer_section:
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ "Address:" (–æ–¥–∏–Ω–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å)
                    if 'Address:' in line or '–ê–¥—Ä–µ—Å:' in line:
                        ip_match = re.search(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', line)
                        if ip_match:
                            ip = ip_match.group(1)
                            if self._is_valid_ip(ip) and ip != dns_server:
                                log(f"Found IP in Address line: {ip}", "DEBUG")
                                return ip
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ —Å IP (–¥–ª—è multiline –≤—ã–≤–æ–¥–∞)
                    ip_match = re.search(r'^\s*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*$', line)
                    if ip_match:
                        ip = ip_match.group(1)
                        if self._is_valid_ip(ip) and ip != dns_server:
                            log(f"Found standalone IP: {ip}", "DEBUG")
                            return ip
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –≤—Å–µ IP –∞–¥—Ä–µ—Å–∞
            all_ips = re.findall(r'\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b', output)
            
            # –û—Ç–ª–∞–¥–∫–∞
            if all_ips:
                log(f"All IPs found: {all_ips}", "DEBUG")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
            for ip in all_ips:
                if (self._is_valid_ip(ip) and 
                    ip != dns_server and 
                    not ip.startswith('127.') and
                    not ip.startswith('192.168.') and
                    not ip.startswith('10.')):
                    log(f"Returning IP from all IPs: {ip}", "DEBUG")
                    return ip
            
            log(f"No valid IP found for {domain} via {dns_server}", "DEBUG")
            return None
            
        except subprocess.TimeoutExpired:
            log(f"nslookup timeout for {domain} via {dns_server}", "DEBUG")
            return None
        except Exception as e:
            log(f"nslookup error: {e}", "DEBUG")
            return None

    def _ping_dns_server(self, dns_server: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DNS —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ ping"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞
            command = ["ping", "-n", "1", "-w", "1000", dns_server]
            result = subprocess.run(
                command,
                capture_output=True,
                timeout=2,
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform.startswith('win') else 0  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
            )
            
            output = result.stdout.decode('cp866', errors='ignore')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å ping
            return any(pattern in output for pattern in ["TTL=", "ttl=", "bytes=", "–±–∞–π—Ç="])
            
        except Exception:
            return False

    def _check_dns_servers_availability(self, log_callback=None) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DNS —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ DNS –∑–∞–ø—Ä–æ—Å—ã"""
        availability = {}
        
        self._log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤...", log_callback)
        
        for dns_name, dns_server in self.dns_servers.items():
            if dns_server is None:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π DNS
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ DNS —Å–µ—Ä–≤–µ—Ä —Ä–µ–∑–æ–ª–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã
            test_successful = False
            
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
            test_domains = ["google.com", "cloudflare.com", "example.com"]
            
            for test_domain in test_domains:
                result = self._resolve_domain(test_domain, dns_server)
                if result['ip'] is not None:
                    test_successful = True
                    break
            
            availability[dns_name] = test_successful
            
            if test_successful:
                self._log(f"  {dns_name} ({dns_server}): ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω", log_callback)
            else:
                self._log(f"  {dns_name} ({dns_server}): ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", log_callback)
        
        return availability


    def _resolve_via_socket(self, domain: str, dns_server: str) -> Optional[str]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ DNS –±–∏–±–ª–∏–æ—Ç–µ–∫—É"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∑–æ–ª–≤–µ—Ä Python
            # –≠—Ç–æ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º DNS, –Ω–æ —Ö–æ—Ç—è –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            import socket
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º DNS (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞)
            # –≠—Ç–æ –±–æ–ª—å—à–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –¥–æ–º–µ–Ω –≤–æ–æ–±—â–µ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è
            try:
                result = socket.gethostbyname(domain)
                if self._is_valid_ip(result):
                    log(f"Socket resolved {domain} to {result}", "DEBUG")
                    return result
            except:
                pass
                
            return None
            
        except Exception as e:
            log(f"Socket resolve error: {e}", "DEBUG")
            return None
            
    def _check_service(self, service: str, log_callback=None) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç DNS –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        service_results = {
            'domains': {},
            'dns_servers': {},
            'blocked': False,
            'poisoned': False
        }
        
        service_info = self.known_ranges[service]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω
        for domain in service_info['domains']:
            self._log(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞: {domain}", log_callback)
            domain_results = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã
            for dns_name, dns_server in self.dns_servers.items():
                result = self._resolve_domain(domain, dns_server)
                domain_results[dns_name] = result
                
                if result['ip']:
                    status = self._check_ip_validity(result['ip'], service)
                    
                    if status == 'valid':
                        icon = "‚úÖ"
                        status_text = "–í–∞–ª–∏–¥–Ω—ã–π IP"
                    elif status == 'blocked':
                        icon = "üö´"
                        status_text = "–ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞!"
                        service_results['blocked'] = True
                        service_results['poisoned'] = True
                    else:
                        icon = "‚ö†Ô∏è"
                        status_text = "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π IP"
                        service_results['poisoned'] = True
                    
                    self._log(f"  {dns_name}: {result['ip']} - {icon} {status_text}", log_callback)
                else:
                    if result.get('error'):
                        if 'timeout' in str(result['error']).lower():
                            self._log(f"  {dns_name}: ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç", log_callback)
                        else:
                            self._log(f"  {dns_name}: ‚ùå –ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è", log_callback)
                    else:
                        self._log(f"  {dns_name}: ‚ùå –ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è", log_callback)
            
            service_results['domains'][domain] = domain_results
        
        return service_results
    
    def _resolve_domain(self, domain: str, dns_server: Optional[str] = None) -> Dict:
        """–†–µ–∑–æ–ª–≤–∏—Ç –¥–æ–º–µ–Ω —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π DNS —Å–µ—Ä–≤–µ—Ä"""
        result = {
            'ip': None,
            'error': None,
            'dns_server': dns_server
        }
        
        try:
            if dns_server:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º nslookup –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ DNS —Å–µ—Ä–≤–µ—Ä–∞
                result['ip'] = self._nslookup(domain, dns_server)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π DNS
                result['ip'] = socket.gethostbyname(domain)
                
        except socket.gaierror as e:
            result['error'] = f"DNS resolution failed: {e}"
        except Exception as e:
            result['error'] = str(e)
        
        return result
    
    def _is_valid_ip(self, ip: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º IP –∞–¥—Ä–µ—Å–æ–º"""
        try:
            parts = ip.split('.')
            if len(parts) != 4:
                return False
            for part in parts:
                if not 0 <= int(part) <= 255:
                    return False
            return True
        except:
            return False
    
    def _check_ip_validity(self, ip: str, service: str) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            'valid' - –ª–µ–≥–∏—Ç–∏–º–Ω—ã–π IP
            'blocked' - –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            'suspicious' - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π IP
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏
        if ip in self.known_block_ips:
            return 'blocked'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if ip.startswith('127.') or ip.startswith('10.') or ip.startswith('192.168.'):
            return 'blocked'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–µ–≥–∏—Ç–∏–º–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        valid_ranges = self.known_ranges[service]['valid_ranges']
        for range_prefix in valid_ranges:
            if ip.startswith(range_prefix):
                return 'valid'
        
        # IP –Ω–µ –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
        return 'suspicious'
    
    def _analyze_results(self, results: Dict, log_callback=None):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        self._log("\n" + "=" * 40, log_callback)
        self._log("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í", log_callback)
        self._log("=" * 40, log_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube
        if results['youtube']['poisoned']:
            results['summary']['youtube_blocked'] = True
            results['summary']['dns_poisoning_detected'] = True
            self._log("‚ùå YouTube: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ DNS –ø–æ–¥–º–µ–Ω–∞!", log_callback)
        else:
            self._log("‚úÖ YouTube: DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π", log_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Discord
        if results['discord']['poisoned']:
            results['summary']['discord_blocked'] = True
            results['summary']['dns_poisoning_detected'] = True
            self._log("‚ùå Discord: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ DNS –ø–æ–¥–º–µ–Ω–∞!", log_callback)
        else:
            self._log("‚úÖ Discord: DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π", log_callback)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é —Å DNS —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        self._log("", log_callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ä–∞–±–æ—á–∏–µ –≤–Ω–µ—à–Ω–∏–µ DNS
        working_dns_count = 0
        for service_data in [results['youtube'], results['discord']]:
            for domain_data in service_data['domains'].values():
                for dns_name, dns_result in domain_data.items():
                    if dns_name != 'System Default' and dns_result.get('ip'):
                        working_dns_count += 1
                        break
        
        if working_dns_count == 0 and not results['summary']['dns_poisoning_detected']:
            self._log("‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø:", log_callback)
            self._log("–í–Ω–µ—à–Ω–∏–µ DNS —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã.", log_callback)
            self._log("", log_callback)
            self._log("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:", log_callback)
            self._log("  ‚Ä¢ Firewall –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–µ DNS –∑–∞–ø—Ä–æ—Å—ã (UDP –ø–æ—Ä—Ç 53)", log_callback)
            self._log("  ‚Ä¢ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ DNS –∑–∞–ø—Ä–æ—Å—ã", log_callback)
            self._log("  ‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–µ—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏", log_callback)
            self._log("  ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ DNS –∑–∞–ø—Ä–æ—Å—ã", log_callback)
            self._log("", log_callback)
            self._log("–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:", log_callback)
            self._log("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ firewall/–∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞", log_callback)
            self._log("  2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ DNS-over-HTTPS –≤ –±—Ä–∞—É–∑–µ—Ä–µ", log_callback)
            self._log("  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º DNS", log_callback)
            self._log("", log_callback)
            
        # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        if results['summary']['dns_poisoning_detected']:
            self._log("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–ï–ô–°–¢–í–ò–ï:", log_callback)
            self._log("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ DNS –ø–æ–¥–º–µ–Ω–∞! –°–º–µ–Ω–∏—Ç–µ DNS –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Zapret.", log_callback)
        elif working_dns_count == 0:
            self._log("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:", log_callback)
            self._log("DNS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –≤–Ω–µ—à–Ω–∏–µ DNS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", log_callback)
            self._log("–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Zapret –¥–ª—è –æ–±—Ö–æ–¥–∞ DPI.", log_callback)
        else:
            self._log("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:", log_callback)
            self._log("DNS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ï—Å–ª–∏ —Å–∞–π—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Zapret.", log_callback)
    
    def _find_working_dns(self, results: Dict) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç DNS —Å–µ—Ä–≤–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ DNS —Å–µ—Ä–≤–µ—Ä–∞–º
        dns_scores = {}
        
        for service in ['youtube', 'discord']:
            for domain, domain_results in results[service]['domains'].items():
                for dns_name, dns_result in domain_results.items():
                    if dns_name not in dns_scores:
                        dns_scores[dns_name] = 0
                    
                    if dns_result['ip']:
                        status = self._check_ip_validity(dns_result['ip'], service)
                        if status == 'valid':
                            dns_scores[dns_name] += 1
                        elif status == 'blocked':
                            dns_scores[dns_name] -= 2
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π DNS
        best_dns = None
        best_score = -1
        
        for dns_name, score in dns_scores.items():
            if score > best_score and dns_name != 'System Default':
                best_score = score
                best_dns = dns_name
        
        return best_dns if best_score > 0 else None
    
    def _log(self, message: str, callback=None):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        if callback:
            callback(message)
        else:
            print(message)
    
    def get_quick_dns_check(self, domain: str) -> Dict:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"""
        result = {
            'domain': domain,
            'system_dns': None,
            'google_dns': None,
            'cloudflare_dns': None,
            'is_blocked': False
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π DNS
        system_result = self._resolve_domain(domain, None)
        result['system_dns'] = system_result['ip']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Google DNS
        google_result = self._resolve_domain(domain, '8.8.8.8')
        result['google_dns'] = google_result['ip']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Cloudflare
        cf_result = self._resolve_domain(domain, '1.1.1.1')
        result['cloudflare_dns'] = cf_result['ip']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–∏—Å
        service = None
        if 'youtube' in domain or 'google' in domain:
            service = 'youtube'
        elif 'discord' in domain:
            service = 'discord'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if service and result['system_dns']:
            status = self._check_ip_validity(result['system_dns'], service)
            result['is_blocked'] = (status == 'blocked')
        
        return result