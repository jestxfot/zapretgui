# strategy_menu/strategy_table_widget.py

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, 
                            QTableWidgetItem, QPushButton, QProgressBar, QLabel,
                            QMenu, QMessageBox, QApplication, QAbstractItemView, QHeaderView)
from PyQt6.QtCore import Qt, pyqtSignal, QPoint, QThread, QObject, QTimer
from PyQt6.QtGui import QAction, QFont, QColor, QBrush

from log import log
from .table_builder import StrategyTableBuilder
from .dialogs import StrategyInfoDialog
from .workers import StrategyFilesDownloader


class SingleDownloadWorker(QObject):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    finished = pyqtSignal(bool, str)
    
    def __init__(self, strategy_manager, strategy_id):
        super().__init__()
        self.strategy_manager = strategy_manager
        self.strategy_id = strategy_id
    
    def run(self):
        try:
            local_path = self.strategy_manager.download_single_strategy_bat(self.strategy_id)
            if local_path:
                self.finished.emit(True, f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {self.strategy_id} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞")
            else:
                self.finished.emit(False, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {self.strategy_id}")
        except Exception as e:
            self.finished.emit(False, f"–û—à–∏–±–∫–∞: {str(e)}")


class StrategyTableWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    strategy_selected = pyqtSignal(str, str)  # strategy_id, strategy_name
    strategy_double_clicked = pyqtSignal(str, str)  # strategy_id, strategy_name
    status_message = pyqtSignal(str, str)  # message, style
    
    def __init__(self, strategy_manager=None, parent=None):
        super().__init__(parent)
        self.strategy_manager = strategy_manager
        self.strategies_map = {}
        self.selected_strategy_id = None
        self.selected_strategy_name = None
        self.info_dialog = None
        self.is_downloading = False
        self.download_thread = None
        self.download_worker = None
        
        self._init_ui()
    
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(5)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = QLabel("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("font-weight: bold; color: #2196F3; font-size: 9pt; padding: 3px;")
        self.status_label.setFixedHeight(25)
        layout.addWidget(self.status_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setFixedHeight(20)
        self.progress_bar.setRange(0, 0)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #444;
                border-radius: 3px;
                text-align: center;
                background-color: #2a2a2a;
            }
            QProgressBar::chunk {
                background-color: #2196F3;
                border-radius: 2px;
            }
        """)
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.table = StrategyTableBuilder.create_strategies_table()
        self.table.currentItemChanged.connect(self._on_item_selected)
        self.table.itemDoubleClicked.connect(self._on_item_double_clicked)
        self.table.setEnabled(False)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self._show_context_menu)
        
        layout.addWidget(self.table)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._init_control_buttons(layout)
    
    def _init_control_buttons(self, parent_layout):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(5)
        
        button_style = """
            QPushButton {
                background-color: #3a3a3a;
                color: #ffffff;
                border: 1px solid #555;
                border-radius: 3px;
                padding: 3px 10px;
                font-size: 9pt;
            }
            QPushButton:hover {
                background-color: #454545;
                border: 1px solid #2196F3;
            }
            QPushButton:pressed {
                background-color: #2a2a2a;
            }
            QPushButton:disabled {
                background-color: #2a2a2a;
                color: #666;
                border: 1px solid #333;
            }
        """
        
        self.refresh_button = QPushButton("üåê –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_button.setFixedHeight(25)
        self.refresh_button.setStyleSheet(button_style)
        buttons_layout.addWidget(self.refresh_button)
        
        self.download_all_button = QPushButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤—Å–µ")
        self.download_all_button.setFixedHeight(25)
        self.download_all_button.setStyleSheet(button_style)
        buttons_layout.addWidget(self.download_all_button)
        
        self.info_button = QPushButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ")
        self.info_button.setEnabled(False)
        self.info_button.setFixedHeight(25)
        self.info_button.setStyleSheet(button_style)
        self.info_button.clicked.connect(self.show_strategy_info)
        buttons_layout.addWidget(self.info_button)
        
        buttons_layout.addStretch()
        parent_layout.addLayout(buttons_layout)
    
    def populate_strategies(self, strategies):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        self.set_progress_visible(True)
        self.set_status("üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...", "info")
        
        self.strategies_map = StrategyTableBuilder.populate_table(
            self.table, 
            strategies, 
            self.strategy_manager
        )
        self.table.setEnabled(True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        count = len(strategies)
        self.set_status(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "success")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        self.set_progress_visible(False)
    
    def set_status(self, message, status_type="info"):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        styles = {
            "info": "font-weight: bold; color: #2196F3; font-size: 9pt; padding: 3px;",
            "success": "font-weight: bold; color: #4CAF50; font-size: 9pt; padding: 3px;",
            "warning": "font-weight: bold; color: #ff9800; font-size: 9pt; padding: 3px;",
            "error": "font-weight: bold; color: #f44336; font-size: 9pt; padding: 3px;"
        }
        
        self.status_label.setText(message)
        self.status_label.setStyleSheet(styles.get(status_type, styles["info"]))
        
        # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        self.status_message.emit(message, status_type)
    
    def set_progress_visible(self, visible):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä"""
        if self.progress_bar:
            self.progress_bar.setVisible(visible)
            if visible:
                self.progress_bar.setRange(0, 0)  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å

            log(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä: {'–ø–æ–∫–∞–∑–∞–Ω' if visible else '—Å–∫—Ä—ã—Ç'}", "DEBUG")
    
    def set_progress_value(self, value, max_value=100):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.setRange(0, max_value)
        self.progress_bar.setValue(value)
    
    def _on_item_selected(self, current, previous):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if current is None:
            self.selected_strategy_id = None
            self.selected_strategy_name = None
            self.info_button.setEnabled(False)
            return
        
        row = current.row()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if row < 0 or row not in self.strategies_map:
            self.selected_strategy_id = None
            self.selected_strategy_name = None
            self.info_button.setEnabled(False)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        self.selected_strategy_id = self.strategies_map[row]['id']
        self.selected_strategy_name = self.strategies_map[row]['name']
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ
        self.info_button.setEnabled(True)
        
        # –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        self.strategy_selected.emit(self.selected_strategy_id, self.selected_strategy_name)
    
    def _on_item_double_clicked(self, item):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        if not item:
            return
        
        row = item.row()
        
        if row < 0 or row not in self.strategies_map:
            return
        
        strategy_id = self.strategies_map[row]['id']
        strategy_name = self.strategies_map[row]['name']
        
        self.strategy_double_clicked.emit(strategy_id, strategy_name)
    
    def _show_context_menu(self, position: QPoint):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        if not self.table.isEnabled():
            return
        
        item = self.table.itemAt(position)
        if not item:
            return
        
        row = item.row()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if row < 0 or row not in self.strategies_map:
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –≤—ã–±–∏—Ä–∞–µ–º —Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏
        if not self.selected_strategy_id:
            self.table.selectRow(row)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        context_menu = QMenu(self)
        context_menu.setStyleSheet(self._get_context_menu_style())
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_action = QAction("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", self)
        info_action.triggered.connect(self.show_strategy_info)
        info_action.setEnabled(self.selected_strategy_id is not None)
        context_menu.addAction(info_action)
        
        context_menu.addSeparator()
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è
        copy_name_action = QAction("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", self)
        copy_name_action.triggered.connect(self._copy_strategy_name)
        context_menu.addAction(copy_name_action)
        
        # –°–∫–∞—á–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å
        if row in self.strategies_map and self.strategy_manager:
            strategy_id = self.strategies_map[row]['id']
            strategies = self.strategy_manager.get_local_strategies_only()
            
            if strategy_id in strategies:
                version_status = self.strategy_manager.check_strategy_version_status(strategy_id)
                
                if version_status in ['not_downloaded', 'outdated']:
                    download_action = QAction("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å", self)
                    download_action.triggered.connect(lambda: self._download_single_strategy(strategy_id))
                    context_menu.addAction(download_action)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        global_pos = self.table.mapToGlobal(position)
        context_menu.exec(global_pos)
    
    def _get_context_menu_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        is_dark_theme = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–º–Ω–∞—è
        
        if is_dark_theme:
            return """
            QMenu {
                background-color: #2a2a2a;
                color: #ffffff;
                border: 1px solid #444444;
                padding: 2px;  /* –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5px –¥–æ 2px */
            }
            QMenu::item {
                padding: 3px 12px;  /* –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5px 20px –¥–æ 3px 12px */
                border-radius: 2px;  /* –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3px */
                font-size: 9pt;  /* –î–æ–±–∞–≤–ª–µ–Ω –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */
            }
            QMenu::item:selected {
                background-color: #3a3a3a;
            }
            QMenu::separator {
                height: 1px;
                background: #444444;
                margin: 2px 0;  /* –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5px –¥–æ 2px */
            }
            """
        else:
            return """
            QMenu {
                background-color: #ffffff;
                color: #000000;
                border: 1px solid #cccccc;
                padding: 2px;  /* –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5px –¥–æ 2px */
            }
            QMenu::item {
                padding: 3px 12px;  /* –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5px 20px –¥–æ 3px 12px */
                border-radius: 2px;  /* –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3px */
                font-size: 9pt;  /* –î–æ–±–∞–≤–ª–µ–Ω –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */
            }
            QMenu::item:selected {
                background-color: #e0e0e0;
            }
            QMenu::separator {
                height: 1px;
                background: #cccccc;
                margin: 2px 0;  /* –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5px –¥–æ 2px */
            }
            """
    
    def show_strategy_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not self.selected_strategy_id:
            return
        
        if not self.info_dialog:
            self.info_dialog = StrategyInfoDialog(self, self.strategy_manager)
        
        self.info_dialog.display_strategy_info(self.selected_strategy_id, self.selected_strategy_name)
        self.info_dialog.show()
        self.info_dialog.raise_()
        self.info_dialog.activateWindow()
    
    def _copy_strategy_name(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if self.selected_strategy_name:
            clipboard = QApplication.clipboard()
            clipboard.setText(self.selected_strategy_name)
            
            self.set_status(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {self.selected_strategy_name}", "success")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            QTimer.singleShot(2000, lambda: self.set_status("‚úÖ –ì–æ—Ç–æ–≤–æ", "success"))
    
    def _download_single_strategy(self, strategy_id):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        if self.is_downloading:
            QMessageBox.information(self, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", 
                                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return
        
        if not self.strategy_manager:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        self.is_downloading = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.set_status(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}...", "info")
        self.set_progress_visible(True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.single_download_thread = QThread()
        self.single_download_worker = SingleDownloadWorker(self.strategy_manager, strategy_id)
        self.single_download_worker.moveToThread(self.single_download_thread)
        
        self.single_download_thread.started.connect(self.single_download_worker.run)
        self.single_download_worker.finished.connect(self._on_single_download_finished)
        self.single_download_worker.finished.connect(self.single_download_thread.quit)
        self.single_download_worker.finished.connect(self.single_download_worker.deleteLater)
        self.single_download_thread.finished.connect(self.single_download_thread.deleteLater)
        
        self.single_download_thread.start()
        
        log(f"–ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}", "INFO")
    
    def _on_single_download_finished(self, success, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        self.is_downloading = False
        self.set_progress_visible(False)
        
        if success:
            self.set_status(f"‚úÖ {message}", "success")
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            if hasattr(self.parent(), 'load_local_strategies_only'):
                self.parent().load_local_strategies_only()
        else:
            self.set_status(f"‚ùå {message}", "error")
        
        log(message, "INFO" if success else "‚ùå ERROR")
    
    def download_all_strategies_async(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        if self.is_downloading:
            QMessageBox.information(self, "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", 
                                "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            return
        
        if not self.strategy_manager:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        strategies = self.strategy_manager.get_local_strategies_only()
        if not strategies:
            QMessageBox.information(self, "–ù–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", 
                                "–°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
            return
        
        self.is_downloading = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.set_status("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...", "info")
        self.set_progress_visible(True)
        self.refresh_button.setEnabled(False)
        self.download_all_button.setEnabled(False)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.download_thread = QThread()
        self.download_worker = StrategyFilesDownloader(self.strategy_manager)
        self.download_worker.moveToThread(self.download_thread)
        
        self.download_thread.started.connect(self.download_worker.run)
        self.download_worker.progress.connect(self._update_download_progress)
        self.download_worker.finished.connect(self._on_download_finished)
        self.download_worker.finished.connect(self.download_thread.quit)
        self.download_worker.finished.connect(self.download_worker.deleteLater)
        self.download_thread.finished.connect(self.download_thread.deleteLater)
        
        self.download_thread.start()
        
        log("–ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "INFO")
    
    def _update_download_progress(self, progress_percent, current_strategy):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        self.set_progress_value(progress_percent)
        self.set_status(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {current_strategy} ({progress_percent}%)", "info")
    
    def _on_download_finished(self, downloaded_count, total_count, error_message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        self.is_downloading = False
        self.set_progress_visible(False)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.refresh_button.setEnabled(True)
        self.download_all_button.setEnabled(True)
        
        if error_message:
            self.set_status(f"‚ùå {error_message}", "error")
        elif total_count == 0:
            self.set_status("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", "warning")
        else:
            self.set_status(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {downloaded_count}/{total_count} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "success")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            if hasattr(self.parent(), 'load_local_strategies_only'):
                self.parent().load_local_strategies_only()
        
        log(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {downloaded_count}/{total_count}", "INFO")
    
    def select_strategy_by_name(self, strategy_name):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –∏–º–µ–Ω–∏"""
        for row, info in self.strategies_map.items():
            if info['name'] == strategy_name:
                self.table.selectRow(row)
                break
    
    def get_selected_strategy(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∏ –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.selected_strategy_id, self.selected_strategy_name
    
    def set_theme_manager(self, theme_manager):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.theme_manager = theme_manager