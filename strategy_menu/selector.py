# strategy_menu/selector.py

from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, 
                            QWidget, QTabWidget, QTabBar, QLabel, QMessageBox, QGroupBox,
                            QTextBrowser, QSizePolicy, QFrame, QScrollArea, 
                            QRadioButton, QButtonGroup, QCheckBox, QProgressBar,
                            QTextEdit)
from PyQt6.QtCore import Qt, pyqtSignal, QThread, QTimer, QSize, QPropertyAnimation, QEasingCurve
from PyQt6.QtGui import QFont, QTextCursor, QPainter, QTextOption, QTextOption, QPen, QCursor, QColor

from log import log
from strategy_menu import get_strategy_launch_method

from .constants import MINIMUM_WIDTH, MINIMIM_HEIGHT
from .widgets import CompactStrategyItem
from .strategy_table_widget_favorites import StrategyTableWithFavoritesFilter as StrategyTableWidget
from .workers import InternetStrategyLoader
from .command_line_dialog import show_command_line_dialog

class HorizontalTextTabBar(QTabBar):
    """TabBar —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞–±–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.setDrawBase(False)
    
    def tabSizeHint(self, index):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ç–∞–±–∞"""
        size = super().tabSizeHint(index)
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        return QSize(size.height(), 35)  # –£–±—Ä–∞–ª–∏ +20
    
    def paintEvent(self, event):
        """–†–∏—Å—É–µ–º —Ç–∞–±—ã —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        painter = QPainter(self)
        
        for index in range(self.count()):
            rect = self.tabRect(index)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Ç–∞–±–∞
            is_selected = index == self.currentIndex()
            is_hovered = rect.contains(self.mapFromGlobal(QCursor.pos()))
            
            # –§–æ–Ω —Ç–∞–±–∞
            if is_selected:
                painter.fillRect(rect, QColor("#3a3a3a"))
                # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞–±–∞
                painter.setPen(QPen(QColor("#2196F3"), 2))
                painter.drawLine(rect.right() - 1, rect.top(), rect.right() - 1, rect.bottom())
            elif is_hovered:
                painter.fillRect(rect, QColor("#333"))
                # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                painter.setPen(QPen(QColor("#2196F3"), 2))
                painter.drawLine(rect.right() - 1, rect.top(), rect.right() - 1, rect.bottom())
            else:
                painter.fillRect(rect, QColor("#2a2a2a"))
            
            # –†–∞–º–∫–∞ —Ç–∞–±–∞
            painter.setPen(QPen(QColor("#444"), 1))
            painter.drawRect(rect.adjusted(0, 0, -1, -1))
            
            # –¢–µ–∫—Å—Ç
            text = self.tabText(index)
            text_color = QColor("#2196F3") if is_selected else (QColor("#fff") if is_hovered else QColor("#aaa"))
            painter.setPen(text_color)
            
            font = painter.font()
            if is_selected:
                font.setBold(True)
            font.setPointSize(8)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 9
            painter.setFont(font)
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ —Å –º–µ–Ω—å—à–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
            text_rect = rect.adjusted(5, 3, -3, -3)  # –£–º–µ–Ω—å—à–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã
            painter.drawText(text_rect, Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignVCenter, text)
        
        painter.end()


class AnimatedTabWidget(QTabWidget):
    """TabWidget —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.custom_tab_bar = HorizontalTextTabBar()
        self.setTabBar(self.custom_tab_bar)
        self.collapsed_width = 45  # –ë—ã–ª–æ 60
        self.expanded_width = 160  # –ë—ã–ª–æ 220
        self.is_expanded = False
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è tabBar
        from PyQt6.QtCore import QPropertyAnimation, QEasingCurve
        self.tab_animation = QPropertyAnimation(self.custom_tab_bar, b"minimumWidth")
        self.tab_animation.setDuration(200)
        self.tab_animation.setEasingCurve(QEasingCurve.Type.InOutQuad)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
        self.custom_tab_bar.setMinimumWidth(self.collapsed_width)
        self.custom_tab_bar.setMaximumWidth(self.collapsed_width)

class StrategySelector(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    
    strategySelected = pyqtSignal(str, str)  # (strategy_id, strategy_name)
    
    def __init__(self, parent=None, strategy_manager=None, current_strategy_name=None):
        super().__init__(parent)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è tooltip
        self.setStyleSheet("""
            QToolTip {
                background-color: #2a2a2a;
                color: white;
                border: 1px solid #2196F3;
                padding: 8px;
                font-size: 10pt;
                border-radius: 4px;
            }
        """)
        
        self.strategy_manager = strategy_manager
        self.current_strategy_name = current_strategy_name
        self.selected_strategy_id = None
        self.selected_strategy_name = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self._combined_args = None
        self._combined_strategy_data = None
        self.category_selections = {}
        
        # –ù–û–í–û–ï: –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Direct —Ä–µ–∂–∏–º–∞
        self._category_widgets_cache = {}  # –ö—ç—à —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        self._loading_in_progress = False
        self._categories_loaded = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        self.is_loading_strategies = False
        self.loader_thread = None
        self.loader_worker = None
        
        self.launch_method = get_strategy_launch_method()
        self.is_direct_mode = (self.launch_method == "direct")
        
        self.setWindowTitle("–°–æ–±–µ—Ä–∏ —Å–≤–æ–π –ø—Ä–µ—Å–µ—Ç —Å–∞–º (–∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)")
        self.resize(MINIMUM_WIDTH, MINIMIM_HEIGHT)
        self.setMinimumSize(400, 350)
        self.setModal(False)
        
        self.init_ui()
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–ª—è Direct —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ UI
        if self.is_direct_mode:
            QTimer.singleShot(10, self._async_load_builtin_strategies)
        else:
            self.load_local_strategies()

    def _init_direct_mode_ui(self, layout):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        from strategy_menu import get_direct_strategy_selections
        from .strategy_lists_separated import get_default_selections
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—ã–±–æ—Ä—ã
        try:
            self.category_selections = get_direct_strategy_selections()
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±–æ—Ä–æ–≤: {e}", "‚ö† WARNING")
            self.category_selections = get_default_selections()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç")
        title.setStyleSheet("font-weight: bold; font-size: 10pt; color: #2196F3; margin: 5px;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_progress = QProgressBar()
        self.loading_progress.setFixedHeight(3)
        self.loading_progress.setTextVisible(False)
        self.loading_progress.setStyleSheet("""
            QProgressBar {
                border: none;
                background: #2a2a2a;
            }
            QProgressBar::chunk {
                background: #2196F3;
            }
        """)
        self.loading_progress.setVisible(False)
        layout.addWidget(self.loading_progress)
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π TabWidget
        self.category_tabs = AnimatedTabWidget()
        self.category_tabs.setTabPosition(QTabWidget.TabPosition.West)
        self.category_tabs.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        
        # –°—Ç–∏–ª—å –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–æ–≤
        self.category_tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #444;
                background: #2a2a2a;
                border-radius: 5px;
                margin-left: -1px;  /* –ü—Ä–∏–∂–∏–º–∞–µ–º –∫ —Ç–∞–±–∞–º */
                margin-right: 0px;  /* –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤—ã–π –æ—Ç—Å—Ç—É–ø */
            }
        """)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.category_tabs.tabBar().installEventFilter(self)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        self.category_tabs.currentChanged.connect(self._save_last_tab_index)
        self._pending_categories = []
        self._categories_loaded = set()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.tab_tooltips = self._get_tab_tooltips()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–æ–≤
        self.tab_names = {
            'youtube': ("üé¨", "üé¨ YouTube TCP"),
            'youtube_udp': ("üì∫", "üì∫ YouTube QUIC"),  # –ò–∑–º–µ–Ω–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞
            'googlevideo_tcp': ("üìπ", "üìπ GoogleVideo"),
            'discord': ("üí¨", "üí¨ Discord"),
            'discord_voice': ("üîä", "üîä Discord Voice"),
            'other': ("üåê", "üåê Hostlist"),
            'ipset': ("üî¢", "üî¢ IPset TCP"),
            'ipset_udp': ("üéÆ", "üéÆ Games UDP"),
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        tab_data = [
            ('youtube',),
            ('youtube_udp',),
            ('googlevideo_tcp',),
            ('discord',),
            ('discord_voice',),
            ('other',),
            ('ipset',),
            ('ipset_udp',),
        ]
        
        for category_key, in tab_data:
            short_name, _ = self.tab_names[category_key]
            self._add_category_tab(short_name, None, category_key)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tooltip —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
            tab_index = self.category_tabs.count() - 1
            if category_key in self.tab_tooltips:
                self.category_tabs.setTabToolTip(tab_index, self.tab_tooltips[category_key])
        
        layout.addWidget(self.category_tabs, 1)
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        self._create_preview_widget(layout)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("font-weight: bold; color: #ffa500; font-size: 9pt; padding: 3px;")
        self.status_label.setFixedHeight(25)
        layout.addWidget(self.status_label)
        
        self.select_button.setEnabled(False)

    def eventFilter(self, obj, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–∞–±–æ–≤"""
        from PyQt6.QtCore import QEvent
        
        if obj == self.category_tabs.tabBar() and self.is_direct_mode:
            if event.type() == QEvent.Type.HoverEnter:
                # –ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º —Ç–∞–±—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                if not self.category_tabs.is_expanded:
                    self._expand_all_tabs()
                    # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    self.category_tabs.tab_animation.setStartValue(self.category_tabs.collapsed_width)
                    self.category_tabs.tab_animation.setEndValue(self.category_tabs.expanded_width)
                    self.category_tabs.tab_animation.finished.connect(
                        lambda: self.category_tabs.custom_tab_bar.setMaximumWidth(self.category_tabs.expanded_width)
                    )
                    self.category_tabs.tab_animation.start()
                    self.category_tabs.is_expanded = True
                    
            elif event.type() == QEvent.Type.HoverLeave:
                # –ü—Ä–∏ —É—Ö–æ–¥–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–∞–±—ã
                if self.category_tabs.is_expanded:
                    self._collapse_all_tabs()
                    # –ê–Ω–∏–º–∞—Ü–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                    self.category_tabs.tab_animation.setStartValue(self.category_tabs.expanded_width)
                    self.category_tabs.tab_animation.setEndValue(self.category_tabs.collapsed_width)
                    self.category_tabs.tab_animation.finished.connect(
                        lambda: self.category_tabs.custom_tab_bar.setMaximumWidth(self.category_tabs.collapsed_width)
                    )
                    self.category_tabs.tab_animation.start()
                    self.category_tabs.is_expanded = False
        
        return super().eventFilter(obj, event)

    def _expand_all_tabs(self):
        """–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –í–°–ï —Ç–∞–±—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"""
        category_keys = list(self.tab_names.keys())
        
        for i, category_key in enumerate(category_keys):
            if i < self.category_tabs.count():
                _, full_name = self.tab_names[category_key]
                self.category_tabs.setTabText(i, full_name)

    def _collapse_all_tabs(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –í–°–ï —Ç–∞–±—ã –ø—Ä–∏ —É—Ö–æ–¥–µ –º—ã—à–∫–∏"""
        category_keys = list(self.tab_names.keys())
        
        for i, category_key in enumerate(category_keys):
            if i < self.category_tabs.count():
                short_name, _ = self.tab_names[category_key]
                self.category_tabs.setTabText(i, short_name)

    def _save_last_tab_index(self, index):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        if self.is_direct_mode and not self._loading_in_progress and index >= 0:
            from strategy_menu import set_last_category_tab_index
            set_last_category_tab_index(index)
            log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏: {index}", "DEBUG")

    def _load_next_category_async(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å)"""
        if self._load_index >= len(self._pending_categories):
            # –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            self._finalize_loading()
            return
        
        tab_name, category_key = self._pending_categories[self._load_index]
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å
        from .strategy_lists_separated import (
            YOUTUBE_STRATEGIES, YOUTUBE_QUIC_STRATEGIES, GOOGLEVIDEO_STRATEGIES,
            DISCORD_STRATEGIES, DISCORD_VOICE_STRATEGIES, IPSET_TCP_STRATEGIES, IPSET_UDP_STRATEGIES
        )

        from .OTHER_STRATEGIES import OTHER_STRATEGIES
        
        strategies_map = {
            'youtube': YOUTUBE_STRATEGIES,
            'youtube_udp': YOUTUBE_QUIC_STRATEGIES,
            'googlevideo_tcp': GOOGLEVIDEO_STRATEGIES,
            'discord': DISCORD_STRATEGIES,
            'discord_voice': DISCORD_VOICE_STRATEGIES,
            'other': OTHER_STRATEGIES,
            'ipset': IPSET_TCP_STRATEGIES,
            'ipset_udp': IPSET_UDP_STRATEGIES
        }
        
        strategies = strategies_map.get(category_key, {})
        
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–ª—É—à–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        self._add_category_tab(tab_name, strategies, category_key)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if hasattr(self, 'loading_progress'):
            self.loading_progress.setValue(self._load_index + 1)
        
        self._load_index += 1
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–µ–¥—É—é—â–µ–π
        QTimer.singleShot(20, self._load_next_category_async)

    def _get_tab_tooltips(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫"""
        return {
            'youtube': """üé¨ YouTube —á–µ—Ä–µ–∑ TCP –ø—Ä–æ—Ç–æ–∫–æ–ª (–ø–æ—Ä—Ç—ã 80, 443)
    –û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–±—ã—á–Ω–æ–≥–æ YouTube —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–µ–±-–ø–æ—Ä—Ç—ã.
    TCP - —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –∏ –≤–∏–¥–µ–æ.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å youtube.com –∏ youtu.be.""",
            
            'youtube_udp': """üé¨ YouTube —á–µ—Ä–µ–∑ QUIC/UDP –ø—Ä–æ—Ç–æ–∫–æ–ª (–ø–æ—Ä—Ç 443)
    –û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É YouTube –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ QUIC (HTTP/3).
    QUIC —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö UDP –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ.
    –ú–Ω–æ–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç QUIC –¥–ª—è YouTube.""",
            
            'googlevideo_tcp': """üé¨ YouTube –≤–∏–¥–µ–æ —Å CDN —Å–µ—Ä–≤–µ—Ä–æ–≤ GoogleVideo
    –û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ *.googlevideo.com (–ø–æ—Ä—Ç 443).
    –≠—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (CDN), –æ—Ç–∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–∞–º–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã YouTube.
    –ù—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º YouTube.""",
            
            'discord': """üí¨ Discord –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä (–ø–æ—Ä—Ç—ã 80, 443)
    –û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ Discord.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º Discord —á–µ—Ä–µ–∑ TCP –ø—Ä–æ—Ç–æ–∫–æ–ª.
    –í–∫–ª—é—á–∏—Ç–µ –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏.""",
            
            'discord_voice': """üîä Discord –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ (UDP –ø–æ—Ä—Ç—ã)
    –û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–≤—è–∑–∏ –∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –≤ Discord.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UDP –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ–ª–æ—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    –í–∫–ª—é—á–∏—Ç–µ –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –∑–≤–æ–Ω–∫–∏.""",
            
            'other': """üåê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ (–ø–æ—Ä—Ç—ã 80, 443)
    –û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∞–π—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ other.txt —á–µ—Ä–µ–∑ TCP.
    –í–∫–ª—é—á–∞–µ—Ç —Å–æ—Ç–Ω–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤.
    –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –≤–æ –≤–∫–ª–∞–¥–∫–µ Hostlist.""",
            
            'ipset': """üî¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ IP –∞–¥—Ä–µ—Å–∞–º (–ø–æ—Ä—Ç—ã 80, 443)
    –û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –∏—Ö IP –∞–¥—Ä–µ—Å–∞–º —á–µ—Ä–µ–∑ TCP.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–µ –¥–æ–º–µ–Ω—ã, –∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ IP.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ IP –∞–¥—Ä–µ—Å–∞–º–∏.""",

            'ipset_udp': """üî¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ IP –∞–¥—Ä–µ—Å–∞–º (UDP –¥–ª—è –∏–≥—Ä)
    –û–±—Ö–æ–¥–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –∏—Ö IP –∞–¥—Ä–µ—Å–∞–º —á–µ—Ä–µ–∑ UDP.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–µ –¥–æ–º–µ–Ω—ã, –∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ IP.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ IP –∞–¥—Ä–µ—Å–∞–º–∏.""",
        }

    def _async_load_builtin_strategies(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        log("–ù–∞—á–∞–ª–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π Direct —Ä–µ–∂–∏–º–∞", "DEBUG")
        
        self._loading_in_progress = True
        
        if hasattr(self, 'loading_progress'):
            self.loading_progress.setVisible(True)
            self.loading_progress.setRange(0, len(self._pending_categories))
            self.loading_progress.setValue(0)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        self._load_index = 0
        QTimer.singleShot(1, self._load_next_category_async)

    def _finalize_loading(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        self._loading_in_progress = False
        
        if hasattr(self, 'loading_progress'):
            self.loading_progress.setVisible(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.setText("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–±–æ—Ä—É")
        self.status_label.setStyleSheet("font-weight: bold; color: #4CAF50; font-size: 9pt; padding: 3px;")
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞
        self.select_button.setEnabled(True)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∫–ª–∞–¥–∫—É
        from strategy_menu import get_last_category_tab_index
        last_index = get_last_category_tab_index()
        if 0 <= last_index < self.category_tabs.count():
            self.category_tabs.setCurrentIndex(last_index)
            log(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏: {last_index}", "DEBUG")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        self.update_combined_preview()
        
        log("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≥–æ—Ç–æ–≤—ã", "INFO")

    def _add_category_tab(self, tab_name, strategies, category_key):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∫–ª–∞–¥–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å –∑–∞–≥–ª—É—à–∫–æ–π –µ—Å–ª–∏ strategies=None)"""
        
        # –ï—Å–ª–∏ strategies=None, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        if strategies is None:
            placeholder = QWidget()
            layout = QVBoxLayout(placeholder)
            layout.setContentsMargins(10, 10, 10, 10)
            
            loading_label = QLabel("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")
            loading_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            loading_label.setStyleSheet("color: #888; font-style: italic; font-size: 10pt;")
            layout.addWidget(loading_label)
            layout.addStretch()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏–Ω–¥–µ–∫—Å
            tab_index = self.category_tabs.addTab(placeholder, tab_name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
            self._pending_categories.append((tab_name, category_key))
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞
            if not hasattr(self, '_category_tab_indices'):
                self._category_tab_indices = {}
            self._category_tab_indices[category_key] = tab_index
            return
        
        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        tab_widget = QWidget()
        tab_layout = QVBoxLayout(tab_widget)
        tab_layout.setContentsMargins(10, 10, 10, 10)
        tab_layout.setSpacing(5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_title = self._get_category_title(category_key)
        title_label = QLabel(category_title)
        title_label.setStyleSheet("font-weight: bold; font-size: 10pt; color: #2196F3; margin-bottom: 5px;")
        tab_layout.addWidget(title_label)
        
        # –°—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        favorites_label = QLabel("")
        favorites_label.setStyleSheet("color: #ffd700; font-weight: bold; font-size: 8pt; margin: 2px;")
        favorites_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        tab_layout.addWidget(favorites_label)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background: transparent;
            }
            QScrollBar:vertical {
                width: 10px;
                background: #2a2a2a;
            }
            QScrollBar::handle:vertical {
                background: #555;
                border-radius: 5px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #666;
            }
        """)
        
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        scroll_layout.setContentsMargins(5, 5, 5, 5)
        scroll_layout.setSpacing(3)
        
        button_group = QButtonGroup()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–≤–µ—Ä—Ö—É
        sorted_strategies = self._sort_category_strategies(strategies)
        favorites_count = 0
        
        for idx, (strat_id, strat_data) in enumerate(sorted_strategies):
            from .widgets_favorites import FavoriteCompactStrategyItem
            strategy_item = FavoriteCompactStrategyItem(strat_id, strat_data)
            
            # –°—á–∏—Ç–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
            from strategy_menu import is_favorite_strategy
            if is_favorite_strategy(strat_id):
                favorites_count += 1
            
            if strat_id == self.category_selections.get(category_key):
                strategy_item.set_checked(True)
            
            strategy_item.clicked.connect(
                lambda sid, cat=category_key: self.on_category_selection_changed(cat, sid)
            )
            
            strategy_item.favoriteToggled.connect(
                lambda sid, is_fav: self._on_direct_favorite_toggled(sid, is_fav)
            )
            
            strategy_item.favoriteToggled.connect(
                lambda sid, is_fav, cat=category_key, fl=favorites_label: 
                self._on_category_favorite_toggled(cat, sid, is_fav, fl, scroll_widget)
            )
            
            button_group.addButton(strategy_item.radio, idx)
            scroll_layout.addWidget(strategy_item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        if favorites_count > 0:
            favorites_label.setText(f"‚≠ê {favorites_count}")
        
        setattr(self, f"{category_key}_button_group", button_group)
        setattr(self, f"{category_key}_favorites_label", favorites_label)
        
        scroll_layout.addStretch()
        scroll_area.setWidget(scroll_widget)
        tab_layout.addWidget(scroll_area)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã
        if hasattr(self, '_category_tab_indices') and category_key in self._category_tab_indices:
            correct_index = self._category_tab_indices[category_key]
            if correct_index < self.category_tabs.count():
                self.category_tabs.removeTab(correct_index)
                self.category_tabs.insertTab(correct_index, tab_widget, tab_name)
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tooltip –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏
                if hasattr(self, 'tab_tooltips') and category_key in self.tab_tooltips:
                    self.category_tabs.setTabToolTip(correct_index, self.tab_tooltips[category_key])
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
                self._update_category_indices()

    def _update_category_indices(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–±–æ–≤"""
        if hasattr(self, '_category_tab_indices'):
            category_keys = ['youtube', 'youtube_udp', 'googlevideo_tcp', 'discord', 
                            'discord_voice', 'other', 'ipset', 'ipset_udp']
            for i, key in enumerate(category_keys):
                if i < self.category_tabs.count():
                    self._category_tab_indices[key] = i
                
    def _get_category_title(self, category_key):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        titles = {
            'youtube': "YouTube —á–µ—Ä–µ–∑ TCP (–ø–æ—Ä—Ç—ã 80, 443) - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∞—Ñ–∏–∫ www.youtube.com",
            'youtube_udp': "YouTube —á–µ—Ä–µ–∑ QUIC/UDP (–ø–æ—Ä—Ç 443) - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω QUIC –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
            'googlevideo_tcp': "GoogleVideo CDN —Å–µ—Ä–≤–µ—Ä—ã - –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤–∏–¥–µ–æ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏",
            'discord': "Discord –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä (TCP) - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∞—Ñ–∏–∫ discord.com",
            'discord_voice': "Discord –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–≤–æ–Ω–∫–∏ (UDP) - –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –∑–≤–æ–Ω–∫–∏",
            'other': "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ other.txt (TCP)",
            'ipset': "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ IP –∞–¥—Ä–µ—Å–∞–º (TCP) ipset-all.txt",
            'ipset_udp': "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ IP –∞–¥—Ä–µ—Å–∞–º (UDP/–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–≥—Ä—ã) ipset-all.txt",
        }
        return titles.get(category_key, "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    def _on_direct_favorite_toggled(self, strategy_id, is_favorite):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ Direct —Ä–µ–∂–∏–º–µ"""
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤" if is_favorite else "—É–¥–∞–ª–µ–Ω–∞ –∏–∑"
        log(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} {action} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", "INFO")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.setText(f"{'‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ' if is_favorite else '‚òÜ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö'}")
        self.status_label.setStyleSheet("font-weight: bold; color: #ffd700; font-size: 9pt; padding: 3px;")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(2000, lambda: self.status_label.setText("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–±–æ—Ä—É"))

    def _sort_category_strategies(self, strategies):
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–≤–µ—Ä—Ö—É"""
        from strategy_menu import is_favorite_strategy
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ
        favorites = []
        regular = []
        
        for strat_id, strat_data in strategies.items():
            if is_favorite_strategy(strat_id):
                favorites.append((strat_id, strat_data))
            else:
                regular.append((strat_id, strat_data))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–æ –∏–º–µ–Ω–∏
        favorites.sort(key=lambda x: x[1].get('name', x[0]).lower())
        #regular.sort(key=lambda x: x[1].get('name', x[0]).lower())
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ
        return favorites + regular

    def _on_category_favorite_toggled(self, category_key, strategy_id, is_favorite, favorites_label, scroll_widget):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        from strategy_menu import is_favorite_strategy
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        favorites_count = 0
        for child in scroll_widget.findChildren(CompactStrategyItem):
            if is_favorite_strategy(child.strategy_id):
                favorites_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if favorites_count > 0:
            favorites_label.setText(f"‚≠ê {favorites_count}")
        else:
            favorites_label.setText("")
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤" if is_favorite else "—É–¥–∞–ª–µ–Ω–∞ –∏–∑"
        log(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} {action} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", "INFO")
        
        # –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        QTimer.singleShot(500, lambda: self._resort_category_strategies(category_key))

    def _resort_category_strategies(self, category_key):
        """–ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        # –ù–∞—Ö–æ–¥–∏–º –≤–∫–ª–∞–¥–∫—É –ø–æ –∫–ª—é—á—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        tab_index = -1
        category_map = {
            'youtube': 0,
            'youtube_udp': 1,
            'googlevideo_tcp': 2,
            'discord': 3,
            'discord_voice': 4,
            'other': 5,
            'ipset': 6,
            'ipset_udp': 7
        }
        
        tab_index = category_map.get(category_key, -1)
        if tab_index == -1 or tab_index >= self.category_tabs.count():
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
        tab_widget = self.category_tabs.widget(tab_index)
        if not tab_widget:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º scroll area –∏ –µ–≥–æ –≤–∏–¥–∂–µ—Ç
        scroll_area = None
        for child in tab_widget.findChildren(QScrollArea):
            scroll_area = child
            break
        
        if not scroll_area:
            return
        
        scroll_widget = scroll_area.widget()
        if not scroll_widget:
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤
        strategy_items = []
        for child in scroll_widget.findChildren(CompactStrategyItem):
            strategy_items.append({
                'widget': child,
                'id': child.strategy_id,
                'data': child.strategy_data,
                'is_checked': child.radio.isChecked()
            })
        
        # –û—á–∏—â–∞–µ–º layout
        layout = scroll_widget.layout()
        while layout.count() > 0:
            item = layout.takeAt(0)
            if item.widget():
                item.widget().setParent(None)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–≤–µ—Ä—Ö—É
        from strategy_menu import is_favorite_strategy
        
        favorites = []
        regular = []
        
        for item in strategy_items:
            if is_favorite_strategy(item['id']):
                favorites.append(item)
            else:
                regular.append(item)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
        favorites.sort(key=lambda x: x['data'].get('name', x['id']).lower())
        regular.sort(key=lambda x: x['data'].get('name', x['id']).lower())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        all_sorted = favorites + regular
        
        button_group = getattr(self, f"{category_key}_button_group", None)
        
        for idx, item in enumerate(all_sorted):
            layout.addWidget(item['widget'])
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if item['is_checked']:
                item['widget'].set_checked(True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º button group
            if button_group:
                button_group.addButton(item['widget'].radio, idx)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É –≤ –∫–æ–Ω–µ—Ü
        layout.addStretch()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_buttons()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self._create_tabs()
        
        layout.addWidget(self.tab_widget)
        layout.addWidget(self.buttons_widget)

    def _create_control_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.buttons_layout = QHBoxLayout()
        self.buttons_layout.setSpacing(10)
        
        self.select_button = QPushButton("‚úÖ –í—ã–±—Ä–∞—Ç—å")
        self.select_button.clicked.connect(self.accept)
        self.select_button.setEnabled(False)
        self.select_button.setMinimumHeight(30)
        self.buttons_layout.addWidget(self.select_button)
        
        self.cancel_button = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        self.cancel_button.clicked.connect(self.reject)
        self.cancel_button.setMinimumHeight(30)
        self.buttons_layout.addWidget(self.cancel_button)
        
        self.buttons_widget = QWidget()
        self.buttons_widget.setLayout(self.buttons_layout)

    def _create_tabs(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #444;
                background: #2a2a2a;
            }
            QTabBar::tab {
                padding: 5px 10px;
                min-width: 80px;
            }
            QTabBar::tab:selected {
                background: #3a3a3a;
                border-bottom: 2px solid #2196F3;
            }
        """)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategies_tab = QWidget()
        self._init_strategies_tab()
        self.tab_widget.addTab(self.strategies_tab, "üìã –°—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # –•–æ—Å—Ç–ª–∏—Å—Ç—ã
        from .hostlists_tab import HostlistsTab
        self.hostlists_tab = HostlistsTab()
        self.hostlists_tab.hostlists_changed.connect(self._on_hostlists_changed)
        self.tab_widget.addTab(self.hostlists_tab, "üåê Hostlist")

        # IPsets
        from .ipsets_tab import IpsetsTab
        self.ipsets_tab = IpsetsTab()
        self.ipsets_tab.ipsets_changed.connect(self._on_ipsets_changed)
        self.tab_widget.addTab(self.ipsets_tab, "üî¢ IPSet")

        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_tab = QWidget()
        self._init_settings_tab()
        self.tab_widget.addTab(self.settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        self.tab_widget.currentChanged.connect(self._on_tab_changed)

    def _on_hostlists_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤"""
        log("–•–æ—Å—Ç–ª–∏—Å—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ DPI", "INFO")

    def _on_ipsets_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è IPsets"""
        log("IPsets –∏–∑–º–µ–Ω–µ–Ω—ã, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ DPI", "INFO")
        
    def _init_strategies_tab(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        layout = QVBoxLayout(self.strategies_tab)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        if self.is_direct_mode:
            self._init_direct_mode_ui(layout)
        else:
            self._init_bat_mode_ui(layout)

    def _init_bat_mode_ui(self, layout):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è BAT —Ä–µ–∂–∏–º–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_table = StrategyTableWidget(self.strategy_manager, self)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.strategy_table.strategy_selected.connect(self._on_table_strategy_selected)
        self.strategy_table.strategy_double_clicked.connect(self._on_table_strategy_double_clicked)
        self.strategy_table.refresh_button.clicked.connect(self.refresh_strategies)
        self.strategy_table.download_all_button.clicked.connect(self.strategy_table.download_all_strategies_async)
        
        layout.addWidget(self.strategy_table)

    def _create_preview_widget(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        preview_widget = QFrame()
        preview_widget.setFrameStyle(QFrame.Shape.Box)
        preview_widget.setMaximumHeight(100)
        preview_layout = QVBoxLayout(preview_widget)
        preview_layout.setContentsMargins(5, 5, 5, 5)
        preview_layout.setSpacing(2)
        
        preview_label = QLabel("üìã –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç (–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–∞—Ñ–∏–∫–∞):")
        preview_label.setStyleSheet("font-weight: bold; font-size: 9pt;")
        preview_layout.addWidget(preview_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        hint_label = QLabel("üí° –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
        hint_label.setStyleSheet("font-size: 8pt; color: #888; font-style: italic;")
        preview_layout.addWidget(hint_label)
        
        self.preview_text = QTextBrowser()
        self.preview_text.setMaximumHeight(50)
        self.preview_text.setStyleSheet("""
            QTextBrowser {
                background: #222;
                border: 1px solid #444;
                font-family: Arial;
                font-size: 8pt;
                color: #aaa;
            }
            QTextBrowser:hover {
                border: 1px solid #2196F3;
                background: #2a2a2a;
                cursor: pointer;
            }
        """)
        
        # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
        self.preview_text.setOpenExternalLinks(False)
        self.preview_text.mousePressEvent = self._preview_clicked
        
        preview_layout.addWidget(self.preview_text)
        
        layout.addWidget(preview_widget, 0)

    def _preview_clicked(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É"""
        if event.button() == Qt.MouseButton.LeftButton:
            show_command_line_dialog(self)
            
    def _init_settings_tab(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        # –û—Å–Ω–æ–≤–Ω–æ–π layout –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        tab_layout = QVBoxLayout(self.settings_tab)
        tab_layout.setContentsMargins(0, 0, 0, 0)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameStyle(QFrame.Shape.NoFrame)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background: transparent;
            }
            QScrollBar:vertical {
                width: 12px;
                background: #2a2a2a;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: #555;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #666;
            }
        """)
        
        # –í–∏–¥–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_widget = QWidget()
        layout = QVBoxLayout(scroll_widget)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        title_font = title_label.font()
        title_font.setBold(True)
        title_font.setPointSize(11)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("margin: 5px; color: #2196F3;")
        layout.addWidget(title_label)
        
        # –ì—Ä—É–ø–ø–∞ –º–µ—Ç–æ–¥–æ–≤ –∑–∞–ø—É—Å–∫–∞
        method_group = QGroupBox("–ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        method_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        method_layout = QVBoxLayout(method_group)
        
        self.method_button_group = QButtonGroup()
        
        
        self.direct_method_radio = QRadioButton("–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        self.direct_method_radio.setToolTip(
            "–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Python.\n"
            "–ù–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É.\n"
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –æ–∫–æ–Ω –∫–æ–Ω—Å–æ–ª–∏."
        )
        self.method_button_group.addButton(self.direct_method_radio, 1)
        method_layout.addWidget(self.direct_method_radio)

        self.bat_method_radio = QRadioButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ (—á–µ—Ä–µ–∑ .bat —Ñ–∞–π–ª—ã)")
        self.bat_method_radio.setToolTip(
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç .bat —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.\n"
            "–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n"
            "–ú–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–∫–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."
        )
        self.method_button_group.addButton(self.bat_method_radio, 0)
        method_layout.addWidget(self.bat_method_radio)
                
        current_method = get_strategy_launch_method()
        if current_method == "direct":
            self.direct_method_radio.setChecked(True)
        else:
            self.bat_method_radio.setChecked(True)
        
        self.method_button_group.buttonClicked.connect(self._on_method_changed)
        layout.addWidget(method_group)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
        self._create_launch_params(layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–∞—Ö
        info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        info_layout = QVBoxLayout(info_group)
        
        info_text = QLabel(
            "‚Ä¢ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
            "‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥: –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –≤–∏–¥–µ .bat —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Ç–æ–¥–∞ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
        info_text.setWordWrap(True)
        info_text.setStyleSheet("padding: 10px; font-weight: normal;")
        info_layout.addWidget(info_text)
        layout.addWidget(info_group)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        auto_update_note = QLabel(
            "üí° –ü–æ—Å–ª–µ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ–º –æ–∫–Ω–µ —Å–ª–µ–¥—É–µ—Ç –ó–ê–ù–û–í–û –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ—Å–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚úÖ –í—ã–±—Ä–∞—Ç—å"
        )
        auto_update_note.setAlignment(Qt.AlignmentFlag.AlignCenter)
        auto_update_note.setWordWrap(True)
        auto_update_note.setStyleSheet(
            "padding: 8px; background: #2196F3; color: white; "
            "border-radius: 5px; font-weight: bold; margin: 5px;"
        )
        layout.addWidget(auto_update_note)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É –≤ –∫–æ–Ω–µ—Ü
        layout.addStretch()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area.setWidget(scroll_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        tab_layout.addWidget(scroll_area)

    def _create_launch_params(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞"""
        from strategy_menu import get_wssize_enabled, get_allzone_hostlist_enabled, get_game_filter_enabled

        params_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞")
        params_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #ffa500;
            }
        """)
        params_layout = QVBoxLayout(params_group)
        params_layout.setSpacing(8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        warning_label = QLabel("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        warning_label.setStyleSheet("color: #ffa500; font-weight: bold; font-size: 9pt; margin-bottom: 5px;")
        params_layout.addWidget(warning_label)
        
        # –ù–û–í–´–ô –ß–ï–ö–ë–û–ö–° ALLZONE - –í –°–ê–ú–û–ú –í–ï–†–•–£
        allzone_widget = QWidget()
        allzone_layout = QVBoxLayout(allzone_widget)
        allzone_layout.setContentsMargins(0, 0, 0, 0)
        allzone_layout.setSpacing(3)
        
        self.allzone_checkbox = QCheckBox("–ü—Ä–∏–º–µ–Ω—è—Ç—å Zapret –∫–æ –í–°–ï–ú —Å–∞–π—Ç–∞–º")
        self.allzone_checkbox.setToolTip(
            "–ó–∞–º–µ–Ω—è–µ—Ç —Ö–æ—Å—Ç–ª–∏—Å—Ç other.txt –Ω–∞ allzone.txt –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö.\n"
            "allzone.txt —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤.\n"
            "–ú–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É."
        )
        self.allzone_checkbox.setStyleSheet("font-weight: bold; color: #2196F3;")
        self.allzone_checkbox.setChecked(get_allzone_hostlist_enabled())
        self.allzone_checkbox.stateChanged.connect(self._on_allzone_changed)
        allzone_layout.addWidget(self.allzone_checkbox)
        
        allzone_info = QLabel("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ allzone.txt –≤–º–µ—Å—Ç–æ other.txt")
        allzone_info.setWordWrap(True)
        allzone_info.setStyleSheet("padding-left: 20px; color: #aaa; font-size: 8pt;")
        allzone_layout.addWidget(allzone_info)
        
        params_layout.addWidget(allzone_widget)
        params_layout.addWidget(self._create_separator())
        
        game_widget = QWidget()
        game_layout = QVBoxLayout(game_widget)
        game_layout.setContentsMargins(0, 0, 0, 0)
        game_layout.setSpacing(3)
        
        self.ipset_all_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏–≥—Ä (Game Filter)")
        self.ipset_all_checkbox.setToolTip(
            "–†–∞—Å—à–∏—Ä—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ —Å 80,443 –Ω–∞ 80,443,444-65535\n"
            "–¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Ö–æ—Å—Ç–ª–∏—Å—Ç–∞–º–∏ other.txt.\n"
            "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∏–≥—Ä –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö."
        )
        self.ipset_all_checkbox.setStyleSheet("font-weight: bold;")
        self.ipset_all_checkbox.setChecked(get_game_filter_enabled())
        self.ipset_all_checkbox.stateChanged.connect(self._on_game_filter_changed)
        game_layout.addWidget(self.ipset_all_checkbox)
        
        ipset_info = QLabel("–†–∞—Å—à–∏—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ø–æ—Ä—Ç—ã 444-65535 –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")
        ipset_info.setWordWrap(True)
        ipset_info.setStyleSheet("padding-left: 20px; color: #aaa; font-size: 8pt;")
        game_layout.addWidget(ipset_info)
        
        params_layout.addWidget(game_widget)
        params_layout.addWidget(self._create_separator())
        
        # –ß–µ–∫–±–æ–∫—Å wssize
        wssize_widget = QWidget()
        wssize_layout = QVBoxLayout(wssize_widget)
        wssize_layout.setContentsMargins(0, 0, 0, 0)
        wssize_layout.setSpacing(3)
        
        self.wssize_checkbox = QCheckBox("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ wssize (–ú–û–ñ–ï–¢ –£–ú–ï–ù–¨–®–ò–¢–¨ –°–ö–û–†–û–°–¢–¨!)")
        self.wssize_checkbox.setToolTip(
            "–í–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä --wssize=1:6 –¥–ª—è –≤—Å–µ—Ö TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 443.\n"
            "–ú–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö.\n"
            "–í–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ TCP —Å–µ–≥–º–µ–Ω—Ç–æ–≤."
        )
        self.wssize_checkbox.setStyleSheet("font-weight: bold; color: #fc7979;")
        self.wssize_checkbox.setChecked(get_wssize_enabled())
        self.wssize_checkbox.stateChanged.connect(self._on_wssize_changed)
        wssize_layout.addWidget(self.wssize_checkbox)
        
        wssize_info = QLabel("–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä TCP –æ–∫–Ω–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ 443, –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ–±–æ–π—Ç–∏ DPI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
        wssize_info.setWordWrap(True)
        wssize_info.setStyleSheet("padding-left: 20px; color: #aaa; font-size: 8pt;")
        wssize_layout.addWidget(wssize_info)
        
        params_layout.addWidget(wssize_widget)
        
        # –ú–µ—Å—Ç–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_layout.addSpacing(10)
        future_params_label = QLabel("–î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
        future_params_label.setStyleSheet("color: #666; font-style: italic; padding: 5px; font-size: 8pt;")
        future_params_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        params_layout.addWidget(future_params_label)
        
        layout.addWidget(params_group)

    def _create_separator(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setStyleSheet("QFrame { background-color: #444; max-height: 1px; margin: 5px 0; }")
        return separator

    def _on_allzone_changed(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è allzone.txt"""
        from strategy_menu import set_allzone_hostlist_enabled
        enabled = (state == Qt.CheckState.Checked.value)
        set_allzone_hostlist_enabled(enabled)
        log(f"–ó–∞–º–µ–Ω–∞ other.txt –Ω–∞ allzone.txt {'–≤–∫–ª—é—á–µ–Ω–∞' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}", "INFO")

    def _on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫"""
        try:
            if index == 0:  # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
                self.buttons_widget.setVisible(True)
                if self.is_direct_mode:
                    self.select_button.setEnabled(True)
            elif index == 1:  # –•–æ—Å—Ç–ª–∏—Å—Ç—ã
                self.buttons_widget.setVisible(False)
            elif index == 2:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                self.buttons_widget.setVisible(False)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ _on_tab_changed: {e}", "‚ùå ERROR")

    def _on_method_changed(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞"""
        from strategy_menu import set_strategy_launch_method
        old_method = self.launch_method
        
        if button == self.direct_method_radio:
            set_strategy_launch_method("direct")
            new_method = "direct"
        else:
            set_strategy_launch_method("bat")
            new_method = "bat"
        
        if old_method != new_method:
            log(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å {old_method} –Ω–∞ {new_method}...", "INFO")
            
            msg = QMessageBox(self)
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("–°–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞")
            msg.setText("–ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω!")
            msg.setInformativeText("–î–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            msg.setStandardButtons(QMessageBox.StandardButton.Ok)
            msg.exec()
            
            self._schedule_dialog_restart()

    def _schedule_dialog_restart(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞"""
        parent_window = self.parent()
        self.close()
        
        def restart_dialog():
            if parent_window and hasattr(parent_window, '_show_strategy_dialog'):
                parent_window._show_strategy_dialog()
        
        QTimer.singleShot(100, restart_dialog)

    def _on_game_filter_changed(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è ipset-all"""
        from strategy_menu import set_game_filter_enabled

        enabled = (state == Qt.CheckState.Checked.value)
        set_game_filter_enabled(enabled)
        log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä ipset-all {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}", "INFO")

    def _on_wssize_changed(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è wssize"""
        from strategy_menu import set_wssize_enabled
        enabled = (state == Qt.CheckState.Checked.value)
        set_wssize_enabled(enabled)
        log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä --wssize=1:6 {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}", "INFO")

    def _on_table_strategy_selected(self, strategy_id, strategy_name):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.selected_strategy_id = strategy_id
        self.selected_strategy_name = strategy_name
        self.select_button.setEnabled(True)
        log(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}", "DEBUG")

    def _on_table_strategy_double_clicked(self, strategy_id, strategy_name):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.selected_strategy_id = strategy_id
        self.selected_strategy_name = strategy_name
        self.accept()

    def on_category_selection_changed(self, category, strategy_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

        from strategy_menu import set_direct_strategy_youtube, set_direct_strategy_youtube_udp, set_direct_strategy_googlevideo, set_direct_strategy_discord, set_direct_strategy_other, set_direct_strategy_discord_voice, set_direct_strategy_ipset, set_direct_strategy_udp_ipset

        self.category_selections[category] = strategy_id
        self.update_combined_preview()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        try:
            if category == 'youtube':
                set_direct_strategy_youtube(strategy_id)
            elif category == 'youtube_udp':
                set_direct_strategy_youtube_udp(strategy_id)
            elif category == 'googlevideo_tcp':
                set_direct_strategy_googlevideo(strategy_id)
            elif category == 'discord':
                set_direct_strategy_discord(strategy_id)
            elif category == 'discord_voice':
                set_direct_strategy_discord_voice(strategy_id)
            elif category == 'other':
                set_direct_strategy_other(strategy_id)
            elif category == 'ipset':
                set_direct_strategy_ipset(strategy_id)
            elif category == 'ipset_udp':
                set_direct_strategy_udp_ipset(strategy_id)

            log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ {category} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_id}", "DEBUG")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {category} —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}", "‚ö† WARNING")
        
        self.select_button.setEnabled(True)

    def update_combined_preview(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not hasattr(self, 'preview_text'):
            return
        
        from .strategy_lists_separated import combine_strategies
        
        combined = combine_strategies(
            self.category_selections.get('youtube'),
            self.category_selections.get('youtube_udp'),
            self.category_selections.get('googlevideo_tcp'),
            self.category_selections.get('discord'),
            self.category_selections.get('discord_voice'),
            self.category_selections.get('other'),
            self.category_selections.get('ipset'),
            self.category_selections.get('ipset_udp')
        )
        
        active = []
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        from strategy_menu import is_favorite_strategy
        
        def format_strategy(category_name, category_key, color):
            strategy_id = self.category_selections.get(category_key)
            if strategy_id and strategy_id != f'{category_key}_none':
                star = "‚≠ê " if is_favorite_strategy(strategy_id) else ""
                return f"{star}<span style='color: {color};'>{category_name}</span>"
            return None
        
        items = [
            format_strategy("YouTube TCP (80 & 443)", 'youtube', '#ff6666'),
            format_strategy("YouTube QUIC/UDP (443)", 'youtube_udp', '#ffcc00'),
            format_strategy("GoogleVideo TCP (443)", 'googlevideo_tcp', '#ff9900'),
            format_strategy("Discord TCP (80 & 443)", 'discord', '#7289da'),
            format_strategy("Discord Voice UDP (all stun ports)", 'discord_voice', '#9b59b6'),
            format_strategy("–°–∞–π—Ç—ã TCP (80 & 443)", 'other', '#66ff66'),
            format_strategy("IPset TCP (80 & 443)", 'ipset', '#ffa500'),
            format_strategy("IPset UDP (all ports)", 'ipset_udp', "#ae00ff"),
        ]
        
        active = [item for item in items if item]
        
        if active:
            preview_html = f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ:</b> {', '.join(active)}"
            args_count = len(combined['args'].split())
            preview_html += f"<br><span style='color: #888; font-size: 7pt;'>–ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {args_count}</span>"
        else:
            preview_html = "<span style='color: #888;'>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</span>"
        
        self.preview_text.setHtml(f"""
            <style>
                body {{ 
                    margin: 2px; 
                    font-family: Arial; 
                    font-size: 8pt;
                    color: #ccc;
                }}
            </style>
            <body>{preview_html}</body>
        """)

    def load_builtin_strategies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)"""
        try:
            if hasattr(self, 'status_label'):
                self.status_label.setText("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
                self.status_label.setStyleSheet("font-weight: bold; color: #4CAF50; padding: 5px;")
            
            if self.is_direct_mode:
                self.select_button.setEnabled(True)
            
            log("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≥–æ—Ç–æ–≤—ã", "INFO")
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}", "‚ùå ERROR")

    def load_local_strategies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ BAT —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            if hasattr(self, 'strategy_table'):
                self.strategy_table.set_progress_visible(True)
                self.strategy_table.set_status("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...", "info")
            
            strategies = self.strategy_manager.get_local_strategies_only()
            
            if strategies and hasattr(self, 'strategy_table'):
                self.strategy_table.populate_strategies(strategies)
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.strategy_table.set_progress_visible(False)
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if self.current_strategy_name:
                    self.strategy_table.select_strategy_by_name(self.current_strategy_name)
                
                log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(strategies)} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "INFO")
            else:
                self.strategy_table.set_status(
                    "‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å'", 
                    "warning"
                )
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                self.strategy_table.set_progress_visible(False)
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}", "‚ùå ERROR")
            if hasattr(self, 'strategy_table'):
                self.strategy_table.set_status(f"‚ùå –û—à–∏–±–∫–∞: {e}", "error")
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.strategy_table.set_progress_visible(False)

    def refresh_strategies(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        if self.is_loading_strategies:
            QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", 
                                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        
        if self.is_direct_mode:
            self.load_builtin_strategies()
            return
        
        self.is_loading_strategies = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.strategy_table.set_status("üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...", "info")
        self.strategy_table.set_progress_visible(True)
        self.strategy_table.refresh_button.setEnabled(False)
        self.strategy_table.download_all_button.setEnabled(False)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.loader_thread = QThread()
        self.loader_worker = InternetStrategyLoader(self.strategy_manager)
        self.loader_worker.moveToThread(self.loader_thread)
        
        self.loader_thread.started.connect(self.loader_worker.run)
        self.loader_worker.progress.connect(
            lambda msg: self.strategy_table.set_status(f"üîÑ {msg}", "info")
        )
        self.loader_worker.finished.connect(self._on_strategies_loaded)
        self.loader_worker.finished.connect(self.loader_thread.quit)
        self.loader_worker.finished.connect(self.loader_worker.deleteLater)
        self.loader_thread.finished.connect(self.loader_thread.deleteLater)
        
        self.loader_thread.start()
        log("–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "INFO")

    def _on_strategies_loaded(self, strategies, error_message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        self.is_loading_strategies = False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
        self.strategy_table.set_progress_visible(False)
        self.strategy_table.refresh_button.setEnabled(True)
        self.strategy_table.download_all_button.setEnabled(True)
        
        if error_message:
            self.strategy_table.set_status(f"‚ùå {error_message}", "error")
            return
        
        if not strategies:
            self.strategy_table.set_status("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—É—Å—Ç", "warning")
            return
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.strategy_table.populate_strategies(strategies)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if self.current_strategy_name:
            self.strategy_table.select_strategy_by_name(self.current_strategy_name)
        
        log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(strategies)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "INFO")

    def accept(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.is_direct_mode:
            # –†–µ–∂–∏–º –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            from .strategy_lists_separated import combine_strategies, get_default_selections
            
            if not self.category_selections:
                self.category_selections = get_default_selections()
            
            combined = combine_strategies(
                self.category_selections.get('youtube'),
                self.category_selections.get('youtube_udp'),
                self.category_selections.get('googlevideo_tcp'),
                self.category_selections.get('discord'),
                self.category_selections.get('discord_voice'),
                self.category_selections.get('other'),
                self.category_selections.get('ipset'),
                self.category_selections.get('ipset_udp')
            )
            
            # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ main.py
            self._combined_args = combined['args']
            self._combined_strategy_data = {
                'is_combined': True,
                'name': combined['description'],
                'args': combined['args'],
                'selections': self.category_selections
            }
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∏ –∏–º—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            self.selected_strategy_id = "COMBINED_DIRECT"
            self.selected_strategy_name = combined['description']
            
            log(f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.selected_strategy_name}", "INFO")
            log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {len(self._combined_args)} —Å–∏–º–≤–æ–ª–æ–≤", "DEBUG")
            log(f"–í—ã–±–æ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {self.category_selections}", "DEBUG")
            
        else:
            # BAT —Ä–µ–∂–∏–º
            if not self.selected_strategy_id or not self.selected_strategy_name:
                QMessageBox.warning(self, "–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", 
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
                return
            
            # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            self._combined_args = None
            self._combined_strategy_data = None
            
            log(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.selected_strategy_name}", "INFO")
        
        # –≠–º–∏—Ç–∏–º —Å–∏–≥–Ω–∞–ª
        self.strategySelected.emit(self.selected_strategy_id, self.selected_strategy_name)
        
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ main.py –º–æ–∂–µ—Ç –µ—â–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
        # –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞

    def reject(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≤—ã–±–æ—Ä–∞"""
        self.close()
        log("–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω", "INFO")

    def closeEvent(self, event):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø—É—â–µ–Ω—ã
        try:
            if hasattr(self, 'loader_thread') and self.loader_thread:
                if self.loader_thread.isRunning():
                    self.loader_thread.quit()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º quit() –≤–º–µ—Å—Ç–æ terminate()
                    if not self.loader_thread.wait(2000):
                        self.loader_thread.terminate()
                        self.loader_thread.wait(1000)
        except RuntimeError:
            # –û–±—ä–µ–∫—Ç QThread —É–∂–µ —É–¥–∞–ª–µ–Ω
            pass
        
        event.accept()