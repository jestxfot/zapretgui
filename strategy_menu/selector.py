# strategy_menu/selector.py

from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, 
                            QWidget, QTabWidget, QLabel, QMessageBox, QGroupBox,
                            QTextBrowser, QSizePolicy, QFrame, QScrollArea, 
                            QRadioButton, QButtonGroup, QCheckBox)
from PyQt6.QtCore import Qt, pyqtSignal, QThread, QTimer
from PyQt6.QtGui import QFont

from log import log
from config import (get_strategy_launch_method, set_strategy_launch_method,
                   get_direct_strategy_selections, set_direct_strategy_youtube,
                   set_direct_strategy_discord, set_direct_strategy_other,
                   get_game_filter_enabled, set_game_filter_enabled,
                   get_wssize_enabled, set_wssize_enabled)

from .constants import MINIMUM_WIDTH, MINIMIM_HEIGHT
from .widgets import CompactStrategyItem
from .strategy_table_widget import StrategyTableWidget
from .workers import InternetStrategyLoader


class StrategySelector(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    
    strategySelected = pyqtSignal(str, str)  # (strategy_id, strategy_name)
    
    def __init__(self, parent=None, strategy_manager=None, current_strategy_name=None):
        super().__init__(parent)
        self.strategy_manager = strategy_manager
        self.current_strategy_name = current_strategy_name
        self.selected_strategy_id = None
        self.selected_strategy_name = None
        
        self._combined_args = None
        self._combined_strategy_data = None
        self.category_selections = {}
        
        self.is_loading_strategies = False
        self.loader_thread = None
        self.loader_worker = None
        
        self.launch_method = get_strategy_launch_method()
        self.is_direct_mode = (self.launch_method == "direct")
        
        self.setWindowTitle("–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        self.resize(MINIMUM_WIDTH, MINIMIM_HEIGHT)
        self.setMinimumSize(400, 350)  # –ï—â–µ –º–µ–Ω—å—à–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.setModal(False)
        
        self.init_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if self.is_direct_mode:
            self.load_builtin_strategies()
        else:
            self.load_local_strategies()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_buttons()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self._create_tabs()
        
        layout.addWidget(self.tab_widget)
        layout.addWidget(self.buttons_widget)

    def _create_control_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.buttons_layout = QHBoxLayout()
        self.buttons_layout.setSpacing(10)
        
        self.select_button = QPushButton("‚úÖ –í—ã–±—Ä–∞—Ç—å")
        self.select_button.clicked.connect(self.accept)
        self.select_button.setEnabled(False)
        self.select_button.setMinimumHeight(30)
        self.buttons_layout.addWidget(self.select_button)
        
        self.cancel_button = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        self.cancel_button.clicked.connect(self.reject)
        self.cancel_button.setMinimumHeight(30)
        self.buttons_layout.addWidget(self.cancel_button)
        
        self.buttons_widget = QWidget()
        self.buttons_widget.setLayout(self.buttons_layout)

    def _create_tabs(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #444;
                background: #2a2a2a;
            }
            QTabBar::tab {
                padding: 5px 10px;
                min-width: 80px;
            }
            QTabBar::tab:selected {
                background: #3a3a3a;
                border-bottom: 2px solid #2196F3;
            }
        """)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategies_tab = QWidget()
        self._init_strategies_tab()
        self.tab_widget.addTab(self.strategies_tab, "üìã –°—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_tab = QWidget()
        self._init_settings_tab()
        self.tab_widget.addTab(self.settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        self.tab_widget.currentChanged.connect(self._on_tab_changed)

    def _init_strategies_tab(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        layout = QVBoxLayout(self.strategies_tab)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        if self.is_direct_mode:
            self._init_direct_mode_ui(layout)
        else:
            self._init_bat_mode_ui(layout)

    def _init_bat_mode_ui(self, layout):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è BAT —Ä–µ–∂–∏–º–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_table = StrategyTableWidget(self.strategy_manager, self)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.strategy_table.strategy_selected.connect(self._on_table_strategy_selected)
        self.strategy_table.strategy_double_clicked.connect(self._on_table_strategy_double_clicked)
        self.strategy_table.refresh_button.clicked.connect(self.refresh_strategies)
        self.strategy_table.download_all_button.clicked.connect(self.strategy_table.download_all_strategies_async)
        
        layout.addWidget(self.strategy_table)

    def _init_direct_mode_ui(self, layout):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        from .strategy_lists_separated import (
            YOUTUBE_STRATEGIES, DISCORD_STRATEGIES, OTHER_STRATEGIES,
            get_default_selections
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤—ã–±–æ—Ä—ã
        try:
            self.category_selections = get_direct_strategy_selections()
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–±–æ—Ä–æ–≤: {e}", "‚ö† WARNING")
            self.category_selections = get_default_selections()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        title.setStyleSheet("font-weight: bold; font-size: 10pt; color: #2196F3; margin: 5px;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –í–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.category_tabs = QTabWidget()
        self.category_tabs.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.category_tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #444;
                background: #2a2a2a;
            }
            QTabBar::tab {
                padding: 4px 8px;
                font-size: 9pt;
            }
        """)
        
        self._add_category_tab("üé¨ YouTube", YOUTUBE_STRATEGIES, 'youtube')
        self._add_category_tab("üí¨ Discord", DISCORD_STRATEGIES, 'discord')
        self._add_category_tab("üåê –û—Å—Ç–∞–ª—å–Ω—ã–µ", OTHER_STRATEGIES, 'other')
        
        layout.addWidget(self.category_tabs, 1)
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        self._create_preview_widget(layout)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–±–æ—Ä—É")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("font-weight: bold; color: #4CAF50; font-size: 9pt; padding: 3px;")
        self.status_label.setFixedHeight(25)
        layout.addWidget(self.status_label)
        
        self.update_combined_preview()
        self.select_button.setEnabled(True)

    def _add_category_tab(self, tab_name, strategies, category_key):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∫–ª–∞–¥–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        tab_widget = QWidget()
        tab_layout = QVBoxLayout(tab_widget)
        tab_layout.setContentsMargins(5, 5, 5, 5)
        tab_layout.setSpacing(3)
        
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background: transparent;
            }
            QScrollBar:vertical {
                width: 10px;
                background: #2a2a2a;
            }
            QScrollBar::handle:vertical {
                background: #555;
                border-radius: 5px;
                min-height: 20px;
            }
        """)
        
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        scroll_layout.setContentsMargins(5, 5, 5, 5)
        scroll_layout.setSpacing(3)
        
        button_group = QButtonGroup()
        
        for idx, (strat_id, strat_data) in enumerate(strategies.items()):
            strategy_item = CompactStrategyItem(strat_id, strat_data)
            
            if strat_id == self.category_selections.get(category_key):
                strategy_item.set_checked(True)
            
            strategy_item.clicked.connect(
                lambda sid, cat=category_key: self.on_category_selection_changed(cat, sid)
            )
            
            button_group.addButton(strategy_item.radio, idx)
            scroll_layout.addWidget(strategy_item)
        
        setattr(self, f"{category_key}_button_group", button_group)
        
        scroll_layout.addStretch()
        scroll_area.setWidget(scroll_widget)
        tab_layout.addWidget(scroll_area)
        
        self.category_tabs.addTab(tab_widget, tab_name)

    def _create_preview_widget(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        preview_widget = QFrame()
        preview_widget.setFrameStyle(QFrame.Shape.Box)
        preview_widget.setMaximumHeight(100)
        preview_layout = QVBoxLayout(preview_widget)
        preview_layout.setContentsMargins(5, 5, 5, 5)
        preview_layout.setSpacing(2)
        
        preview_label = QLabel("üìã –ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        preview_label.setStyleSheet("font-weight: bold; font-size: 9pt;")
        preview_layout.addWidget(preview_label)
        
        self.preview_text = QTextBrowser()
        self.preview_text.setMaximumHeight(60)
        self.preview_text.setStyleSheet("""
            QTextBrowser {
                background: #222;
                border: 1px solid #444;
                font-family: Arial;
                font-size: 8pt;
                color: #aaa;
            }
        """)
        preview_layout.addWidget(self.preview_text)
        
        layout.addWidget(preview_widget, 0)

    def _init_settings_tab(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        # –û—Å–Ω–æ–≤–Ω–æ–π layout –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        tab_layout = QVBoxLayout(self.settings_tab)
        tab_layout.setContentsMargins(0, 0, 0, 0)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameStyle(QFrame.Shape.NoFrame)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background: transparent;
            }
            QScrollBar:vertical {
                width: 12px;
                background: #2a2a2a;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: #555;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #666;
            }
        """)
        
        # –í–∏–¥–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_widget = QWidget()
        layout = QVBoxLayout(scroll_widget)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        title_font = title_label.font()
        title_font.setBold(True)
        title_font.setPointSize(11)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("margin: 5px; color: #2196F3;")
        layout.addWidget(title_label)
        
        # –ì—Ä—É–ø–ø–∞ –º–µ—Ç–æ–¥–æ–≤ –∑–∞–ø—É—Å–∫–∞
        method_group = QGroupBox("–ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        method_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        method_layout = QVBoxLayout(method_group)
        
        self.method_button_group = QButtonGroup()
        
        self.bat_method_radio = QRadioButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ (—á–µ—Ä–µ–∑ .bat —Ñ–∞–π–ª—ã)")
        self.bat_method_radio.setToolTip(
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç .bat —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.\n"
            "–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n"
            "–ú–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–∫–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."
        )
        self.method_button_group.addButton(self.bat_method_radio, 0)
        method_layout.addWidget(self.bat_method_radio)
        
        self.direct_method_radio = QRadioButton("–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        self.direct_method_radio.setToolTip(
            "–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Python.\n"
            "–ù–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É.\n"
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –æ–∫–æ–Ω –∫–æ–Ω—Å–æ–ª–∏."
        )
        self.method_button_group.addButton(self.direct_method_radio, 1)
        method_layout.addWidget(self.direct_method_radio)
        
        current_method = get_strategy_launch_method()
        if current_method == "direct":
            self.direct_method_radio.setChecked(True)
        else:
            self.bat_method_radio.setChecked(True)
        
        self.method_button_group.buttonClicked.connect(self._on_method_changed)
        layout.addWidget(method_group)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
        self._create_launch_params(layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–∞—Ö
        info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        info_layout = QVBoxLayout(info_group)
        
        info_text = QLabel(
            "‚Ä¢ –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
            "‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥: –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –≤–∏–¥–µ .bat —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Ç–æ–¥–∞ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
        info_text.setWordWrap(True)
        info_text.setStyleSheet("padding: 10px; font-weight: normal;")
        info_layout.addWidget(info_text)
        layout.addWidget(info_group)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        auto_update_note = QLabel(
            "üí° –ü–æ—Å–ª–µ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ–º –æ–∫–Ω–µ —Å–ª–µ–¥—É–µ—Ç –ó–ê–ù–û–í–û –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚úÖ –í—ã–±—Ä–∞—Ç—å"
        )
        auto_update_note.setAlignment(Qt.AlignmentFlag.AlignCenter)
        auto_update_note.setWordWrap(True)
        auto_update_note.setStyleSheet(
            "padding: 8px; background: #2196F3; color: white; "
            "border-radius: 5px; font-weight: bold; margin: 5px;"
        )
        layout.addWidget(auto_update_note)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É –≤ –∫–æ–Ω–µ—Ü
        layout.addStretch()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area.setWidget(scroll_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        tab_layout.addWidget(scroll_area)

    def _create_launch_params(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞"""
        params_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞")
        params_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #ffa500;
            }
        """)
        params_layout = QVBoxLayout(params_group)
        params_layout.setSpacing(8)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        warning_label = QLabel("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        warning_label.setStyleSheet("color: #ffa500; font-weight: bold; font-size: 9pt; margin-bottom: 5px;")
        params_layout.addWidget(warning_label)
        
        # –ß–µ–∫–±–æ–∫—Å Game Filter
        game_widget = QWidget()
        game_layout = QVBoxLayout(game_widget)
        game_layout.setContentsMargins(0, 0, 0, 0)
        game_layout.setSpacing(3)
        
        self.ipset_all_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏–≥—Ä (Game Filter)")
        self.ipset_all_checkbox.setToolTip(
            "–†–∞—Å—à–∏—Ä—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ —Å 80,443 –Ω–∞ 80,443,1024-65535\n"
            "–¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Ö–æ—Å—Ç–ª–∏—Å—Ç–∞–º–∏ other.txt.\n"
            "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∏–≥—Ä –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö."
        )
        self.ipset_all_checkbox.setStyleSheet("font-weight: bold;")
        self.ipset_all_checkbox.setChecked(get_game_filter_enabled())
        self.ipset_all_checkbox.stateChanged.connect(self._on_game_filter_changed)
        game_layout.addWidget(self.ipset_all_checkbox)
        
        ipset_info = QLabel("–†–∞—Å—à–∏—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ø–æ—Ä—Ç—ã 1024-65535 –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")
        ipset_info.setWordWrap(True)
        ipset_info.setStyleSheet("padding-left: 20px; color: #aaa; font-size: 8pt;")
        game_layout.addWidget(ipset_info)
        
        params_layout.addWidget(game_widget)
        params_layout.addWidget(self._create_separator())
        
        # –ß–µ–∫–±–æ–∫—Å ipset lists
        ipset_widget = QWidget()
        ipset_layout = QVBoxLayout(ipset_widget)
        ipset_layout.setContentsMargins(0, 0, 0, 0)
        ipset_layout.setSpacing(3)
        
        self.ipset_lists_checkbox = QCheckBox("–î–æ–±–∞–≤–∏—Ç—å ipset-all.txt –∫ —Ö–æ—Å—Ç–ª–∏—Å—Ç–∞–º")
        self.ipset_lists_checkbox.setToolTip(
            "–î–æ–±–∞–≤–ª—è–µ—Ç --ipset=ipset-all.txt –ø–æ—Å–ª–µ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤\n"
            "other.txt, other2.txt –∏ russia-blacklist.txt.\n"
            "–†–∞—Å—à–∏—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ–º—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤."
        )
        self.ipset_lists_checkbox.setStyleSheet("font-weight: bold;")
        from config import get_ipset_lists_enabled
        self.ipset_lists_checkbox.setChecked(get_ipset_lists_enabled())
        self.ipset_lists_checkbox.stateChanged.connect(self._on_ipset_lists_changed)
        ipset_layout.addWidget(self.ipset_lists_checkbox)
        
        ipset_lists_info = QLabel("–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤")
        ipset_lists_info.setWordWrap(True)
        ipset_lists_info.setStyleSheet("padding-left: 20px; color: #aaa; font-size: 8pt;")
        ipset_layout.addWidget(ipset_lists_info)
        
        params_layout.addWidget(ipset_widget)
        params_layout.addWidget(self._create_separator())
        
        # –ß–µ–∫–±–æ–∫—Å wssize
        wssize_widget = QWidget()
        wssize_layout = QVBoxLayout(wssize_widget)
        wssize_layout.setContentsMargins(0, 0, 0, 0)
        wssize_layout.setSpacing(3)
        
        self.wssize_checkbox = QCheckBox("–î–æ–±–∞–≤–∏—Ç—å --wssize=1:6 –¥–ª—è TCP 443")
        self.wssize_checkbox.setToolTip(
            "–í–∫–ª—é—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä --wssize=1:6 –¥–ª—è –≤—Å–µ—Ö TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 443.\n"
            "–ú–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö.\n"
            "–í–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ TCP —Å–µ–≥–º–µ–Ω—Ç–æ–≤."
        )
        self.wssize_checkbox.setStyleSheet("font-weight: bold;")
        self.wssize_checkbox.setChecked(get_wssize_enabled())
        self.wssize_checkbox.stateChanged.connect(self._on_wssize_changed)
        wssize_layout.addWidget(self.wssize_checkbox)
        
        wssize_info = QLabel("–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä TCP –æ–∫–Ω–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ 443, –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –æ–±–æ–π—Ç–∏ DPI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
        wssize_info.setWordWrap(True)
        wssize_info.setStyleSheet("padding-left: 20px; color: #aaa; font-size: 8pt;")
        wssize_layout.addWidget(wssize_info)
        
        params_layout.addWidget(wssize_widget)
        
        # –ú–µ—Å—Ç–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_layout.addSpacing(10)
        future_params_label = QLabel("–î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
        future_params_label.setStyleSheet("color: #666; font-style: italic; padding: 5px; font-size: 8pt;")
        future_params_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        params_layout.addWidget(future_params_label)
        
        layout.addWidget(params_group)

    def _create_separator(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
        separator = QFrame()
        separator.setFrameShape(QFrame.Shape.HLine)
        separator.setFrameShadow(QFrame.Shadow.Sunken)
        separator.setStyleSheet("QFrame { background-color: #444; max-height: 1px; margin: 5px 0; }")
        return separator

    def _on_tab_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫"""
        try:
            if index == 0:  # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
                self.buttons_widget.setVisible(True)
                if self.is_direct_mode:
                    self.select_button.setEnabled(True)
            elif index == 1:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                self.buttons_widget.setVisible(False)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ _on_tab_changed: {e}", "‚ùå ERROR")

    def _on_method_changed(self, button):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞"""
        old_method = self.launch_method
        
        if button == self.direct_method_radio:
            set_strategy_launch_method("direct")
            new_method = "direct"
        else:
            set_strategy_launch_method("bat")
            new_method = "bat"
        
        if old_method != new_method:
            log(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å {old_method} –Ω–∞ {new_method}...", "INFO")
            
            msg = QMessageBox(self)
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("–°–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—É—Å–∫–∞")
            msg.setText("–ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω!")
            msg.setInformativeText("–î–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            msg.setStandardButtons(QMessageBox.StandardButton.Ok)
            msg.exec()
            
            self._schedule_dialog_restart()

    def _schedule_dialog_restart(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞"""
        parent_window = self.parent()
        self.close()
        
        def restart_dialog():
            if parent_window and hasattr(parent_window, '_show_strategy_dialog'):
                parent_window._show_strategy_dialog()
        
        QTimer.singleShot(100, restart_dialog)

    def _on_game_filter_changed(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è ipset-all"""
        enabled = (state == Qt.CheckState.Checked.value)
        set_game_filter_enabled(enabled)
        log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä ipset-all {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}", "INFO")

    def _on_wssize_changed(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è wssize"""
        enabled = (state == Qt.CheckState.Checked.value)
        set_wssize_enabled(enabled)
        log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä --wssize=1:6 {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}", "INFO")

    def _on_ipset_lists_changed(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è ipset lists"""
        from config import set_ipset_lists_enabled
        enabled = (state == Qt.CheckState.Checked.value)
        set_ipset_lists_enabled(enabled)
        log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä ipset-all.txt –¥–ª—è —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}", "INFO")

    def _on_table_strategy_selected(self, strategy_id, strategy_name):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.selected_strategy_id = strategy_id
        self.selected_strategy_name = strategy_name
        self.select_button.setEnabled(True)
        log(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}", "DEBUG")

    def _on_table_strategy_double_clicked(self, strategy_id, strategy_name):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.selected_strategy_id = strategy_id
        self.selected_strategy_name = strategy_name
        self.accept()

    def on_category_selection_changed(self, category, strategy_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.category_selections[category] = strategy_id
        self.update_combined_preview()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        try:
            if category == 'youtube':
                set_direct_strategy_youtube(strategy_id)
            elif category == 'discord':
                set_direct_strategy_discord(strategy_id)
            elif category == 'other':
                set_direct_strategy_other(strategy_id)
            
            log(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ {category} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_id}", "DEBUG")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {category} —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}", "‚ö† WARNING")
        
        self.select_button.setEnabled(True)

    def update_combined_preview(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not hasattr(self, 'preview_text'):
            return
        
        from .strategy_lists_separated import combine_strategies
        
        combined = combine_strategies(
            self.category_selections.get('youtube'),
            self.category_selections.get('discord'),
            self.category_selections.get('other')
        )
        
        active = []
        if self.category_selections.get('youtube') != 'youtube_none':
            active.append("<span style='color: #ff6666;'>YouTube</span>")
        if self.category_selections.get('discord') != 'discord_none':
            active.append("<span style='color: #7289da;'>Discord</span>")
        if self.category_selections.get('other') != 'other_none':
            active.append("<span style='color: #66ff66;'>–û—Å—Ç–∞–ª—å–Ω—ã–µ</span>")
        
        if active:
            preview_html = f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ:</b> {', '.join(active)}"
            args_count = len(combined['args'].split())
            preview_html += f"<br><span style='color: #888; font-size: 7pt;'>–ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {args_count}</span>"
        else:
            preview_html = "<span style='color: #888;'>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π</span>"
        
        self.preview_text.setHtml(f"""
            <style>
                body {{ 
                    margin: 2px; 
                    font-family: Arial; 
                    font-size: 8pt;
                    color: #ccc;
                }}
            </style>
            <body>{preview_html}</body>
        """)

    def load_builtin_strategies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if hasattr(self, 'status_label'):
                self.status_label.setText("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
                self.status_label.setStyleSheet("font-weight: bold; color: #4CAF50; padding: 5px;")
            
            if self.is_direct_mode:
                self.select_button.setEnabled(True)
            
            log("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≥–æ—Ç–æ–≤—ã", "INFO")
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}", "‚ùå ERROR")

    def load_local_strategies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ BAT —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            if hasattr(self, 'strategy_table'):
                self.strategy_table.set_progress_visible(True)
                self.strategy_table.set_status("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...", "info")
            
            strategies = self.strategy_manager.get_local_strategies_only()
            
            if strategies and hasattr(self, 'strategy_table'):
                self.strategy_table.populate_strategies(strategies)
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.strategy_table.set_progress_visible(False)
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if self.current_strategy_name:
                    self.strategy_table.select_strategy_by_name(self.current_strategy_name)
                
                log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(strategies)} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "INFO")
            else:
                self.strategy_table.set_status(
                    "‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å'", 
                    "warning"
                )
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                self.strategy_table.set_progress_visible(False)
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}", "‚ùå ERROR")
            if hasattr(self, 'strategy_table'):
                self.strategy_table.set_status(f"‚ùå –û—à–∏–±–∫–∞: {e}", "error")
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.strategy_table.set_progress_visible(False)

    def refresh_strategies(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        if self.is_loading_strategies:
            QMessageBox.information(self, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", 
                                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        
        if self.is_direct_mode:
            self.load_builtin_strategies()
            return
        
        self.is_loading_strategies = True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.strategy_table.set_status("üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...", "info")
        self.strategy_table.set_progress_visible(True)
        self.strategy_table.refresh_button.setEnabled(False)
        self.strategy_table.download_all_button.setEnabled(False)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.loader_thread = QThread()
        self.loader_worker = InternetStrategyLoader(self.strategy_manager)
        self.loader_worker.moveToThread(self.loader_thread)
        
        self.loader_thread.started.connect(self.loader_worker.run)
        self.loader_worker.progress.connect(
            lambda msg: self.strategy_table.set_status(f"üîÑ {msg}", "info")
        )
        self.loader_worker.finished.connect(self._on_strategies_loaded)
        self.loader_worker.finished.connect(self.loader_thread.quit)
        self.loader_worker.finished.connect(self.loader_worker.deleteLater)
        self.loader_thread.finished.connect(self.loader_thread.deleteLater)
        
        self.loader_thread.start()
        log("–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "INFO")

    def _on_strategies_loaded(self, strategies, error_message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        self.is_loading_strategies = False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI
        self.strategy_table.set_progress_visible(False)
        self.strategy_table.refresh_button.setEnabled(True)
        self.strategy_table.download_all_button.setEnabled(True)
        
        if error_message:
            self.strategy_table.set_status(f"‚ùå {error_message}", "error")
            return
        
        if not strategies:
            self.strategy_table.set_status("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—É—Å—Ç", "warning")
            return
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.strategy_table.populate_strategies(strategies)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if self.current_strategy_name:
            self.strategy_table.select_strategy_by_name(self.current_strategy_name)
        
        log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(strategies)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "INFO")

    def accept(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.is_direct_mode:
            # –†–µ–∂–∏–º –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            from .strategy_lists_separated import combine_strategies, get_default_selections
            
            if not self.category_selections:
                self.category_selections = get_default_selections()
            
            combined = combine_strategies(
                self.category_selections.get('youtube'),
                self.category_selections.get('discord'),
                self.category_selections.get('other')
            )
            
            self.selected_strategy_id = "COMBINED_DIRECT"
            self.selected_strategy_name = combined['description']
            self._combined_args = combined['args']
            self._combined_strategy_data = combined
            
            log(f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.selected_strategy_name}", "INFO")
            
        else:
            # BAT —Ä–µ–∂–∏–º
            if not self.selected_strategy_id or not self.selected_strategy_name:
                QMessageBox.warning(self, "–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", 
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
                return
            
            log(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.selected_strategy_name}", "INFO")
        
        self.strategySelected.emit(self.selected_strategy_id, self.selected_strategy_name)
        self.close()

    def reject(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –≤—ã–±–æ—Ä–∞"""
        self.close()
        log("–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω", "INFO")

    def closeEvent(self, event):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø—É—â–µ–Ω—ã
        if self.loader_thread and self.loader_thread.isRunning():
            self.loader_thread.terminate()
            self.loader_thread.wait(2000)
        
        event.accept()