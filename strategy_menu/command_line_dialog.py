"""
–î–∏–∞–ª–æ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ Zapret
"""

from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, 
                            QLabel, QMessageBox, QTextEdit, QApplication, QFileDialog)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont, QTextOption  # –î–æ–±–∞–≤–∏–ª–∏ QTextOption
from datetime import datetime
import shlex
import os

from log import log
from config import WINWS_EXE


class CommandLineDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_selector = parent
        self.command_line = None
        
        self.setWindowTitle("üìã –ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ Zapret")
        self.setFixedSize(500, 500)
        self.setModal(True)
        
        self._init_ui()
        self._generate_command()
        
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ winws.exe:")
        title_label.setStyleSheet("font-weight: bold; font-size: 10pt; color: #2196F3; margin-bottom: 5px;")
        layout.addWidget(title_label)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.info_label = QLabel("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏...")
        self.info_label.setStyleSheet("color: #888; font-size: 9pt; margin-bottom: 10px;")
        layout.addWidget(self.info_label)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        self.text_edit = QTextEdit()
        self.text_edit.setReadOnly(True)
        self.text_edit.setFont(QFont("Consolas", 9))
        self.text_edit.setStyleSheet("""
            QTextEdit {
                background: #1e1e1e;
                color: #d4d4d4;
                border: 1px solid #444;
                border-radius: 5px;
                padding: 10px;
                selection-background-color: #2196F3;
            }
            QScrollBar:vertical {
                width: 10px;
                background: #2a2a2a;
            }
            QScrollBar::handle:vertical {
                background: #555;
                border-radius: 5px;
            }
        """)
        self.text_edit.setWordWrapMode(QTextOption.WrapMode.WrapAnywhere)
        layout.addWidget(self.text_edit)
        
        # –ö–Ω–æ–ø–∫–∏
        self._create_buttons(layout)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_label = QLabel("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Zapret –≤—Ä—É—á–Ω—É—é –∏–∑ cmd")
        hint_label.setStyleSheet("color: #666; font-style: italic; margin-top: 5px;")
        hint_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(hint_label)
        
    def _create_buttons(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(10)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.copy_button = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä")
        self.copy_button.setMinimumHeight(35)
        self.copy_button.setEnabled(False)
        self.copy_button.setStyleSheet("""
            QPushButton {
                background: #2196F3;
                color: white;
                border-radius: 4px;
                padding: 8px 15px;
                font-weight: bold;
                font-size: 10pt;
            }
            QPushButton:hover:enabled {
                background: #1976D2;
            }
            QPushButton:pressed {
                background: #1565C0;
            }
            QPushButton:disabled {
                background: #666;
                color: #aaa;
            }
        """)
        self.copy_button.clicked.connect(self._copy_to_clipboard)
        buttons_layout.addWidget(self.copy_button)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        self.save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª")
        self.save_button.setMinimumHeight(35)
        self.save_button.setEnabled(False)
        self.save_button.setStyleSheet("""
            QPushButton {
                background: #4CAF50;
                color: white;
                border-radius: 4px;
                padding: 8px 15px;
                font-weight: bold;
                font-size: 10pt;
            }
            QPushButton:hover:enabled {
                background: #45a049;
            }
            QPushButton:disabled {
                background: #666;
                color: #aaa;
            }
        """)
        self.save_button.clicked.connect(self._save_to_file)
        buttons_layout.addWidget(self.save_button)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_button.setMinimumHeight(35)
        close_button.setStyleSheet("""
            QPushButton {
                background: #444;
                color: white;
                border-radius: 4px;
                padding: 8px 15px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #555;
            }
        """)
        close_button.clicked.connect(self.accept)
        buttons_layout.addWidget(close_button)
        
        layout.addLayout(buttons_layout)
        
    def _generate_command(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        try:
            if not self.parent_selector:
                self._show_error("–ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞")
                return
                
            if self.parent_selector.is_direct_mode:
                self._generate_direct_mode_command()
            else:
                self._generate_bat_mode_command()
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {e}", "ERROR")
            self._show_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            
    def _generate_direct_mode_command(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è Direct —Ä–µ–∂–∏–º–∞"""
        from strategy_menu.strategy_lists_separated import combine_strategies
        from strategy_menu.strategy_runner import (
            apply_allzone_replacement, 
            apply_game_filter_parameter, 
            apply_wssize_parameter
        )
        
        if not self.parent_selector.category_selections:
            self._show_error("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            return
            
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        combined = combine_strategies(
            self.parent_selector.category_selections.get('youtube'),
            self.parent_selector.category_selections.get('youtube_udp'),
            self.parent_selector.category_selections.get('googlevideo_tcp'),
            self.parent_selector.category_selections.get('discord'),
            self.parent_selector.category_selections.get('discord_voice_udp'),
            self.parent_selector.category_selections.get('rutracker_tcp'),
            self.parent_selector.category_selections.get('ntcparty_tcp'),
            self.parent_selector.category_selections.get('twitch_tcp'),
            self.parent_selector.category_selections.get('phasmophobia_udp'),
            self.parent_selector.category_selections.get('other'),
            self.parent_selector.category_selections.get('hostlist_80port'),
            self.parent_selector.category_selections.get('ipset'),
            self.parent_selector.category_selections.get('ipset_udp')
        )
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = shlex.split(combined['args'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        work_dir = os.path.dirname(os.path.dirname(WINWS_EXE))
        lists_dir = os.path.join(work_dir, "lists")
        
        args = apply_allzone_replacement(args)
        args = apply_game_filter_parameter(args, lists_dir)
        args = apply_wssize_parameter(args)
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        resolved_args = self._resolve_file_paths(args, work_dir)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        cmd_parts = [WINWS_EXE] + resolved_args
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        full_cmd_parts = []
        for arg in cmd_parts:
            if ' ' in arg and not (arg.startswith('"') and arg.endswith('"')):
                full_cmd_parts.append(f'"{arg}"')
            else:
                full_cmd_parts.append(arg)
        
        self.command_line = ' '.join(full_cmd_parts)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.text_edit.setPlainText(self.command_line)
        self.info_label.setText(
            f"–î–ª–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã: {len(self.command_line)} —Å–∏–º–≤–æ–ª–æ–≤ | "
            f"–ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {len(resolved_args)} | "
            f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {combined['description']}"
        )
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.copy_button.setEnabled(True)
        self.save_button.setEnabled(True)
        
    def _generate_bat_mode_command(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è BAT —Ä–µ–∂–∏–º–∞"""
        # –î–ª—è BAT —Ä–µ–∂–∏–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_text = """BAT —Ä–µ–∂–∏–º: –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è .bat —Ñ–∞–π–ª–æ–º

–í BAT —Ä–µ–∂–∏–º–µ –ø–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ .bat —Ñ–∞–π–ª–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É:
1. –û—Ç–∫—Ä–æ–π—Ç–µ .bat —Ñ–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
2. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å "%WINWS1%"
3. –ò–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ "–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö

–ü—É—Ç—å –∫ .bat —Ñ–∞–π–ª–∞–º: strategies\\"""
        
        self.text_edit.setPlainText(info_text)
        self.info_label.setText("BAT —Ä–µ–∂–∏–º - –∫–æ–º–∞–Ω–¥–∞ –≤–Ω—É—Ç—Ä–∏ .bat —Ñ–∞–π–ª–∞")
        
    def _resolve_file_paths(self, args, work_dir):
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º"""
        resolved = []
        lists_dir = os.path.join(work_dir, "lists")
        bin_dir = os.path.join(work_dir, "bin")
        
        for arg in args:
            if arg.startswith("--hostlist=") or arg.startswith("--ipset="):
                prefix, filename = arg.split("=", 1)
                filename = filename.strip('"')
                if not os.path.isabs(filename):
                    full_path = os.path.join(lists_dir, filename)
                    resolved.append(f'{prefix}={full_path}')
                else:
                    resolved.append(arg)
                    
            elif any(arg.startswith(p) for p in [
                "--dpi-desync-fake-tls=", "--dpi-desync-fake-quic=",
                "--dpi-desync-fake-syndata=", "--dpi-desync-fake-unknown-udp="
            ]):
                prefix, filename = arg.split("=", 1)
                if not filename.startswith("0x") and not filename.startswith("!") and not os.path.isabs(filename):
                    filename = filename.strip('"')
                    full_path = os.path.join(bin_dir, filename)
                    resolved.append(f'{prefix}={full_path}')
                else:
                    resolved.append(arg)
            else:
                resolved.append(arg)
        
        return resolved
        
    def _show_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.text_edit.setPlainText(f"‚ùå –û—à–∏–±–∫–∞: {message}")
        self.info_label.setText("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
        self.text_edit.setStyleSheet(self.text_edit.styleSheet() + """
            QTextEdit {
                color: #ff6666;
            }
        """)
        
    def _copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if not self.command_line:
            return
            
        clipboard = QApplication.clipboard()
        clipboard.setText(self.command_line)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setWindowTitle("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
        msg.setText("–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg.exec()
        
        log("–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", "INFO")
        
    def _save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª"""
        if not self.command_line:
            return
            
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        suggested_name = f"zapret_command_{timestamp}.txt"
        
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É",
            suggested_name,
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt);;–ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ñ–∞–π–ª—ã (*.cmd);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"REM Zapret –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞\n")
                    f.write(f"REM –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    
                    if self.parent_selector.is_direct_mode:
                        strategy_name = "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (Direct mode)"
                    else:
                        strategy_name = self.parent_selector.selected_strategy_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
                    
                    f.write(f"REM –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}\n\n")
                    f.write(self.command_line)
                
                QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", 
                                      f"–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:\n{file_path}")
                log(f"–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path}", "INFO")
                
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", 
                                   f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")
                log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {e}", "ERROR")


def show_command_line_dialog(parent_selector):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
    dialog = CommandLineDialog(parent_selector)
    dialog.exec()