# strategy_menu/strategy_table_widget_favorites.py

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, 
                            QTableWidgetItem, QPushButton, QProgressBar, QLabel,
                            QMenu, QMessageBox, QApplication, QAbstractItemView, 
                            QHeaderView, QToolButton)
from PyQt6.QtCore import Qt, pyqtSignal, QPoint, QThread, QObject, QTimer
from PyQt6.QtGui import QAction, QFont, QColor, QBrush

from log import log
from .table_builder import StrategyTableBuilder
from .dialogs import StrategyInfoDialog
from .workers import StrategyFilesDownloader
from .strategy_table_widget import SingleDownloadWorker, StrategyTableWidget


class FavoriteStrategyTableWidget(StrategyTableWidget):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    favorites_changed = pyqtSignal(int)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    
    def __init__(self, strategy_manager=None, parent=None):
        super().__init__(strategy_manager, parent)
        self.favorites_count = 0
        self._add_favorites_ui()
    
    def _add_favorites_ui(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        if hasattr(self, 'status_label'):
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            status_container = QWidget()
            status_layout = QHBoxLayout(status_container)
            status_layout.setContentsMargins(0, 0, 0, 0)
            status_layout.setSpacing(10)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –ª–µ–π–±–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.status_label.setParent(None)
            status_layout.addWidget(self.status_label)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            self.favorites_label = QLabel("")
            self.favorites_label.setStyleSheet(
                "font-weight: bold; color: #ffd700; font-size: 9pt; padding: 3px;"
            )
            self.favorites_label.setFixedHeight(25)
            status_layout.addWidget(self.favorites_label)
            
            status_layout.addStretch()
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –º–µ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å –ª–µ–π–±–ª–∞
            parent_layout = self.layout()
            parent_layout.insertWidget(0, status_container)
    
    def populate_strategies(self, strategies):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ —Å —É—á–µ—Ç–æ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–≤–µ—Ä—Ö—É
        sorted_strategies = self._sort_strategies_with_favorites(strategies)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        super().populate_strategies(sorted_strategies)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        self._update_favorites_count()
        
        # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self._highlight_favorite_strategies()
    
    def _sort_strategies_with_favorites(self, strategies):
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É"""
        from strategy_menu import is_favorite_strategy
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ
        favorites = {}
        regular = {}
        
        for strat_id, strat_data in strategies.items():
            if is_favorite_strategy(strat_id):
                favorites[strat_id] = strat_data
            else:
                regular[strat_id] = strat_data
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ
        sorted_strategies = {}
        sorted_strategies.update(favorites)
        sorted_strategies.update(regular)
        
        return sorted_strategies
    
    def _highlight_favorite_strategies(self):
        """–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        from strategy_menu import is_favorite_strategy
        
        for row, strategy_info in self.strategies_map.items():
            strategy_id = strategy_info['id']
            
            if is_favorite_strategy(strategy_id):
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
                name_item = self.table.item(row, 0)
                if name_item and not name_item.text().startswith("‚≠ê"):
                    name_item.setText(f"‚≠ê {name_item.text()}")
                
                # –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º —Ü–≤–µ—Ç–æ–º
                for col in range(self.table.columnCount()):
                    item = self.table.item(row, col)
                    if item:
                        # –°–≤–µ—Ç–ª—ã–π –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ñ–æ–Ω –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
                        item.setBackground(QBrush(QColor(50, 45, 20)))  # –¢–µ–º–Ω–æ-–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    
    def _update_favorites_count(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        from strategy_menu import get_favorite_strategies
        
        favorites = get_favorite_strategies()
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
        self.favorites_count = len([
            f for f in favorites 
            if any(info['id'] == f for info in self.strategies_map.values())
        ])
        
        if self.favorites_count > 0:
            self.favorites_label.setText(f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö: {self.favorites_count}")
        else:
            self.favorites_label.setText("")
        
        self.favorites_changed.emit(self.favorites_count)
    
    def _show_context_menu(self, position: QPoint):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏–µ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        if not self.table.isEnabled():
            return
        
        item = self.table.itemAt(position)
        if not item:
            return
        
        row = item.row()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if row < 0 or row not in self.strategies_map:
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –≤—ã–±–∏—Ä–∞–µ–º —Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏
        if not self.selected_strategy_id:
            self.table.selectRow(row)
        
        strategy_id = self.strategies_map[row]['id']
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        context_menu = QMenu(self)
        context_menu.setStyleSheet(self._get_context_menu_style())
        
        # –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        from strategy_menu import is_favorite_strategy
        is_favorite = is_favorite_strategy(strategy_id)
        
        favorite_action = QAction("‚≠ê –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö" if is_favorite else "‚òÜ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ", self)
        favorite_action.triggered.connect(lambda: self._toggle_favorite(strategy_id))
        context_menu.addAction(favorite_action)
        
        context_menu.addSeparator()
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_action = QAction("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", self)
        info_action.triggered.connect(self.show_strategy_info)
        info_action.setEnabled(self.selected_strategy_id is not None)
        context_menu.addAction(info_action)
        
        context_menu.addSeparator()
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è
        copy_name_action = QAction("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", self)
        copy_name_action.triggered.connect(self._copy_strategy_name)
        context_menu.addAction(copy_name_action)
        
        # –°–∫–∞—á–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å
        if row in self.strategies_map and self.strategy_manager:
            strategies = self.strategy_manager.get_local_strategies_only()
            
            if strategy_id in strategies:
                version_status = self.strategy_manager.check_strategy_version_status(strategy_id)
                
                if version_status in ['not_downloaded', 'outdated']:
                    download_action = QAction("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å", self)
                    download_action.triggered.connect(lambda: self._download_single_strategy(strategy_id))
                    context_menu.addAction(download_action)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        global_pos = self.table.mapToGlobal(position)
        context_menu.exec(global_pos)
    
    def _toggle_favorite(self, strategy_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        from strategy_menu import toggle_favorite_strategy, is_favorite_strategy
        
        was_favorite = is_favorite_strategy(strategy_id)
        toggle_favorite_strategy(strategy_id)
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for row, info in self.strategies_map.items():
            if info['id'] == strategy_id:
                name_item = self.table.item(row, 0)
                if name_item:
                    current_text = name_item.text()
                    
                    if was_favorite:
                        # –£–¥–∞–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É
                        if current_text.startswith("‚≠ê "):
                            name_item.setText(current_text[2:])
                        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
                        for col in range(self.table.columnCount()):
                            item = self.table.item(row, col)
                            if item:
                                item.setBackground(QBrush())  # –°–±—Ä–æ—Å —Ñ–æ–Ω–∞
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É
                        if not current_text.startswith("‚≠ê"):
                            name_item.setText(f"‚≠ê {current_text}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
                        for col in range(self.table.columnCount()):
                            item = self.table.item(row, col)
                            if item:
                                item.setBackground(QBrush(QColor(50, 45, 20)))
                
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self._update_favorites_count()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤" if not was_favorite else "—É–¥–∞–ª–µ–Ω–∞ –∏–∑"
        strategy_name = self.strategies_map.get(row, {}).get('name', strategy_id)
        log(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' {action} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö", "INFO")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_text = f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ" if not was_favorite else "‚òÜ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"
        self.set_status(status_text, "success")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(2000, lambda: self.set_status("‚úÖ –ì–æ—Ç–æ–≤–æ", "success"))
    
    def refresh_favorites(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        # –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        if self.strategies_map:
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
            current_strategies = {}
            for info in self.strategies_map.values():
                if 'id' in info and 'name' in info:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    current_strategies[info['id']] = {
                        'name': info['name'],
                        'description': info.get('description', ''),
                        'provider': info.get('provider', 'Unknown'),
                        'label': info.get('label', '')
                    }
            
            # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —É—á–µ—Ç–æ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            self.populate_strategies(current_strategies)


class StrategyTableWithFavoritesFilter(FavoriteStrategyTableWidget):
    """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, strategy_manager=None, parent=None):
        super().__init__(strategy_manager, parent)
        self._show_only_favorites = False
        self._all_strategies = {}
        self._add_filter_ui()
    
    def _add_filter_ui(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç UI –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        # –ù–∞—Ö–æ–¥–∏–º layout —Å –∫–Ω–æ–ø–∫–∞–º–∏
        buttons_layout = None
        for i in range(self.layout().count()):
            item = self.layout().itemAt(i)
            if item and item.layout():
                # –ò—â–µ–º layout —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                for j in range(item.layout().count()):
                    widget = item.layout().itemAt(j).widget()
                    if isinstance(widget, QPushButton) and widget.text() == "üåê –û–±–Ω–æ–≤–∏—Ç—å":
                        buttons_layout = item.layout()
                        break
        
        if buttons_layout:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ"
            self.filter_favorites_btn = QPushButton("‚≠ê –¢–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ")
            self.filter_favorites_btn.setCheckable(True)
            self.filter_favorites_btn.setFixedHeight(25)
            self.filter_favorites_btn.setStyleSheet("""
                QPushButton {
                    background-color: #3a3a3a;
                    color: #ffffff;
                    border: 1px solid #555;
                    border-radius: 3px;
                    padding: 3px 10px;
                    font-size: 9pt;
                }
                QPushButton:hover {
                    background-color: #454545;
                    border: 1px solid #ffd700;
                }
                QPushButton:checked {
                    background-color: #4a4520;
                    border: 1px solid #ffd700;
                    color: #ffd700;
                }
            """)
            self.filter_favorites_btn.toggled.connect(self._toggle_favorites_filter)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ"
            buttons_layout.insertWidget(3, self.filter_favorites_btn)
    
    def _toggle_favorites_filter(self, checked):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"""
        self._show_only_favorites = checked
        
        if checked:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
            from strategy_menu import get_favorite_strategies
            favorites = get_favorite_strategies()
            
            filtered_strategies = {
                sid: sdata 
                for sid, sdata in self._all_strategies.items() 
                if sid in favorites
            }
            
            if filtered_strategies:
                super().populate_strategies(filtered_strategies)
                self.set_status(f"‚≠ê –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ({len(filtered_strategies)})", "info")
            else:
                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
                self.strategies_map.clear()
                self.table.setRowCount(0)
                self.set_status("‚≠ê –ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "warning")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            super().populate_strategies(self._all_strategies)
            self.set_status(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ({len(self._all_strategies)})", "success")
    
    def populate_strategies(self, strategies):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É"""
        self._all_strategies = strategies.copy()
        
        if self._show_only_favorites:
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–∏–ª—å—Ç—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
            self._toggle_favorites_filter(True)
        else:
            super().populate_strategies(strategies)