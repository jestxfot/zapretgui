# strategy_menu/hostlists_tab.py

import os
import re
from typing import List, Dict, Set
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                            QCheckBox, QGroupBox, QPushButton,
                            QFrame, QMessageBox, QLineEdit,
                            QListWidget, QListWidgetItem, QSplitter,
                            QGridLayout)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont

from log import log
from config import OTHER_PATH, OTHER2_PATH, LISTS_FOLDER
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –∏–∑ hostlists_manager
from utils.hostlists_manager import (
    PREDEFINED_DOMAINS, 
    get_base_domains,
    save_hostlists_settings,
    load_hostlists_settings
)


class HostlistsTab(QWidget):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–ª–∏—Å—Ç–∞–º–∏"""
    
    hostlists_changed = pyqtSignal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.selected_services = set()
        self.custom_domains = []
        self.init_ui()
        self.load_existing_domains()
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –¥–æ–º–µ–Ω–æ–≤")
        title.setStyleSheet("font-weight: bold; font-size: 10pt; color: #2196F3;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –¥–≤—É—Ö –ø–∞–Ω–µ–ª–µ–π
        splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        predefined_widget = self._create_predefined_panel()
        splitter.addWidget(predefined_widget)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        custom_widget = self._create_custom_panel()
        splitter.addWidget(custom_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ 40/60
        splitter.setSizes([300, 400])
        
        layout.addWidget(splitter, 1)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(5)
        
        self.apply_button = QPushButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        self.apply_button.setStyleSheet("""
            QPushButton {
                background: #4CAF50;
                color: white;
                font-weight: bold;
                padding: 5px;
                border-radius: 3px;
                font-size: 9pt;
            }
            QPushButton:hover {
                background: #45a049;
            }
        """)
        self.apply_button.setFixedHeight(28)
        self.apply_button.clicked.connect(self.apply_changes)
        buttons_layout.addWidget(self.apply_button)
        
        self.reload_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.reload_button.setFixedHeight(28)
        self.reload_button.setStyleSheet("font-size: 9pt;")
        self.reload_button.clicked.connect(self.reload_domains)
        buttons_layout.addWidget(self.reload_button)
        
        layout.addLayout(buttons_layout)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_label.setStyleSheet("color: #888; font-size: 8pt;")
        self.status_label.setFixedHeight(20)
        layout.addWidget(self.status_label)
    
    def _create_predefined_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
        group = QGroupBox("–°–µ—Ä–≤–∏—Å—ã –¥–ª—è other.txt")
        group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 9pt;
                border: 1px solid #444;
                border-radius: 3px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        group_layout = QVBoxLayout(group)
        group_layout.setSpacing(3)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
        grid_layout = QGridLayout()
        grid_layout.setSpacing(5)
        
        self.service_checkboxes = {}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PREDEFINED_DOMAINS –∏–∑ hostlists_manager
        for idx, (service_id, service_data) in enumerate(PREDEFINED_DOMAINS.items()):
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —á–µ–∫–±–æ–∫—Å
            checkbox = QCheckBox(service_data['name'])
            checkbox.setStyleSheet("font-size: 9pt;")
            checkbox.setToolTip(f"{len(service_data['domains'])} –¥–æ–º–µ–Ω–æ–≤\n–ü—Ä–∏–º–µ—Ä—ã: {', '.join(service_data['domains'][:3])}...")
            self.service_checkboxes[service_id] = checkbox
            
            # –†–∞–∑–º–µ—â–∞–µ–º –≤ —Å–µ—Ç–∫–µ 2x2
            row = idx // 2
            col = idx % 2
            grid_layout.addWidget(checkbox, row, col)
        
        group_layout.addLayout(grid_layout)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        info_label.setWordWrap(True)
        info_label.setStyleSheet("color: #888; font-size: 8pt; margin-top: 5px;")
        group_layout.addWidget(info_label)
        
        group_layout.addStretch()
        layout.addWidget(group)
        
        return widget
    
    def _create_custom_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
        group = QGroupBox("–°–≤–æ–∏ –¥–æ–º–µ–Ω—ã –¥–ª—è other2.txt")
        group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 9pt;
                border: 1px solid #444;
                border-radius: 3px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        group_layout = QVBoxLayout(group)
        group_layout.setSpacing(3)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        input_layout = QHBoxLayout()
        input_layout.setSpacing(3)
        
        self.domain_input = QLineEdit()
        self.domain_input.setPlaceholderText("example.com")
        self.domain_input.setStyleSheet("""
            QLineEdit {
                padding: 3px;
                border: 1px solid #555;
                border-radius: 2px;
                background: #2a2a2a;
                font-size: 9pt;
            }
            QLineEdit:focus {
                border: 1px solid #2196F3;
            }
        """)
        self.domain_input.setFixedHeight(24)
        self.domain_input.returnPressed.connect(self.add_custom_domain)
        input_layout.addWidget(self.domain_input)
        
        self.add_button = QPushButton("‚ûï")
        self.add_button.clicked.connect(self.add_custom_domain)
        self.add_button.setFixedSize(24, 24)
        self.add_button.setToolTip("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω")
        input_layout.addWidget(self.add_button)
        
        group_layout.addLayout(input_layout)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
        self.custom_list = QListWidget()
        self.custom_list.setStyleSheet("""
            QListWidget {
                border: 1px solid #333;
                background: #2a2a2a;
                padding: 2px;
                font-size: 9pt;
            }
            QListWidget::item {
                padding: 2px;
                border-bottom: 1px solid #333;
            }
            QListWidget::item:selected {
                background: #3a3a3a;
            }
            QListWidget::item:hover {
                background: #353535;
            }
        """)
        self.custom_list.setSelectionMode(QListWidget.SelectionMode.ExtendedSelection)
        group_layout.addWidget(self.custom_list, 1)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        list_buttons = QHBoxLayout()
        list_buttons.setSpacing(3)
        
        self.remove_button = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        self.remove_button.clicked.connect(self.remove_selected_domains)
        self.remove_button.setFixedHeight(22)
        self.remove_button.setStyleSheet("font-size: 8pt;")
        list_buttons.addWidget(self.remove_button)
        
        self.clear_button = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_button.clicked.connect(self.clear_custom_domains)
        self.clear_button.setFixedHeight(22)
        self.clear_button.setStyleSheet("font-size: 8pt;")
        list_buttons.addWidget(self.clear_button)
        
        group_layout.addLayout(list_buttons)
        
        layout.addWidget(group)
        return widget
    
    def normalize_domain(self, domain: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–æ–º–µ–Ω, —É–±–∏—Ä–∞—è –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ www"""
        domain = domain.strip()
        domain = re.sub(r'^https?://', '', domain, flags=re.IGNORECASE)
        domain = re.sub(r'^www\.', '', domain, flags=re.IGNORECASE)
        domain = domain.split('/')[0]
        domain = domain.split(':')[0]
        return domain.lower()
    
    def validate_domain(self, domain: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞"""
        pattern = r'^[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,}$'
        return bool(re.match(pattern, domain))
    
    def add_custom_domain(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–æ–º–µ–Ω –≤ —Å–ø–∏—Å–æ–∫"""
        domain = self.domain_input.text().strip()
        if not domain:
            return
        
        normalized = self.normalize_domain(domain)
        
        if not self.validate_domain(normalized):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", 
                              f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {normalized}")
            return
        
        if normalized in self.custom_domains:
            self.status_label.setText(f"–£–∂–µ –µ—Å—Ç—å: {normalized}")
            return
        
        self.custom_domains.append(normalized)
        self.custom_list.addItem(normalized)
        self.domain_input.clear()
        
        self.status_label.setText(f"–î–æ–±–∞–≤–ª–µ–Ω: {normalized}")
        log(f"–î–æ–±–∞–≤–ª–µ–Ω –¥–æ–º–µ–Ω: {normalized}", "INFO")
    
    def remove_selected_domains(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã"""
        items = self.custom_list.selectedItems()
        if not items:
            return
        
        for item in items:
            domain = item.text()
            self.custom_domains.remove(domain)
            self.custom_list.takeItem(self.custom_list.row(item))
        
        self.status_label.setText(f"–£–¥–∞–ª–µ–Ω–æ: {len(items)}")
    
    def clear_custom_domains(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤"""
        if not self.custom_domains:
            return
        
        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                    "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ?",
                                    QMessageBox.StandardButton.Yes | 
                                    QMessageBox.StandardButton.No)
        
        if reply == QMessageBox.StandardButton.Yes:
            self.custom_domains.clear()
            self.custom_list.clear()
            self.status_label.setText("–û—á–∏—â–µ–Ω–æ")
    
    def load_existing_domains(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–º–µ–Ω—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            selected_services, custom_domains = load_hostlists_settings()
            
            if selected_services:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                for service_id in selected_services:
                    if service_id in self.service_checkboxes:
                        self.service_checkboxes[service_id].setChecked(True)
                        self.selected_services.add(service_id)
                log(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {selected_services}", "INFO")
            
            if custom_domains:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                self.custom_domains = custom_domains
                for domain in custom_domains:
                    self.custom_list.addItem(domain)
                log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(custom_domains)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞", "INFO")
            
            # –ï—Å–ª–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –ø—É—Å—Ç–æ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–æ–≤ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            if not selected_services and not custom_domains:
                self._load_from_files()
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ö† WARNING")
            self._load_from_files()
    
    def _load_from_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ (fallback –º–µ—Ç–æ–¥)"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º other2.txt
        try:
            if os.path.exists(OTHER2_PATH):
                with open(OTHER2_PATH, 'r', encoding='utf-8') as f:
                    domains = [line.strip() for line in f if line.strip()]
                    self.custom_domains = domains
                    for domain in domains:
                        self.custom_list.addItem(domain)
                    log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(domains)} –¥–æ–º–µ–Ω–æ–≤ –∏–∑ other2.txt", "INFO")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ other2.txt: {e}", "‚ö† WARNING")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º other.txt
        try:
            if os.path.exists(OTHER_PATH):
                with open(OTHER_PATH, 'r', encoding='utf-8') as f:
                    existing_domains = set(line.strip() for line in f if line.strip())
                
                for service_id, service_data in PREDEFINED_DOMAINS.items():
                    service_domains = set(service_data['domains'])
                    if len(service_domains & existing_domains) >= len(service_domains) * 0.5:
                        self.service_checkboxes[service_id].setChecked(True)
                        self.selected_services.add(service_id)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ other.txt: {e}", "‚ö† WARNING")
    
    def apply_changes(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Ñ–∞–π–ª–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            selected_services = set()
            for service_id, checkbox in self.service_checkboxes.items():
                if checkbox.isChecked():
                    selected_services.add(service_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä
            if not save_hostlists_settings(selected_services, self.custom_domains):
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                  "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º other.txt
            selected_domains = set(get_base_domains())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            for service_id in selected_services:
                if service_id in PREDEFINED_DOMAINS:
                    selected_domains.update(PREDEFINED_DOMAINS[service_id]['domains'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
            with open(OTHER_PATH, 'w', encoding='utf-8') as f:
                for domain in sorted(selected_domains):
                    f.write(f"{domain}\n")
            
            with open(OTHER2_PATH, 'w', encoding='utf-8') as f:
                for domain in sorted(self.custom_domains):
                    f.write(f"{domain}\n")
            
            self.status_label.setText("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            self.status_label.setStyleSheet("color: #4CAF50; font-weight: bold; font-size: 8pt;")
            
            self.hostlists_changed.emit()
            
            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", 
                                  f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\nother.txt: {len(selected_domains)} –¥–æ–º–µ–Ω–æ–≤\n"
                                  f"other2.txt: {len(self.custom_domains)} –¥–æ–º–µ–Ω–æ–≤")
            
            log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä –∏ —Ñ–∞–π–ª—ã", "‚úÖ SUCCESS")
            
        except Exception as e:
            self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "‚ùå ERROR")
    
    def reload_domains(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        self.custom_domains.clear()
        self.custom_list.clear()
        self.selected_services.clear()
        
        for checkbox in self.service_checkboxes.values():
            checkbox.setChecked(False)
        
        self.load_existing_domains()
        self.status_label.setText("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ")