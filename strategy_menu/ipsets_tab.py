# strategy_menu/ipsets_tab.py

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                            QGroupBox, QTextEdit, QLabel, QCheckBox,
                            QScrollArea, QMessageBox, QSplitter)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont, QTextCharFormat, QColor, QTextCursor

from log import log
from utils.ipsets_manager import (
    PREDEFINED_IP_RANGES, save_ipsets_settings, load_ipsets_settings,
    rebuild_ipsets_from_registry, ensure_ipsets_exist, get_base_ips
)


class IpsetsTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏ IP-–∞–¥—Ä–µ—Å–æ–≤"""
    
    ipsets_changed = pyqtSignal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.selected_services = set()
        self.custom_ips = []
        self.init_ui()
        self.load_settings()
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ IP-–∞–¥—Ä–µ—Å–æ–≤ (IPsets)")
        title.setStyleSheet("font-weight: bold; font-size: 11pt; color: #2196F3;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc = QLabel(
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å IP-–∞–¥—Ä–µ—Å–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.\n"
            "–ë–∞–∑–æ–≤—ã–µ IP –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ ipset-base.txt\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ IP —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ ipset-all2.txt"
        )
        desc.setWordWrap(True)
        desc.setStyleSheet("color: #aaa; padding: 5px;")
        layout.addWidget(desc)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø
        splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # –ì—Ä—É–ø–ø–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö IP –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        services_group = QGroupBox("üì¶ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã")
        services_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        services_layout = QVBoxLayout(services_group)
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.service_checkboxes = {}
        
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        for service_id, service_info in PREDEFINED_IP_RANGES.items():
            checkbox = QCheckBox(f"{service_info['name']} ({len(service_info['ranges'])} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)")
            checkbox.setToolTip(f"IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã: {', '.join(service_info['ranges'][:3])}...")
            checkbox.setProperty('service_id', service_id)
            checkbox.stateChanged.connect(self.on_service_toggled)
            self.service_checkboxes[service_id] = checkbox
            scroll_layout.addWidget(checkbox)
        
        scroll_area.setWidget(scroll_widget)
        services_layout.addWidget(scroll_area)
        
        splitter.addWidget(services_group)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö IP
        custom_group = QGroupBox("‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã")
        custom_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #444;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        custom_layout = QVBoxLayout(custom_group)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint = QLabel(
            "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É).\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 192.168.1.1 –∏–ª–∏ 10.0.0.0/8 –∏–ª–∏ 172.16.0.0-172.31.255.255"
        )
        hint.setWordWrap(True)
        hint.setStyleSheet("color: #888; font-size: 9pt; padding: 5px;")
        custom_layout.addWidget(hint)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ IP
        self.custom_text = QTextEdit()
        self.custom_text.setPlaceholderText(
            "192.168.1.1\n"
            "10.0.0.0/8\n"
            "172.16.0.0-172.31.255.255\n"
            "# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å #"
        )
        self.custom_text.setStyleSheet("""
            QTextEdit {
                background: #2a2a2a;
                border: 1px solid #444;
                border-radius: 3px;
                color: #fff;
                font-family: Consolas, monospace;
                font-size: 10pt;
                padding: 5px;
            }
        """)
        custom_layout.addWidget(self.custom_text)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validate_btn = QPushButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP-–∞–¥—Ä–µ—Å–∞")
        validate_btn.clicked.connect(self.validate_custom_ips)
        custom_layout.addWidget(validate_btn)
        
        splitter.addWidget(custom_group)
        
        layout.addWidget(splitter)
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40% –∏ 60%)
        splitter.setSizes([400, 600])     
           
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–æ–≤—ã—Ö IP
        base_info = QLabel(f"üìå –ë–∞–∑–æ–≤—ã–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã): {len(get_base_ips())} –∑–∞–ø–∏—Å–µ–π")
        base_info.setStyleSheet("color: #888; font-size: 9pt; padding: 5px;")
        layout.addWidget(base_info)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        save_btn.setStyleSheet("""
            QPushButton {
                background: #2196F3;
                color: white;
                font-weight: bold;
                padding: 8px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background: #1976D2;
            }
        """)
        save_btn.clicked.connect(self.save_changes)
        buttons_layout.addWidget(save_btn)
        
        reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
        reset_btn.clicked.connect(self.reset_settings)
        buttons_layout.addWidget(reset_btn)
        
        layout.addLayout(buttons_layout)
    
    def on_service_toggled(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        checkbox = self.sender()
        service_id = checkbox.property('service_id')
        
        if state == Qt.CheckState.Checked.value:
            self.selected_services.add(service_id)
            log(f"–î–æ–±–∞–≤–ª–µ–Ω IP –¥–∏–∞–ø–∞–∑–æ–Ω: {service_id}", "DEBUG")
        else:
            self.selected_services.discard(service_id)
            log(f"–£–¥–∞–ª–µ–Ω IP –¥–∏–∞–ø–∞–∑–æ–Ω: {service_id}", "DEBUG")
    
    def validate_custom_ips(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤"""
        import re
        
        text = self.custom_text.toPlainText()
        lines = text.split('\n')
        
        valid_count = 0
        invalid_lines = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        ip_pattern = re.compile(r'^(\d{1,3}\.){3}\d{1,3}$')
        cidr_pattern = re.compile(r'^(\d{1,3}\.){3}\d{1,3}/\d{1,2}$')
        range_pattern = re.compile(r'^(\d{1,3}\.){3}\d{1,3}-(\d{1,3}\.){3}\d{1,3}$')
        
        cursor = self.custom_text.textCursor()
        cursor.select(QTextCursor.SelectionType.Document)
        cursor.setCharFormat(QTextCharFormat())  # –°–±—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        for i, line in enumerate(lines):
            line = line.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if not line or line.startswith('#'):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if ip_pattern.match(line):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å IP
                parts = line.split('.')
                if all(0 <= int(part) <= 255 for part in parts):
                    valid_count += 1
                    self._highlight_line(i, QColor(100, 255, 100))  # –ó–µ–ª–µ–Ω—ã–π
                else:
                    invalid_lines.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line} - –Ω–µ–≤–µ—Ä–Ω—ã–π IP")
                    self._highlight_line(i, QColor(255, 100, 100))  # –ö—Ä–∞—Å–Ω—ã–π
            elif cidr_pattern.match(line):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º CIDR
                ip_part, mask = line.split('/')
                parts = ip_part.split('.')
                if all(0 <= int(part) <= 255 for part in parts) and 0 <= int(mask) <= 32:
                    valid_count += 1
                    self._highlight_line(i, QColor(100, 255, 100))
                else:
                    invalid_lines.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line} - –Ω–µ–≤–µ—Ä–Ω—ã–π CIDR")
                    self._highlight_line(i, QColor(255, 100, 100))
            elif range_pattern.match(line):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                start_ip, end_ip = line.split('-')
                start_parts = start_ip.split('.')
                end_parts = end_ip.split('.')
                
                if (all(0 <= int(part) <= 255 for part in start_parts) and
                    all(0 <= int(part) <= 255 for part in end_parts)):
                    valid_count += 1
                    self._highlight_line(i, QColor(100, 255, 100))
                else:
                    invalid_lines.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line} - –Ω–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
                    self._highlight_line(i, QColor(255, 100, 100))
            else:
                invalid_lines.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                self._highlight_line(i, QColor(255, 100, 100))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if invalid_lines:
            msg = f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {valid_count}\n"
            msg += f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(invalid_lines)}\n\n"
            msg += "–û—à–∏–±–∫–∏:\n" + '\n'.join(invalid_lines[:10])
            if len(invalid_lines) > 10:
                msg += f"\n... –∏ –µ—â–µ {len(invalid_lines) - 10} –æ—à–∏–±–æ–∫"
            
            QMessageBox.warning(self, "–ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤", msg)
        else:
            QMessageBox.information(
                self, 
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤", 
                f"‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!\n–ù–∞–π–¥–µ–Ω–æ {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö IP/–¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"
            )
    
    def _highlight_line(self, line_number, color):
        """–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º"""
        cursor = self.custom_text.textCursor()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        cursor.movePosition(QTextCursor.MoveOperation.Start)
        for _ in range(line_number):
            cursor.movePosition(QTextCursor.MoveOperation.Down)
        
        # –í—ã–¥–µ–ª—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
        cursor.movePosition(QTextCursor.MoveOperation.StartOfLine)
        cursor.movePosition(QTextCursor.MoveOperation.EndOfLine, QTextCursor.MoveMode.KeepAnchor)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        format = QTextCharFormat()
        format.setBackground(color)
        format.setForeground(QColor(0, 0, 0))
        cursor.setCharFormat(format)
    
    def save_changes(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª—ã –∏ —Ä–µ–µ—Å—Ç—Ä"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ IP
            text = self.custom_text.toPlainText()
            custom_ips = []
            
            for line in text.split('\n'):
                line = line.strip()
                if line and not line.startswith('#'):
                    custom_ips.append(line)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä
            if save_ipsets_settings(self.selected_services, custom_ips):
                # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
                if rebuild_ipsets_from_registry():
                    QMessageBox.information(
                        self,
                        "–£—Å–ø–µ—Ö",
                        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                        f"–í—ã–±—Ä–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(self.selected_services)}\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö IP: {len(custom_ips)}"
                    )
                    self.ipsets_changed.emit()
                    log(f"IPsets —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(self.selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤, {len(custom_ips)} IP", "‚úÖ SUCCESS")
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã IPsets")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä")
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è IPsets: {e}", "‚ùå ERROR")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            self.selected_services, custom_ips = load_ipsets_settings()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
            for service_id, checkbox in self.service_checkboxes.items():
                checkbox.setChecked(service_id in self.selected_services)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            self.custom_text.setPlainText('\n'.join(custom_ips))
            
            log(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IPsets: {len(self.selected_services)} —Å–µ—Ä–≤–∏—Å–æ–≤, {len(custom_ips)} IP", "INFO")
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ IPsets: {e}", "‚ö† WARNING")
    
    def reset_settings(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º"""
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IPsets?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä—ã
            self.selected_services.clear()
            for checkbox in self.service_checkboxes.values():
                checkbox.setChecked(False)
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            self.custom_text.clear()
            
            log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ IPsets —Å–±—Ä–æ—à–µ–Ω—ã", "INFO")