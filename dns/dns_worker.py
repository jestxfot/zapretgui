# dns/dns_worker.py
from PyQt6.QtCore import QThread, QObject, pyqtSignal, QEventLoop, QTimer
from log import log
import time
import sys
import traceback

class SafeDNSWorker(QThread):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è DNS –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π"""
    status_update = pyqtSignal(str)
    finished_with_result = pyqtSignal(bool)
    
    def __init__(self, skip_on_startup=False):
        super().__init__()
        self.skip_on_startup = skip_on_startup
        
    def run(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ DNS –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            log("üîµ SafeDNSWorker: –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã", "DEBUG")
            
            # –ó–ê–©–ò–¢–ê: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            if self.skip_on_startup:
                log("‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ DNS –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã", "INFO")
                time.sleep(3)
            
            # –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            try:
                from .dns_force import ensure_default_force_dns, DNSForceManager
            except ImportError as e:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DNS –º–æ–¥—É–ª–∏: {e}", "‚ùå ERROR")
                self.status_update.emit("‚ùå DNS –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                self.finished_with_result.emit(False)
                return
            
            # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ—Ç
            try:
                ensure_default_force_dns()
            except Exception as e:
                log(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á DNS: {e}", "‚ö† WARNING")
            
            # –ó–ê–©–ò–¢–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π manager –≤–º–µ—Å—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ
            try:
                manager = DNSForceManager()
            except Exception as e:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DNSForceManager: {e}", "‚ùå ERROR")
                self.status_update.emit("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DNS")
                self.finished_with_result.emit(False)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ force DNS
            try:
                if not manager.is_force_dns_enabled():
                    self.status_update.emit("‚ÑπÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π DNS –æ—Ç–∫–ª—é—á–µ–Ω")
                    log("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π DNS –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", "INFO")
                    self.finished_with_result.emit(False)
                    return
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è DNS: {e}", "‚ùå ERROR")
                self.finished_with_result.emit(False)
                return
            
            # –ó–ê–©–ò–¢–ê: –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É DNS –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            self.status_update.emit("‚è≥ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
                success_count, total_count = manager.force_dns_on_all_adapters(
                    include_disconnected=False,  # –¢–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã
                    enable_ipv6=False  # –û—Ç–∫–ª—é—á–∞–µ–º IPv6 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                )
                
                if success_count > 0:
                    self.status_update.emit(f"‚úÖ DNS –ø—Ä–∏–º–µ–Ω–µ–Ω: {success_count}/{total_count} –∞–¥–∞–ø—Ç–µ—Ä–æ–≤")
                    self.finished_with_result.emit(True)
                else:
                    self.status_update.emit("‚ö†Ô∏è DNS –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å")
                    self.finished_with_result.emit(False)
                    
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è DNS: {e}", "‚ùå ERROR")
                self.status_update.emit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
                self.finished_with_result.emit(False)
                
        except Exception as e:
            log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ DNS worker: {e}", "‚ùå ERROR")
            log(f"Traceback: {traceback.format_exc()}", "‚ùå ERROR")
            try:
                self.status_update.emit("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ DNS")
            except:
                pass
            self.finished_with_result.emit(False)


class DNSUIManager:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä UI –¥–ª—è DNS –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, parent, status_callback=None):
        self.parent = parent
        self.status_callback = status_callback or (lambda msg: None)
        self.dns_worker = None
        self.startup_protection = True  # –ó–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∞—à–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    def apply_dns_settings_async(self, skip_on_startup=False):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ worker
            if self.dns_worker and self.dns_worker.isRunning():
                log("DNS worker —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", "‚ö† WARNING")
                return False
            
            log("üîµ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ DNS worker", "DEBUG")
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π worker
            self.dns_worker = SafeDNSWorker(skip_on_startup=skip_on_startup)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å –∑–∞—â–∏—Ç–æ–π
            try:
                self.dns_worker.status_update.connect(self._safe_status_update)
                self.dns_worker.finished_with_result.connect(self._safe_dns_finished)
            except Exception as e:
                log(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}", "‚ö† WARNING")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º worker
            self.dns_worker.start()
            
            self._safe_status_update("‚è≥ –ó–∞–ø—É—Å–∫ DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            return True
            
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ DNS worker: {e}", "‚ùå ERROR")
            self._safe_status_update(f"‚ùå –û—à–∏–±–∫–∞ DNS")
            return False
    
    def _safe_status_update(self, msg):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            if self.status_callback:
                self.status_callback(msg)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", "DEBUG")
    
    def _safe_dns_finished(self, success):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è DNS –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            if success:
                self._safe_status_update("‚úÖ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                log("DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", "‚úÖ SUCCESS")
            else:
                self._safe_status_update("‚ö†Ô∏è DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                log("DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã", "‚ö† WARNING")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ worker
            self._cleanup_worker()
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ DNS: {e}", "DEBUG")
    
    def _cleanup_worker(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ worker"""
        try:
            if self.dns_worker:
                if self.dns_worker.isRunning():
                    self.dns_worker.quit()
                    if not self.dns_worker.wait(500):  # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ 500–º—Å
                        log("DNS worker –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è", "DEBUG")
                
                self.dns_worker.deleteLater()
                self.dns_worker = None
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ DNS worker: {e}", "DEBUG")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self._cleanup_worker()


class DNSStartupManager:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è DNS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    
    # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è DNS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
    DISABLE_ON_STARTUP = False  # ‚Üê –£–°–¢–ê–ù–û–í–ò–¢–ï –í True –ß–¢–û–ë–´ –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ò–¢–¨
    
    @staticmethod
    def apply_dns_on_startup_async(status_callback=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            # –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º DNS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            if DNSStartupManager.DISABLE_ON_STARTUP:
                log("‚ö†Ô∏è DNS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∞—à–µ–π", "‚ö† WARNING")
                if status_callback:
                    status_callback("DNS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω")
                return False
            
            log("–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ DNS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ", "INFO")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            def delayed_dns_apply():
                try:
                    from .dns_force import DNSForceManager
                    
                    manager = DNSForceManager()
                    if not manager.is_force_dns_enabled():
                        log("DNS –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", "INFO")
                        return
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
                    success, total = manager.force_dns_on_all_adapters(
                        include_disconnected=False,
                        enable_ipv6=False
                    )
                    
                    if success > 0:
                        log(f"‚úÖ DNS –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {success}/{total}", "‚úÖ SUCCESS")
                        if status_callback:
                            status_callback(f"‚úÖ DNS –ø—Ä–∏–º–µ–Ω–µ–Ω: {success}/{total}")
                    else:
                        log("‚ö†Ô∏è DNS –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ", "‚ö† WARNING")
                        
                except Exception as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ DNS: {e}", "‚ùå ERROR")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
            QTimer.singleShot(5000, delayed_dns_apply)
            
            if status_callback:
                status_callback("DNS –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            
            return True
            
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ DNS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", "‚ùå ERROR")
            if status_callback:
                status_callback("‚ùå –û—à–∏–±–∫–∞ DNS")
            return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è DNS –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
def disable_dns_if_crashing():
    """–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ DNS –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∞—à–∏"""
    try:
        import winreg
        path = r"Software\ZapretReg2"
        
        # –ß–∏—Ç–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫—Ä–∞—à–µ–π
        crash_count = 0
        try:
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, path) as key:
                crash_count, _ = winreg.QueryValueEx(key, "DNSCrashCount")
        except:
            pass
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 3 –∫—Ä–∞—à–µ–π - –æ—Ç–∫–ª—é—á–∞–µ–º DNS
        if crash_count > 3:
            with winreg.CreateKey(winreg.HKEY_CURRENT_USER, path) as key:
                winreg.SetValueEx(key, "ForceDNS", 0, winreg.REG_DWORD, 0)
                winreg.DeleteValue(key, "DNSCrashCount")
            log("‚ö†Ô∏è DNS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—Ä–∞—à–µ–π", "‚ö† WARNING")
            return True
            
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        with winreg.CreateKey(winreg.HKEY_CURRENT_USER, path) as key:
            winreg.SetValueEx(key, "DNSCrashCount", 0, winreg.REG_DWORD, crash_count + 1)
            
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –≤ disable_dns_if_crashing: {e}", "DEBUG")
    
    return False


# –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
def reset_crash_counter():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∫—Ä–∞—à–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    try:
        import winreg
        path = r"Software\ZapretReg2"
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, path, 0, winreg.KEY_SET_VALUE) as key:
            try:
                winreg.DeleteValue(key, "DNSCrashCount")
            except:
                pass
    except:
        pass