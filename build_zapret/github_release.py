"""
build_tools/github_release.py - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub releases
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ GitHub API, —Ç–∞–∫ –∏ GitHub CLI –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import json
import os
import requests
from pathlib import Path
from typing import Optional, Dict, Any, Tuple
import tempfile
import mimetypes
import ssl
import urllib3
import subprocess
import shutil
import time

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  –ù–ê–°–¢–†–û–ô–ö–ò GITHUB (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
GITHUB_CONFIG = {
    "enabled": True,  # True - –≤–∫–ª—é—á–∏—Ç—å GitHub releases, False - –æ—Ç–∫–ª—é—á–∏—Ç—å
    "token": "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",  # Fine-grained —Ç–æ–∫–µ–Ω
    "repo_owner": "youtubediscord",   # –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    "repo_name": "zapret",           # –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    "release_settings": {
        "draft": False,              # True - —Å–æ–∑–¥–∞–≤–∞—Ç—å draft releases
        "prerelease_for_test": True, # True - test releases –∫–∞–∫ prerelease
        "auto_generate_notes": True  # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è release notes
    },
    "ssl_settings": {
        "verify_ssl": True,         # False - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É SSL
        "disable_warnings": True     # True - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
    },
    "upload_settings": {
        "use_cli_for_large_files": True,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GitHub CLI –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        "large_file_threshold_mb": 50,    # –ü–æ—Ä–æ–≥ –≤ –ú–ë –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ CLI
        "retry_attempts": 3,               # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        "chunk_size_mb": 5                # –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    }
}

def detect_token_type(token: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ GitHub"""
    if token.startswith('github_pat_'):
        return 'fine-grained'
    elif token.startswith('ghp_'):
        return 'classic'
    elif token.startswith('gho_'):
        return 'oauth'
    else:
        return 'unknown'

def check_gh_cli() -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É GitHub CLI"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ gh.exe
    gh_path = shutil.which("gh")
    if not gh_path:
        return False, "GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    try:
        result = subprocess.run(
            ["gh", "auth", "status"],
            capture_output=True,
            text=True,
            timeout=10,
            creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
        )
        
        if result.returncode != 0:
            return False, "GitHub CLI –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        repo = f"{GITHUB_CONFIG['repo_owner']}/{GITHUB_CONFIG['repo_name']}"
        result = subprocess.run(
            ["gh", "repo", "view", repo, "--json", "name"],
            capture_output=True,
            text=True,
            timeout=10,
            creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
        )
        
        if result.returncode != 0:
            return False, f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é {repo}"
            
        return True, f"GitHub CLI –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {repo}"
        
    except subprocess.TimeoutExpired:
        return False, "GitHub CLI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub CLI: {e}"

class GitHubReleaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub releases"""
    
    def __init__(self, token: str, repo_owner: str, repo_name: str):
        self.token = token
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.api_base = "https://api.github.com"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.token_type = detect_token_type(token)
        self.setup_headers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
        self.setup_ssl()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GitHub CLI
        self.cli_available, self.cli_status = check_gh_cli()
        
    def setup_headers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞"""
        if self.token_type == 'fine-grained':
            # Fine-grained —Ç–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç Bearer
            self.headers = {
                "Authorization": f"Bearer {self.token}",
                "Accept": "application/vnd.github.v3+json",
                "X-GitHub-Api-Version": "2022-11-28",  # –í–∞–∂–Ω–æ –¥–ª—è fine-grained —Ç–æ–∫–µ–Ω–æ–≤
                "User-Agent": "Zapret-Release-Builder"
            }
        else:
            # Classic —Ç–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç token
            self.headers = {
                "Authorization": f"token {self.token}",
                "Accept": "application/vnd.github.v3+json",
                "User-Agent": "Zapret-Release-Builder"
            }
        
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put(f"üîë –¢–∏–ø —Ç–æ–∫–µ–Ω–∞: {self.token_type}")
        
    def setup_ssl(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∏ —Å–µ—Å—Å–∏–∏ requests"""
        self.session = requests.Session()
        self.session.headers.update(self.headers)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        ssl_config = GITHUB_CONFIG.get("ssl_settings", {})
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if ssl_config.get("disable_warnings", True):
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
        self.verify_ssl = ssl_config.get("verify_ssl", True)
        
        if hasattr(self, 'log_queue') and self.log_queue:
            if not self.verify_ssl:
                self.log_queue.put("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
            else:
                self.log_queue.put("üîí SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
    
    def check_token_validity(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
        try:
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω ({self.token_type})...")
            
            # Classic/OAuth ‚Äì /user, fine-grained ‚Äì —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            test_endpoint = (f"{self.api_base}/repos/{self.repo_owner}/{self.repo_name}"
                             if self.token_type == 'fine-grained'
                             else f"{self.api_base}/user")

            response = self.session.get(test_endpoint, verify=self.verify_ssl)
            
            if response.ok:
                # –î–ª—è fine-grained —Ç–æ–∫–µ–Ω–∞ user-–¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—É–¥–µ—Ç,
                # –ø–æ—ç—Ç–æ–º—É —É—Å–ª–æ–≤–Ω–æ –≤—ã–≤–æ–¥–∏–º –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
                info = response.json().get('login') or response.json().get('full_name')
                if hasattr(self, 'log_queue') and self.log_queue:
                    self.log_queue.put(f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {info}")
                return True
            else:
                if hasattr(self, 'log_queue') and self.log_queue:
                    self.log_queue.put(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {response.status_code} {response.text}")
                return False
                
        except Exception as e:
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def check_repository_access(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω
            if not self.check_token_validity():
                return False
            
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é {self.repo_owner}/{self.repo_name}...")
            
            # –î–ª—è fine-grained —Ç–æ–∫–µ–Ω–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
            response = self._make_request("GET", "", handle_404=True)
            if response:
                repo_data = response.json()
                if hasattr(self, 'log_queue') and self.log_queue:
                    self.log_queue.put("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω!")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                    permissions = repo_data.get('permissions', {})
                    if permissions:
                        self.log_queue.put(f"üìù –ü—Ä–∞–≤–∞: admin={permissions.get('admin')}, push={permissions.get('push')}, pull={permissions.get('pull')}")
                    
                    # –î–ª—è fine-grained —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å releases
                    if self.token_type == 'fine-grained':
                        releases_response = self._make_request("GET", "/releases", handle_404=True)
                        if releases_response:
                            self.log_queue.put("‚úÖ –î–æ—Å—Ç—É–ø –∫ releases –µ—Å—Ç—å")
                        else:
                            self.log_queue.put("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ releases! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞.")
                            return False
                
                return True
            else:
                if hasattr(self, 'log_queue') and self.log_queue:
                    self.log_queue.put("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è fine-grained —Ç–æ–∫–µ–Ω–æ–≤
                    if self.token_type == 'fine-grained':
                        self.log_queue.put("üí° –î–ª—è fine-grained —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                        self.log_queue.put("   ‚Ä¢ Resource owner: youtubediscord")
                        self.log_queue.put("   ‚Ä¢ Repository access: zapret")
                        self.log_queue.put("   ‚Ä¢ Permissions: Contents(Write), Metadata(Read), Releases(Write)")
                
                return False
                
        except Exception as e:
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
            return False
    
    def _make_request(self, method: str, endpoint: str, handle_404: bool = False, **kwargs) -> Optional[requests.Response]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ GitHub API"""
        url = f"{self.api_base}/repos/{self.repo_owner}/{self.repo_name}{endpoint}"
        
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put(f"GitHub API: {method} {url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
        kwargs['verify'] = self.verify_ssl
        
        try:
            response = self.session.request(method, url, **kwargs)
            
            if response.status_code == 404:
                if handle_404:
                    return None
                
                if hasattr(self, 'log_queue') and self.log_queue:
                    self.log_queue.put(f"‚ùå 404 - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    self.log_queue.put(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                    self.log_queue.put(f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏: {self.repo_owner}/{self.repo_name}")
                    self.log_queue.put(f"   ‚Ä¢ –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/{self.repo_owner}/{self.repo_name}")
                    
                    if self.token_type == 'fine-grained':
                        self.log_queue.put(f"   ‚Ä¢ Resource owner –≤ —Ç–æ–∫–µ–Ω–µ: {self.repo_owner}")
                        self.log_queue.put(f"   ‚Ä¢ Repository access –≤–∫–ª—é—á–∞–µ—Ç: {self.repo_name}")
                
                raise Exception(f"Repository {self.repo_owner}/{self.repo_name} not found (404)")
            
            if not response.ok:
                error_msg = f"GitHub API error: {response.status_code} {response.text}"
                if hasattr(self, 'log_queue') and self.log_queue:
                    self.log_queue.put(f"‚ùå {error_msg}")
                raise Exception(error_msg)
                
            return response
            
        except requests.exceptions.SSLError as e:
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"‚ùå SSL –æ—à–∏–±–∫–∞: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
            if self.verify_ssl:
                if hasattr(self, 'log_queue') and self.log_queue:
                    self.log_queue.put("üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                
                kwargs['verify'] = False
                try:
                    response = self.session.request(method, url, **kwargs)
                    
                    if response.status_code == 404:
                        if handle_404:
                            return None
                        raise Exception(f"Repository {self.repo_owner}/{self.repo_name} not found (404)")
                    
                    if not response.ok:
                        error_msg = f"GitHub API error: {response.status_code} {response.text}"
                        if hasattr(self, 'log_queue') and self.log_queue:
                            self.log_queue.put(f"‚ùå {error_msg}")
                        raise Exception(error_msg)
                        
                    if hasattr(self, 'log_queue') and self.log_queue:
                        self.log_queue.put("‚úî –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (–±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏)")
                    
                    return response
                    
                except Exception as retry_error:
                    if hasattr(self, 'log_queue') and self.log_queue:
                        self.log_queue.put(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {retry_error}")
                    raise
            
            raise
            
        except Exception as e:
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise
    
    def create_release(self, tag_name: str, name: str, body: str, 
                      draft: bool = False, prerelease: bool = False) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π release"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        if not self.check_repository_access():
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
        
        data = {
            "tag_name": tag_name,
            "name": name,
            "body": body,
            "draft": draft,
            "prerelease": prerelease
        }
        
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put(f"üì¶ –°–æ–∑–¥–∞–µ–º GitHub release: {name}")
        
        response = self._make_request("POST", "/releases", json=data)
        release_data = response.json()
        
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put(f"‚úî Release —Å–æ–∑–¥–∞–Ω: {release_data['html_url']}")
        
        return release_data
        
    def get_release_by_tag(self, tag_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å release –ø–æ —Ç–µ–≥—É"""
        try:
            response = self._make_request("GET", f"/releases/tags/{tag_name}", handle_404=True)
            return response.json() if response else None
        except Exception:
            return None
            
    def update_release(self, release_id: int, **kwargs) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π release"""
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º release {release_id}")
            
        response = self._make_request("PATCH", f"/releases/{release_id}", json=kwargs)
        return response.json()
        
    def upload_asset(self, release_id: int, file_path: Path, 
                    content_type: Optional[str] = None) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∫ release —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞"""
        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
        file_size_mb = file_path.stat().st_size / 1024 / 1024
        upload_settings = GITHUB_CONFIG.get("upload_settings", {})
        use_cli = upload_settings.get("use_cli_for_large_files", True)
        threshold = upload_settings.get("large_file_threshold_mb", 50)
        
        # –†–µ—à–∞–µ–º –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        if use_cli and self.cli_available and file_size_mb > threshold:
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"üì§ –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub CLI –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ ({file_size_mb:.1f} MB)")
            return self._upload_asset_via_cli(release_id, file_path)
        else:
            return self._upload_asset_via_api(release_id, file_path, content_type)
    
    def _upload_asset_via_cli(self, release_id: int, file_path: Path) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ GitHub CLI"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ –¥–ª—è tag
        response = self._make_request("GET", f"/releases/{release_id}")
        release_data = response.json()
        tag = release_data['tag_name']
        
        repo = f"{self.repo_owner}/{self.repo_name}"
        
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put(f"üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ GitHub CLI: {file_path.name}")
        
        cmd = [
            "gh", "release", "upload", tag,
            str(file_path),
            "--repo", repo,
            "--clobber"  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ]
        
        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=600,  # 10 –º–∏–Ω—É—Ç
                creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
            )
            
            if result.returncode != 0:
                error_msg = result.stderr or result.stdout
                if hasattr(self, 'log_queue') and self.log_queue:
                    self.log_queue.put(f"‚ùå GitHub CLI –æ—à–∏–±–∫–∞: {error_msg}")
                # Fallback –Ω–∞ API –º–µ—Ç–æ–¥
                return self._upload_asset_via_api(release_id, file_path)
                
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"‚úî –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ CLI")
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± asset
            return {
                "name": file_path.name,
                "browser_download_url": f"https://github.com/{repo}/releases/download/{tag}/{file_path.name}"
            }
            
        except subprocess.TimeoutExpired:
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç GitHub CLI, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ API")
            return self._upload_asset_via_api(release_id, file_path)
        except Exception as e:
            if hasattr(self, 'log_queue') and self.log_queue:
                self.log_queue.put(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ CLI: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ API")
            return self._upload_asset_via_api(release_id, file_path)
    
    def _upload_asset_via_api(self, release_id: int, file_path: Path, 
                             content_type: Optional[str] = None) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ GitHub API —Å retry –ª–æ–≥–∏–∫–æ–π"""
        if content_type is None:
            content_type = mimetypes.guess_type(str(file_path))[0] or 'application/octet-stream'
            
        file_size = file_path.stat().st_size
        filename = file_path.name
        
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ API: {filename} ({file_size / 1024 / 1024:.1f} MB)")
        
        # URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ assets –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ API
        upload_url = f"https://uploads.github.com/repos/{self.repo_owner}/{self.repo_name}/releases/{release_id}/assets"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è retry
        max_attempts = GITHUB_CONFIG.get("upload_settings", {}).get("retry_attempts", 3)
        
        for attempt in range(max_attempts):
            try:
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                upload_session = requests.Session()
                upload_session.headers.update(self.headers)
                upload_session.headers["Content-Type"] = content_type
                
                with open(file_path, 'rb') as f:
                    try:
                        response = upload_session.post(
                            upload_url,
                            params={"name": filename},
                            data=f,
                            verify=self.verify_ssl,
                            timeout=(30, 600)  # 30 —Å–µ–∫ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, 600 –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
                        )
                    except requests.exceptions.SSLError:
                        if hasattr(self, 'log_queue') and self.log_queue:
                            self.log_queue.put("‚ö†Ô∏è SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                        
                        f.seek(0)  # –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                        response = upload_session.post(
                            upload_url,
                            params={"name": filename},
                            data=f,
                            verify=False,
                            timeout=(30, 600)
                        )
                
                if response.ok:
                    asset_data = response.json()
                    if hasattr(self, 'log_queue') and self.log_queue:
                        self.log_queue.put(f"‚úî –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {asset_data['browser_download_url']}")
                    return asset_data
                elif response.status_code == 422:
                    # –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if hasattr(self, 'log_queue') and self.log_queue:
                        self.log_queue.put("‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–ª–∏–∑–µ")
                    return {"name": filename, "browser_download_url": f"https://github.com/{self.repo_owner}/{self.repo_name}/releases/"}
                else:
                    raise Exception(f"HTTP {response.status_code}: {response.text}")
                    
            except (requests.exceptions.ConnectionError, 
                    requests.exceptions.Timeout,
                    ConnectionAbortedError) as e:
                if attempt < max_attempts - 1:
                    wait_time = (attempt + 1) * 5  # 5, 10, 15 —Å–µ–∫—É–Ω–¥
                    if hasattr(self, 'log_queue') and self.log_queue:
                        self.log_queue.put(
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): {type(e).__name__}. "
                            f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫..."
                        )
                    time.sleep(wait_time)
                else:
                    raise
            except Exception as e:
                if attempt < max_attempts - 1 and "Connection aborted" in str(e):
                    wait_time = (attempt + 1) * 5
                    if hasattr(self, 'log_queue') and self.log_queue:
                        self.log_queue.put(
                            f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}). "
                            f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫..."
                        )
                    time.sleep(wait_time)
                else:
                    raise
        
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        
    def delete_asset(self, asset_id: int):
        """–£–¥–∞–ª–∏—Ç—å asset –∏–∑ release"""
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put(f"üóë –£–¥–∞–ª—è–µ–º asset {asset_id}")
            
        self._make_request("DELETE", f"/releases/assets/{asset_id}")
        
        if hasattr(self, 'log_queue') and self.log_queue:
            self.log_queue.put("‚úî Asset —É–¥–∞–ª–µ–Ω")
            
    def get_release_assets(self, release_id: int) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ assets –¥–ª—è release"""
        response = self._make_request("GET", f"/releases/{release_id}/assets")
        return response.json()


def is_github_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GitHub"""
    return (GITHUB_CONFIG.get("enabled", False) and 
            bool(GITHUB_CONFIG.get("token")) and
            not GITHUB_CONFIG.get("token").endswith("_here"))


def create_github_release(channel: str, version: str, file_path: Path, 
                         release_notes: str, log_queue=None) -> Optional[str]:
    """
    –°–æ–∑–¥–∞—Ç—å GitHub release –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
    
    Returns:
        URL –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π release –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    """
    if not is_github_enabled():
        if log_queue:
            token = GITHUB_CONFIG.get("token", "")
            if token.endswith("_here"):
                log_queue.put("‚Ñπ GitHub releases: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ github_release.py")
            else:
                log_queue.put("‚Ñπ GitHub releases –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return None
        
    try:
        manager = GitHubReleaseManager(
            token=GITHUB_CONFIG["token"],
            repo_owner=GITHUB_CONFIG["repo_owner"],
            repo_name=GITHUB_CONFIG["repo_name"]
        )
        
        # –ü–µ—Ä–µ–¥–∞–µ–º log_queue –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
        if log_queue:
            manager.log_queue = log_queue
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Å—Ç–∞—Ç—É—Å–µ CLI
            if manager.cli_available:
                log_queue.put(f"‚úÖ GitHub CLI –¥–æ—Å—Ç—É–ø–µ–Ω: {manager.cli_status}")
            else:
                log_queue.put(f"‚ÑπÔ∏è GitHub CLI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {manager.cli_status}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ release
        tag_name = version
        release_name = f"Zapret {version}"
        if channel == "test":
            release_name += " (Test)"
        
        is_prerelease = (channel == "test" and 
                        GITHUB_CONFIG["release_settings"].get("prerelease_for_test", True))
        is_draft = GITHUB_CONFIG["release_settings"].get("draft", False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ release —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º
        existing_release = manager.get_release_by_tag(tag_name)
        
        if existing_release:
            if log_queue:
                log_queue.put(f"üîÑ Release {tag_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ assets —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
            assets = manager.get_release_assets(existing_release["id"])
            for asset in assets:
                if asset["name"] == file_path.name:
                    manager.delete_asset(asset["id"])
                    
            release_data = existing_release
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π release
            release_data = manager.create_release(
                tag_name=tag_name,
                name=release_name,
                body=release_notes,
                draft=is_draft,
                prerelease=is_prerelease
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç—Å—è CLI –∏–ª–∏ API)
        asset_data = manager.upload_asset(release_data["id"], file_path)
        
        if log_queue:
            log_queue.put(f"‚úî GitHub release –≥–æ—Ç–æ–≤: {release_data['html_url']}")
            
        return release_data["html_url"]
        
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GitHub release: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ GitHub
        return None


def get_github_config_info() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GitHub"""
    if not GITHUB_CONFIG.get("enabled", False):
        return "–û—Ç–∫–ª—é—á–µ–Ω–æ"
    
    token = GITHUB_CONFIG.get("token", "")
    if token.endswith("_here") or not token:
        return "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (—É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω)"
        
    repo = f"{GITHUB_CONFIG.get('repo_owner', '')}/{GITHUB_CONFIG.get('repo_name', '')}"
    if repo == "/":
        return "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (—É–∫–∞–∂–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)"
    
    token_type = detect_token_type(token)
    ssl_status = "SSL‚úì" if GITHUB_CONFIG.get("ssl_settings", {}).get("verify_ssl", True) else "SSL‚úó"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CLI
    cli_available, _ = check_gh_cli()
    cli_status = "CLI‚úì" if cli_available else "CLI‚úó"
    
    return f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ: {repo} ({token_type}, {ssl_status}, {cli_status})"


def test_github_connection(log_queue=None) -> bool:
    """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GitHub API"""
    if not is_github_enabled():
        if log_queue:
            log_queue.put("‚ùå GitHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        manager = GitHubReleaseManager(
            token=GITHUB_CONFIG["token"],
            repo_owner=GITHUB_CONFIG["repo_owner"],
            repo_name=GITHUB_CONFIG["repo_name"]
        )
        
        if log_queue:
            manager.log_queue = log_queue
            log_queue.put("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å GitHub...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        success = manager.check_repository_access()
        
        if success and log_queue:
            log_queue.put("‚úÖ –¢–µ—Å—Ç GitHub —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω!")
            
        return success
        
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GitHub: {e}")
        return False