"""
build_tools/ssh_deploy.py - SSH –¥–µ–ø–ª–æ–π –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä
"""

from pathlib import Path
from typing import Optional, Tuple
import stat
import json
from datetime import date

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –ù–ê–°–¢–†–û–ô–ö–ò SSH - –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
SSH_PORT = 22  # –ü–æ—Ä—Ç SSH, –æ–±—ã—á–Ω–æ 22
SSH_HOST = "88.210.21.236"  # –í–∞—à —Å–µ—Ä–≤–µ—Ä
SSH_USERNAME = "root"
SSH_PASSWORD = "3btNATB94p"  # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SSH –∫–ª—é—á
SSH_KEY_PATH = ""  # –ù–∞–ø—Ä–∏–º–µ—Ä: "C:/Users/You/.ssh/id_rsa"
REMOTE_PATH = "/root/zapretgpt"
SSH_ENABLED = True  # –í–∫–ª—é—á–∏—Ç—å –¥–µ–ø–ª–æ–π

# URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω)
#DOWNLOAD_BASE_URL = "https://nozapret.ru"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def is_ssh_configured() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ SSH"""
    return SSH_ENABLED and SSH_HOST and SSH_USERNAME

def get_ssh_config_info() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SSH"""
    if not SSH_ENABLED:
        return "SSH –¥–µ–ø–ª–æ–π –≤—ã–∫–ª—é—á–µ–Ω"
    if not SSH_HOST:
        return "SSH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    return f"SSH: {SSH_USERNAME}@{SSH_HOST}:{SSH_PORT}"

def create_version_json(channel: str, version: str, notes: str, existing_data: dict = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ version.json"""
    if existing_data is None:
        existing_data = {
            "stable": {},
            "test": {}
        }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    existing_data[channel] = {
        "version": version,
        #"update_url": f"{DOWNLOAD_BASE_URL}/ZapretSetup{'_TEST' if channel == 'test' else ''}.exe",
        "release_notes": notes,
        "date": date.today().strftime("%Y-%m-%d")
    }
    
    return json.dumps(existing_data, indent=2, ensure_ascii=False)

def deploy_to_vps(file_path: Path, channel: str = None, version: str = None, 
                  notes: str = None, log_queue=None) -> Tuple[bool, str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ VPS —Å–µ—Ä–≤–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç version.json
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    if not SSH_ENABLED:
        return False, "SSH –¥–µ–ø–ª–æ–π –≤—ã–∫–ª—é—á–µ–Ω"
        
    if not file_path.exists():
        return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
    
    try:
        import paramiko
    except ImportError:
        return False, "–ú–æ–¥—É–ª—å paramiko –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install paramiko"
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º
        if log_queue:
            log_queue.put(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {SSH_USERNAME}@{SSH_HOST}:{SSH_PORT}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if SSH_KEY_PATH and Path(SSH_KEY_PATH).exists():
            ssh.connect(SSH_HOST, port=SSH_PORT, username=SSH_USERNAME, 
                       key_filename=SSH_KEY_PATH, timeout=30)
        else:
            ssh.connect(SSH_HOST, port=SSH_PORT, username=SSH_USERNAME, 
                       password=SSH_PASSWORD, timeout=30)
        
        if log_queue:
            log_queue.put("‚úÖ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if log_queue:
            log_queue.put(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {REMOTE_PATH}")
        
        stdin, stdout, stderr = ssh.exec_command(f'mkdir -p {REMOTE_PATH}')
        stdout.read()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º SFTP —Å–µ—Å—Å–∏—é
        sftp = ssh.open_sftp()
        
        # 1. –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        remote_file = f"{REMOTE_PATH}/{file_path.name}"
        
        if log_queue:
            log_queue.put(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {file_path.name} ‚Üí {remote_file}")
        
        # Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        file_size = file_path.stat().st_size
        transferred = 0
        last_percent = 0
        
        def progress_callback(current, total):
            nonlocal transferred, last_percent
            transferred = current
            percent = int((current / total) * 100)
            if log_queue and percent >= last_percent + 10:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10%
                last_percent = percent
                log_queue.put(f"    –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}%")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        sftp.put(str(file_path), remote_file, callback=progress_callback)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        sftp.chmod(remote_file, stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)
        
        if log_queue:
            log_queue.put(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {remote_file}")
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º version.json –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if channel and version:
            version_path = f"{REMOTE_PATH}/version.json"
            
            if log_queue:
                log_queue.put(f"üìÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {version_path}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π version.json
            existing_data = None
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                with sftp.open(version_path, 'r') as f:
                    existing_data = json.load(f)
                    if log_queue:
                        log_queue.put("    –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π version.json")
            except Exception as e:
                if log_queue:
                    log_queue.put("    –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π version.json")
                existing_data = {"stable": {}, "test": {}}
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
            json_content = create_version_json(channel, version, notes or f"Zapret {version}", existing_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False, suffix='.json') as tmp:
                tmp.write(json_content)
                tmp_path = tmp.name
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                sftp.put(tmp_path, version_path)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
                sftp.chmod(version_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)
                
                if log_queue:
                    log_queue.put(f"‚úÖ version.json –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {channel}: {version}")
                    
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                Path(tmp_path).unlink(missing_ok=True)
        
        sftp.close()
        ssh.close()
        
        return True, f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –≤ {REMOTE_PATH}"
        
    except paramiko.AuthenticationException:
        return False, "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSH"
    except paramiko.SSHException as e:
        return False, f"SSH –æ—à–∏–±–∫–∞: {str(e)}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {str(e)}"
    finally:
        try:
            ssh.close()
        except:
            pass