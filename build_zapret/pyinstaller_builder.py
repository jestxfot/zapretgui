"""
pyinstaller_builder.py - –ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∫–∏ —á–µ—Ä–µ–∑ PyInstaller
"""

from __future__ import annotations
import shutil
import sys
import tempfile
from pathlib import Path
from typing import Any, Optional


def create_spec_file(channel: str, root_path: Path) -> Path:
    """
    –°–æ–∑–¥–∞–µ—Ç spec —Ñ–∞–π–ª –¥–ª—è PyInstaller
    
    Args:
        channel: –ö–∞–Ω–∞–ª —Å–±–æ—Ä–∫–∏ ('stable' –∏–ª–∏ 'test')
        root_path: –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        
    Returns:
        Path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É spec —Ñ–∞–π–ª—É
    """
    icon_file = 'ZapretDevLogo3.ico' if channel == 'test' else 'Zapret1.ico'
    
    spec_content = f"""# -*- mode: python ; coding: utf-8 -*-

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[],
    hiddenimports=[
        'win32com', 
        'win32com.client', 
        'pythoncom',
        'win32api',
        'win32con',
        'win32service',
        'win32serviceutil'
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[],
    noarchive=False,
)

pyz = PYZ(a.pure)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.datas,
    [],
    name='zapret',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=True,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    uac_admin=True,
    icon='{icon_file}',
    version='version_info.txt',
)"""
    
    spec_path = root_path / "zapret_build.spec"
    spec_path.write_text(spec_content, encoding='utf-8')
    return spec_path


def run_pyinstaller(channel: str, root_path: Path, run_func: Any, log_queue: Optional[Any] = None) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç PyInstaller –¥–ª—è —Å–±–æ—Ä–∫–∏
    
    Args:
        channel: –ö–∞–Ω–∞–ª —Å–±–æ—Ä–∫–∏ ('stable' –∏–ª–∏ 'test')  
        root_path: –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        run_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥
        log_queue: –û—á–µ—Ä–µ–¥—å –¥–ª—è –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±–æ—Ä–∫–∏
    """
    spec_path = root_path / "zapret_build.spec"
    work = Path(tempfile.mkdtemp(prefix="pyi_"))
    out = root_path.parent / "zapret"
    
    try:
        if log_queue:
            log_queue.put("üî® –ó–∞–ø—É—Å–∫ PyInstaller...")
            log_queue.put(f"   Spec: {spec_path}")
            log_queue.put(f"   Work: {work}")
            log_queue.put(f"   Out: {out}")
            
        run_func([
            sys.executable, "-m", "PyInstaller",
            "--workpath", str(work),
            "--distpath", str(out),
            "--clean",
            "--noconfirm",
            str(spec_path)
        ])
        
        if log_queue:
            log_queue.put("‚úÖ PyInstaller –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
    except Exception as e:
        if log_queue:
            log_queue.put(f"‚ùå –û—à–∏–±–∫–∞ PyInstaller: {e}")
        raise
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if work.exists():
            shutil.rmtree(work, ignore_errors=True)
            if log_queue:
                log_queue.put(f"üßπ –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {work}")
                
        if spec_path.exists():
            spec_path.unlink()
            if log_queue:
                log_queue.put(f"üßπ –£–¥–∞–ª–µ–Ω spec —Ñ–∞–π–ª: {spec_path}")


def check_pyinstaller_available() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PyInstaller
    
    Returns:
        bool: True –µ—Å–ª–∏ PyInstaller —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    """
    try:
        import PyInstaller
        return True
    except ImportError:
        return False


def get_pyinstaller_version() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é PyInstaller
    
    Returns:
        str: –í–µ—Ä—Å–∏—è PyInstaller –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        import PyInstaller
        return PyInstaller.__version__
    except ImportError:
        return "PyInstaller –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"