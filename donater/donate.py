#donate/donate.py
import csv
import datetime as dt
import io
import re
import requests
from requests.adapters import HTTPAdapter, Retry
import winreg
from typing import Optional, Dict, Any, Tuple
from log import log
import time
from net_helpers import HTTP

RAW_CSV_URL = (
    "https://zapretdpi.ru/"
    "/subscriptions.csv"
)

EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[a-z]{2,}$", re.I)
REGISTRY_KEY = r"SOFTWARE\ZapretGUI"
EMAIL_VALUE_NAME = "UserEmail2"

class DonateChecker:
    # --- –Ω–æ–≤—ã–π "–≥–ª–æ–±–∞–ª—å–Ω—ã–π" –∫—ç—à –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å -----------------------------
    _CSV_CACHE_TTL = 15 * 60            # 15 –º–∏–Ω—É—Ç
    _csv_cache: tuple[float, str] | None = None
    # -------------------------------------------------------------------

    def __init__(self):
        # –æ–¥–∏–Ω Session –Ω–∞ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
        retries = Retry(
            total          = 3,             # 3 –ø–æ–ø—ã—Ç–∫–∏
            backoff_factor = 1,             # 1-2-4 c
            status_forcelist = (502, 503, 504, 522, 524)
        )
        self._ses = requests.Session()
        self._ses.mount("https://", HTTPAdapter(max_retries=retries))

    def _pick_key(self, keys, *variants):
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–ª—é—á –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–∞–∑–≤–∞–Ω–∏–π"""
        for v in variants:
            for k in keys:
                if v in k.lower():
                    return k
        return None

    # -------------------------------------------------------------------
    def fetch_csv(self) -> str:
        try:
            resp = HTTP.get(RAW_CSV_URL, timeout=(5, 30))
            resp.raise_for_status()
            return resp.text
        except Exception as e:
            raise RuntimeError(f"–°–µ—Ç–µ–≤–æ–π —Å–±–æ–π: {e}") from e

    def find_row(self, csv_text: str, identifier: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ü–û–°–õ–ï–î–ù–Æ–Æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ –∏–º–µ–Ω–∏"""
        rdr = csv.DictReader(io.StringIO(csv_text), delimiter=';')
        mode = "email" if EMAIL_RE.match(identifier) else "nick"
        
        found_rows = []
        for row in rdr:
            if mode == "email":
                k = self._pick_key(row.keys(), "email")
            else:
                k = self._pick_key(row.keys(), "–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "name")
            if k and row[k].strip().lower() == identifier.lower():
                found_rows.append(row)
        
        if not found_rows:
            return None
        
        def get_sort_key(row):
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ end_date (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ end_date - –≤ –∫–æ–Ω–µ—Ü)
            end_date = self.parse_end_date(row)
            start_date = self.parse_start_date(row)
            
            if end_date is None:  # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                return (dt.date.max, start_date or dt.date.min)
            else:  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                return (end_date, start_date or dt.date.min)
        
        found_rows.sort(key=get_sort_key)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å
        return found_rows[-1]

    def parse_start_date(self, row: dict) -> Optional[dt.date]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        k = self._pick_key(row.keys(), "start_date", "–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
        if not k: 
            return None
        val = row[k].strip()
        for fmt in ("%d.%m.%Y", "%Y-%m-%d"):
            try:
                return dt.datetime.strptime(val, fmt).date()
            except ValueError:
                continue
        return None

    def parse_end_date(self, row: dict) -> Optional[dt.date]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        k = self._pick_key(row.keys(), "end_date", "–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        if not k:
            return None
        val = row[k].strip()
        if val == "-" or not val:
            return None
        for fmt in ("%d.%m.%Y", "%Y-%m-%d"):
            try:
                return dt.datetime.strptime(val, fmt).date()
            except ValueError:
                continue
        return None

    def get_subscription_period(self, row: dict) -> int:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã"""
        price_key = self._pick_key(row.keys(), "user_price", "—Ü–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "—Ü–µ–Ω–∞")
        if not price_key:
            return 30
        
        try:
            user_price = float(row[price_key].replace(',', '.'))
            if user_price >= 570:  # –≥–æ–¥
                return 365
            elif user_price >= 290:  # –ø–æ–ª–≥–æ–¥–∞
                return 180
            elif user_price >= 147:  # 3 –º–µ—Å—è—Ü–∞
                return 90
            elif user_price >= 95:   # 2 –º–µ—Å—è—Ü–∞
                return 60
            else:
                return 30  # –º–µ—Å—è—Ü
        except (ValueError, AttributeError):
            return 30

    def get_level(self, row: dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏"""
        k = self._pick_key(row.keys(), "level_name", "—É—Ä–æ–≤–µ–Ω—å", "–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è")
        return row.get(k, "").strip() or "‚Äì"

    def save_email_to_registry(self, email: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç email –≤ —Ä–µ–µ—Å—Ç—Ä Windows"""
        try:
            with winreg.CreateKey(winreg.HKEY_CURRENT_USER, REGISTRY_KEY) as key:
                winreg.SetValueEx(key, EMAIL_VALUE_NAME, 0, winreg.REG_SZ, email)
            log(f"Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä: {email}", level="INFO")
            return True
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email –≤ —Ä–µ–µ—Å—Ç—Ä: {e}", level="ERROR")
            return False

    def get_email_from_registry(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç email –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ Windows"""
        try:
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, REGISTRY_KEY) as key:
                email, _ = winreg.QueryValueEx(key, EMAIL_VALUE_NAME)
                log(f"Email –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {email}", level="INFO")
                return email
        except (FileNotFoundError, OSError):
            log("Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ", level="INFO")
            return None
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è email –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {e}", level="ERROR")
            return None

    def check_subscription_status(self, use_cache: bool = True) -> Tuple[bool, str, Optional[int]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        
        Args:
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à
            
        Returns:
            Tuple[bool, str, Optional[int]]: (premium —Å—Ç–∞—Ç—É—Å, —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
        """
        try:
            email = self.get_email_from_registry()
            if not email:
                return False, "Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ", None
            
            result = self.check_user_subscription(email)
            
            is_premium = (result['found'] and 
                         result['days_remaining'] is not None and 
                         result['days_remaining'] > 0) or \
                        (result['found'] and "–≤–∫–ª—é—á–µ–Ω" in result['status'].lower())
            
            return is_premium, result['status'], result['days_remaining']
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", level="ERROR")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", None

    def check_user_subscription(self, email: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ:
            - found: bool - –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            - level: str - —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
            - days_remaining: int|None - –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
            - status: str - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            - auto_payment: bool - –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
        """
        try:
            csv_text = self.fetch_csv()
            row = self.find_row(csv_text, email)
            
            if not row:
                return {
                    'found': False,
                    'level': '‚Äì',
                    'days_remaining': None,
                    'status': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    'auto_payment': False
                }
            
            level = self.get_level(row)
            end_date = self.parse_end_date(row)
            start_date = self.parse_start_date(row)
            
            type_key = self._pick_key(row.keys(), "type", "—Ç–∏–ø")
            sub_type = row.get(type_key, "").strip().lower() if type_key else ""
            
            today = dt.date.today()
            
            if end_date:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è
                days = (end_date - today).days
                if days < 0:
                    status = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
                    days_remaining = 0
                else:
                    status = f"–û—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω. (–∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª—é—á–µ–Ω üò¢)"
                    days_remaining = days
                auto_payment = False
            elif sub_type == "subscription" and start_date:
                # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                period_days = self.get_subscription_period(row)
                due = start_date + dt.timedelta(days=period_days)
                days = (due - today).days
                if days >= 0:
                    status = f"–û—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω. (–∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –≤–∫–ª—é—á–µ–Ω üòä)"
                    days_remaining = days
                else:
                    status = "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
                    days_remaining = 0
                auto_payment = True
            else:
                # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
                status = "–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
                days_remaining = None
                auto_payment = False
            
            return {
                'found': True,
                'level': level,
                'days_remaining': days_remaining,
                'status': status,
                'auto_payment': auto_payment
            }
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", level="ERROR")
            return {
                'found': False,
                'level': '‚Äì',
                'days_remaining': None,
                'status': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}',
                'auto_payment': False
            }

def check_premium_access(email: str = None) -> Tuple[bool, Optional[int]]:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞.
    
    Args:
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞)
        
    Returns:
        Tuple[bool, Optional[int]]: (True –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –¥–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)
    """
    try:
        checker = DonateChecker()
        
        if not email:
            email = checker.get_email_from_registry()
            if not email:
                return False, None
        
        result = checker.check_user_subscription(email)
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –¥–Ω–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "–∏—Å—Ç–µ–∫–ª–∞"/"–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        is_active = (result['found'] and 
                    result['days_remaining'] is not None and 
                    result['days_remaining'] > 0) or \
                   (result['found'] and "–≤–∫–ª—é—á–µ–Ω" in result['status'].lower())
        
        return is_active, result['days_remaining']
        
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞: {e}", level="ERROR")
        return False, None