from PyQt6.QtCore import QThread, QTimer
from log import log
import os


class HeavyInitManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—è–∂–µ–ª–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, app_instance):
        self.app = app_instance
        self._heavy_init_started = False
        self._heavy_init_thread = None
        self.heavy_worker = None
        
        # –ú–∞–ø–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è splash screen
        self.progress_map = {
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...": (15, "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."),
            "–†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ": (20, "üì¥ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º"),
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ winws.exe...": (25, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ winws.exe..."),
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...": (30, "üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π..."),
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...": (35, "üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞..."),
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...": (40, "üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."),
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...": (50, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        }

    def start_heavy_init(self):
        """–ó–∞–ø—É—Å–∫ —Ç—è–∂–µ–ª–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        
        # –ó–ê–©–ò–¢–ê –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        if self._heavy_init_started:
            log("üîµ HeavyInitManager: —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", "‚ö† WARNING")
            return
        
        self._heavy_init_started = True
        log("üîµ HeavyInitManager: –∑–∞–ø—É—Å–∫ —Ç—è–∂–µ–ª–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", "DEBUG")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if hasattr(self.app, 'init_progress_bar'):
            self.app.init_progress_bar.show_animated()
            self.app.init_progress_bar.set_progress(0, "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        
        try:
            log("üîµ –°–æ–∑–¥–∞–µ–º QThread –¥–ª—è HeavyInit", "DEBUG")
            self._heavy_init_thread = QThread()
            
            log("üîµ –°–æ–∑–¥–∞–µ–º HeavyInitWorker", "DEBUG")
            from heavy_init_worker import HeavyInitWorker
            
            self.heavy_worker = HeavyInitWorker(
                self.app.dpi_starter if hasattr(self.app, 'dpi_starter') else None,
                getattr(self.app, 'download_urls', [])
            )
            
            log("üîµ –ü–µ—Ä–µ–º–µ—â–∞–µ–º worker –≤ –ø–æ—Ç–æ–∫", "DEBUG")
            self.heavy_worker.moveToThread(self._heavy_init_thread)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self._heavy_init_thread.started.connect(self.heavy_worker.run)
            self.heavy_worker.progress.connect(self._on_heavy_progress)
            self.heavy_worker.finished.connect(self._on_heavy_done)
            self.heavy_worker.finished.connect(self._heavy_init_thread.quit)
            
            log("–ó–∞–ø—É—Å–∫–∞–µ–º HeavyInit –ø–æ—Ç–æ–∫...", "DEBUG")
            self._heavy_init_thread.start()
            
        except Exception as e:
            log(f"üîµ –û—à–∏–±–∫–∞ –≤ HeavyInitManager: {e}", "‚ùå ERROR")
            self._heavy_init_started = False
            
            if hasattr(self.app, 'init_progress_bar'):
                self.app.init_progress_bar.set_progress(0, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                QTimer.singleShot(2000, self.app.init_progress_bar.hide_animated)
            
            import traceback
            log(f"Traceback: {traceback.format_exc()}", "‚ùå ERROR")

    def check_local_files(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        from config import WINWS_EXE
        
        if not os.path.exists(WINWS_EXE):
            self.app.set_status("‚ùå winws.exe –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")
            return False
        
        self.app.set_status("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True

    def start_auto_update(self):
        """‚úÖ –ù–û–í–´–ô –ü–£–ë–õ–ò–ß–ù–´–ô –ú–ï–¢–û–î: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self._start_auto_update()

    def _on_heavy_progress(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç HeavyInitWorker"""
        log(f"HeavyInit –ø—Ä–æ–≥—Ä–µ—Å—Å: {message}", "DEBUG")
        
        if hasattr(self.app, 'splash') and self.app.splash:
            if message in self.progress_map:
                value, display_text = self.progress_map[message]
                self.app.splash.set_progress(value, display_text, message)
            else:
                self.app.splash.set_detail(message)
        
        self.app.set_status(message)

    def _on_heavy_done(self, success: bool, error_msg: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è HeavyInit"""
        log("üîµ HeavyInitManager: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—è–∂–µ–ª–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", "DEBUG")
        
        self._heavy_init_started = False
        
        if success:
            self._handle_successful_init()
        else:
            self._handle_failed_init(error_msg)

    def _handle_successful_init(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if hasattr(self.app, 'splash') and self.app.splash:
            self.app.splash.set_progress(75, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É...", "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ strategy_manager
        if hasattr(self.app, 'strategy_manager') and self.app.strategy_manager:
            log(f"üîµ strategy_manager.already_loaded = {self.app.strategy_manager.already_loaded}", "DEBUG")
            
            if self.app.strategy_manager.already_loaded:
                log("üîµ –í—ã–∑—ã–≤–∞–µ–º update_strategies_list —á–µ—Ä–µ–∑ UI Manager", "DEBUG")
                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú UI MANAGER
                if hasattr(self.app, 'ui_manager'):
                    self.app.ui_manager.update_strategies_list()
                log("üîµ update_strategies_list –∑–∞–≤–µ—Ä—à–µ–Ω", "DEBUG")
        else:
            log("üîµ strategy_manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!", "‚ö† WARNING")

        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ DPI –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ DPI Manager
        log("üîµ –í—ã–∑—ã–≤–∞–µ–º delayed_dpi_start —á–µ—Ä–µ–∑ DPI Manager", "DEBUG")
        if hasattr(self.app, 'dpi_manager'):
            self.app.dpi_manager.delayed_dpi_start()
        log("üîµ delayed_dpi_start –∑–∞–≤–µ—Ä—à–µ–Ω", "DEBUG")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —á–µ—Ä–µ–∑ UI Manager
        log("üîµ –í—ã–∑—ã–≤–∞–µ–º update_proxy_button_state —á–µ—Ä–µ–∑ UI Manager", "DEBUG")
        if hasattr(self.app, 'ui_manager'):
            self.app.ui_manager.update_proxy_button_state()
        log("üîµ update_proxy_button_state –∑–∞–≤–µ—Ä—à–µ–Ω", "DEBUG")

        # combobox-—Ñ–∏–∫—Å —á–µ—Ä–µ–∑ UI Manager
        for delay in (0, 100, 200):
            QTimer.singleShot(delay, lambda: (
                self.app.ui_manager.force_enable_combos() 
                if hasattr(self.app, 'ui_manager') else None
            ))

        self.app.set_status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(2000, self._start_auto_update)
        
        log("üîµ HeavyInitManager: —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", "DEBUG")

    def _handle_failed_init(self, error_msg: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º splash
        if hasattr(self.app, 'splash') and self.app.splash:
            self.app.splash.show_error(error_msg)
        
        log(f"HeavyInit –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {error_msg}", "‚ùå ERROR")

    def _start_auto_update(self):
        """–ü–ª–∞–Ω–æ–≤–∞—è (—Ç–∏—Ö–∞—è) –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ"""
        self.app.set_status("–ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π‚Ä¶")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º splash –µ—Å–ª–∏ –æ–Ω –µ—â–µ –µ—Å—Ç—å
        if hasattr(self.app, 'splash') and self.app.splash:
            self.app.splash.set_progress(85, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...", "")

        try:
            from updater import run_update_async
        except Exception as e:
            log(f"Auto-update: import error {e}", "‚ùå ERROR")
            self.app.set_status("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–∞–ø–¥–µ–π—Ç")
            return

        thread = run_update_async(parent=self.app, silent=True)
        
        if not hasattr(thread, '_worker'):
            log("Auto-update: worker not found in thread", "‚ùå ERROR")
            self.app.set_status("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            return
            
        worker = thread._worker

        def _upd_done(ok: bool):
            if ok:
                self.app.set_status("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚Äì Zapret –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è")
            else:
                self.app.set_status("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
            log(f"Auto-update finished, ok={ok}", "DEBUG")

            if hasattr(self.app, "_auto_upd_thread"):
                del self.app._auto_upd_thread
            if hasattr(self.app, "_auto_upd_worker"):
                del self.app._auto_upd_worker

        worker.finished.connect(_upd_done)

        self.app._auto_upd_thread = thread
        self.app._auto_upd_worker = worker

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if self._heavy_init_thread and self._heavy_init_thread.isRunning():
                self._heavy_init_thread.quit()
                self._heavy_init_thread.wait(1000)
            
            if self.heavy_worker:
                self.heavy_worker.deleteLater()
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ HeavyInitManager: {e}", "DEBUG")