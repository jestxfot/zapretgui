# managers/initialization_manager.py

from PyQt6.QtCore import QTimer, QThread, QObject, pyqtSignal
from log import log


class InitializationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –î–µ–ª–∞–µ—Ç –ø–ª–∞–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç ¬´–º—è–≥–∫—É—é¬ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.
    """

    def __init__(self, app_instance):
        self.app = app_instance
        self.init_tasks_completed = set()

        # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ–ª–∞–≥–∏/—Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º—è–≥–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self._verify_done = False
        self._verify_attempts = 0
        self._verify_max_attempts = 8       # –ú–∞–∫—Å–∏–º—É–º 8 –ø–æ–ø—ã—Ç–æ–∫
        self._verify_interval_ms = 1000     # –ò–Ω—Ç–µ—Ä–≤–∞–ª 1 —Å–µ–∫
        self._verify_timer_started = False
        self._post_init_scheduled = False

        # –î–ª—è —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ipsets, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Ç–æ–∫
        self._ipsets_thread = None

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    def run_async_init(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        log("üü° InitializationManager: –Ω–∞—á–∞–ª–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", "DEBUG")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        self.app.set_status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
        init_tasks = [
            (0,   self._init_dpi_starter),
            (10,  self._init_hostlists_check),
            (20,  self._init_ipsets_check),
            (30,  self._init_dpi_controller),
            (40,  self._init_menu),
            (50,  self._connect_signals),
            (100, self._initialize_managers_and_services),
            (150, self._init_tray),
            (200, self._init_logger),
        ]

        for delay, task in init_tasks:
            log(f"üü° –ü–ª–∞–Ω–∏—Ä—É–µ–º {task.__name__} —á–µ—Ä–µ–∑ {delay}ms", "DEBUG")
            QTimer.singleShot(delay, task)

        # –í–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–∏—Ö 2 —Å–µ–∫—É–Ω–¥ ‚Äî ¬´–º—è–≥–∫–∞—è¬ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        if not self._verify_timer_started:
            self._verify_timer_started = True
            QTimer.singleShot(1500, self._verify_initialization)  # –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1.5—Å

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å–∏—Å—Ç–µ–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    def _init_strategy_manager(self):
        """–ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Strategy Manager (–ª–æ–∫–∞–ª—å–Ω–æ)"""
        try:
            # –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ 'strategy_menu.strategy_manager', —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            from strategy_menu.strategy_manager import StrategyManager
            from config import STRATEGIES_FOLDER, INDEXJSON_FOLDER
            import os

            os.makedirs(STRATEGIES_FOLDER, exist_ok=True)

            self.app.strategy_manager = StrategyManager(
                local_dir=STRATEGIES_FOLDER,
                json_dir=INDEXJSON_FOLDER,
                status_callback=self.app.set_status,
                preload=False
            )
            # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
            self.app.strategy_manager.local_only_mode = True

            log("Strategy Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)", "INFO")
            self.init_tasks_completed.add('strategy_manager')

        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Strategy Manager: {e}", "‚ùå ERROR")
            self.app.set_status(f"–û—à–∏–±–∫–∞: {e}")

    def _init_dpi_starter(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DPI —Å—Ç–∞—Ä—Ç–µ—Ä–∞"""
        try:
            from dpi.bat_start import BatDPIStart
            from config import WINWS_EXE

            self.app.dpi_starter = BatDPIStart(
                winws_exe=WINWS_EXE,
                status_callback=self.app.set_status,
                ui_callback=self._safe_ui_update,  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –≤ UI
                app_instance=self.app
            )
            log("DPI Starter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "INFO")
            self.init_tasks_completed.add('dpi_starter')
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DPI Starter: {e}", "‚ùå ERROR")
            self.app.set_status(f"–û—à–∏–±–∫–∞ DPI: {e}")

    def _safe_ui_update(self, running: bool):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —á–µ—Ä–µ–∑ UI Manager"""
        if hasattr(self.app, 'ui_manager'):
            try:
                self.app.ui_manager.update_ui_state(running)
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI: {e}", "‚ùå ERROR")
        else:
            # Fallback, –µ—Å–ª–∏ UI Manager –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
            if hasattr(self.app, 'update_ui'):
                try:
                    self.app.update_ui(running)
                except Exception as e:
                    log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI (fallback): {e}", "‚ùå ERROR")

    def _init_hostlists_check(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤"""
        try:
            log("üîß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤", "DEBUG")
            from utils.hostlists_manager import startup_hostlists_check
            result = startup_hostlists_check()
            if result:
                log("‚úÖ –•–æ—Å—Ç–ª–∏—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã", "SUCCESS")
            else:
                log("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ö–æ—Å—Ç–ª–∏—Å—Ç–∞–º–∏, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ", "WARNING")
            self.init_tasks_completed.add('hostlists')
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–ª–∏—Å—Ç–æ–≤: {e}", "ERROR")

    def _init_ipsets_check(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ IPsets"""
        class IPsetsChecker(QObject):
            finished = pyqtSignal(bool, str)
            progress = pyqtSignal(str)

            def run(self):
                try:
                    self.progress.emit("–ü—Ä–æ–≤–µ—Ä–∫–∞ IPsets...")
                    from utils.ipsets_manager import startup_ipsets_check
                    startup_ipsets_check()
                    self.finished.emit(True, "IPsets –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                except Exception as e:
                    self.finished.emit(False, str(e))

        thread = QThread()
        worker = IPsetsChecker()
        worker.moveToThread(thread)

        thread.started.connect(worker.run)
        worker.progress.connect(self.app.set_status)
        worker.finished.connect(lambda ok, msg: (
            log(f"IPsets: {msg}", "‚úÖ" if ok else "‚ùå"),
            self.init_tasks_completed.add('ipsets') if ok else None
        ))
        worker.finished.connect(thread.quit)
        worker.finished.connect(worker.deleteLater)
        thread.finished.connect(thread.deleteLater)

        thread.start()
        self._ipsets_thread = thread

    def _init_dpi_controller(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DPI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            from dpi.dpi_controller import DPIController
            self.app.dpi_controller = DPIController(self.app)
            log("DPI Controller –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "INFO")
            self.init_tasks_completed.add('dpi_controller')
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DPI Controller: {e}", "‚ùå ERROR")
            self.app.set_status(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {e}")

    def _init_menu(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é"""
        try:
            from altmenu.app_menubar import AppMenuBar
            self.app.menu_bar = AppMenuBar(self.app)
            if self.app.layout():
                self.app.layout().setMenuBar(self.app.menu_bar)
            log("–ú–µ–Ω—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", "INFO")
            self.init_tasks_completed.add('menu')
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é: {e}", "‚ùå ERROR")

    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            self.app.select_strategy_clicked.connect(self.app.select_strategy)
            self.app.start_clicked.connect(lambda: self.app.dpi_controller.start_dpi_async())
            self.app.stop_clicked.connect(self.app.show_stop_menu)
            self.app.autostart_enable_clicked.connect(self.app.show_autostart_options)
            self.app.autostart_disable_clicked.connect(self.app.remove_autostart)
            self.app.theme_changed.connect(self.app.change_theme)
            self.app.open_folder_btn.clicked.connect(self.app.open_folder)
            self.app.test_connection_btn.clicked.connect(self.app.open_connection_test)
            self.app.subscription_btn.clicked.connect(self.app.show_subscription_dialog)
            self.app.dns_settings_btn.clicked.connect(self.app.open_dns_settings)
            self.app.proxy_button.clicked.connect(self.app.toggle_proxy_domains)
            self.app.update_check_btn.clicked.connect(self.app.manual_update_check)

            log("–°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã", "INFO")
            self.init_tasks_completed.add('signals')
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}", "‚ùå ERROR")

    def _initialize_managers_and_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        log("üî¥ InitializationManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", "DEBUG")

        try:
            import time as _t
            t0 = _t.perf_counter()

            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
            from utils.file_manager import ensure_required_files
            ensure_required_files()

            # DPI Manager
            from managers.dpi_manager import DPIManager
            self.app.dpi_manager = DPIManager(self.app)
            log("‚úÖ DPI Manager —Å–æ–∑–¥–∞–Ω", "DEBUG")

            # Process Monitor
            if hasattr(self.app, 'process_monitor_manager'):
                self.app.process_monitor_manager.initialize_process_monitor()
            self.app.last_strategy_change_time = __import__('time').time()

            # Discord Manager
            from discord.discord import DiscordManager
            self.app.discord_manager = DiscordManager(status_callback=self.app.set_status)
            log("‚úÖ Discord Manager —Å–æ–∑–¥–∞–Ω", "DEBUG")

            # Hosts Manager
            from hosts.hosts import HostsManager
            self.app.hosts_manager = HostsManager(status_callback=self.app.set_status)
            log("‚úÖ Hosts Manager —Å–æ–∑–¥–∞–Ω", "DEBUG")

            # Hosts UI Manager
            from hosts.hosts_ui import HostsUIManager
            self.app.hosts_ui_manager = HostsUIManager(
                parent=self.app,
                hosts_manager=self.app.hosts_manager,
                status_callback=self.app.set_status
            )
            log("‚úÖ Hosts UI Manager —Å–æ–∑–¥–∞–Ω", "DEBUG")

            # DNS UI Manager
            from dns import DNSUIManager, DNSStartupManager
            self.app.dns_ui_manager = DNSUIManager(
                parent=self.app,
                status_callback=self.app.set_status
            )
            log("‚úÖ DNS UI Manager —Å–æ–∑–¥–∞–Ω", "DEBUG")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º DNS –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            DNSStartupManager.apply_dns_on_startup_async(status_callback=self.app.set_status)

            # Strategy Manager (–ª–æ–∫–∞–ª—å–Ω–æ)
            self._init_strategy_manager()

            # Theme Manager + ThemeHandler
            from ui.theme import ThemeManager, ThemeHandler
            from config import THEME_FOLDER
            from PyQt6.QtWidgets import QApplication

            self.app.theme_manager = ThemeManager(
                app=QApplication.instance(),
                widget=self.app,
                status_label=self.app.status_label if hasattr(self.app, 'status_label') else None,
                theme_folder=THEME_FOLDER,
                donate_checker=getattr(self.app, 'donate_checker', None)
            )

            # Handler –∏ –ø—Ä–∏–≤—è–∑–∫–∞
            self.app.theme_handler = ThemeHandler(self.app, target_widget=self.app.main_widget)
            self.app.theme_handler.set_theme_manager(self.app.theme_manager)
            self.app.theme_handler.update_available_themes()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
            if hasattr(self.app, 'theme_combo'):
                self.app.theme_combo.setCurrentText(self.app.theme_manager.current_theme)
            self.app.theme_manager.apply_theme()
            log("‚úÖ Theme Manager —Å–æ–∑–¥–∞–Ω", "DEBUG")

            # Service Manager (–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫)
            from autostart.checker import CheckerManager
            from config import WINWS_EXE

            self.app.service_manager = CheckerManager(
                winws_exe=WINWS_EXE,
                status_callback=self.app.set_status,
                ui_callback=self._safe_ui_update
            )
            log("‚úÖ Service Manager —Å–æ–∑–¥–∞–Ω", "DEBUG")

            # –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ UI Manager
            try:
                log("üî¥ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI", "DEBUG")
                from autostart.registry_check import is_autostart_enabled
                autostart_exists = is_autostart_enabled()
                log(f"üî¥ autostart_exists = {autostart_exists}", "DEBUG")

                if hasattr(self.app, 'ui_manager'):
                    self.app.ui_manager.update_autostart_ui(autostart_exists)
                    self.app.ui_manager.update_ui_state(running=False)

                log("üî¥ UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "DEBUG")
            except Exception as ui_error:
                log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: {ui_error}", "ERROR")
                import traceback
                log(traceback.format_exc(), "ERROR")

            # –í—Å—ë –æ–∫ ‚Äî –ø–æ–º–µ—á–∞–µ–º ¬´managers¬ª –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            log("‚úÖ –í–°–ï –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "SUCCESS")
            self.init_tasks_completed.add('managers')

            # –û—Ç–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É ¬´–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤¬ª
            self._on_managers_init_done()

            took = (_t.perf_counter() - t0) * 1000
            log(f"Managers init took {took:.0f} ms", "DEBUG")

        except Exception as e:
            log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}", "ERROR")
            import traceback
            log(traceback.format_exc(), "ERROR")

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {str(e)}"
            try:
                self.app.set_status(f"‚ùå {error_msg}")
            except Exception:
                pass

            try:
                from PyQt6.QtWidgets import QMessageBox
                QMessageBox.critical(
                    self.app,
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                    f"{error_msg}\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ.\n\n"
                    f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{str(e)}"
                )
            except Exception as msg_error:
                log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {msg_error}", "ERROR")

    def _init_tray(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
        try:
            from tray import SystemTrayManager
            from config import ICON_PATH, ICON_TEST_PATH, APP_VERSION, CHANNEL
            from PyQt6.QtGui import QIcon
            from PyQt6.QtWidgets import QApplication
            import os

            icon_path = ICON_TEST_PATH if CHANNEL.lower() == "test" else ICON_PATH
            if not os.path.exists(icon_path):
                icon_path = ICON_PATH

            app_icon = QIcon(icon_path)
            self.app.setWindowIcon(app_icon)
            QApplication.instance().setWindowIcon(app_icon)

            self.app.tray_manager = SystemTrayManager(
                parent=self.app,
                icon_path=os.path.abspath(icon_path),
                app_version=APP_VERSION
            )

            log("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "INFO")
            self.init_tasks_completed.add('tray')
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ—è: {e}", "‚ùå ERROR")

    def _init_logger(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤"""
        try:
            from log import global_logger
            from tgram import FullLogDaemon

            log_path = getattr(global_logger, 'log_file', None)
            if log_path:
                self.app.log_sender = FullLogDaemon(
                    log_path=log_path,
                    interval=200,
                    parent=self.app
                )
                log("–õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "INFO")
            else:
                log("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ª–æ–≥–æ–≤", "‚ö† WARNING")

            self.init_tasks_completed.add('logger')
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: {e}", "‚ùå ERROR")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ—Å—Ç-–∑–∞–¥–∞—á–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    def _required_components(self):
        """–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–±—É–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞"""
        return ['dpi_starter', 'dpi_controller', 'strategy_manager', 'managers']

    def _check_and_complete_initialization(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã, –∏ –µ—Å–ª–∏ –¥–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:
        - —Å—Ç–∞–≤–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        - –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ post-init –∑–∞–¥–∞—á–∏
        - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ, –∏–Ω–∞—á–µ False.
        """
        required_components = self._required_components()
        missing = [c for c in required_components if c not in self.init_tasks_completed]

        if missing:
            return False

        # –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã
        if not self._verify_done:
            self._verify_done = True
            try:
                self.app.set_status("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception:
                pass
            log("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "‚úÖ SUCCESS")

            # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
            QTimer.singleShot(500, self._post_init_tasks)
            QTimer.singleShot(3000, self._sync_autostart_status)

        return True

    def _verify_initialization(self):
        """
        ¬´–ú—è–≥–∫–∞—è¬ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
        –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞.
        """
        if self._verify_done:
            return

        if self._check_and_complete_initialization():
            return  # –≤—Å–µ –æ–∫

        # –ï—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        self._verify_attempts += 1
        required_components = self._required_components()
        missing = [c for c in required_components if c not in self.init_tasks_completed]
        log(
            f"–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {self._verify_attempts}/{self._verify_max_attempts}), "
            f"–Ω–µ –≥–æ—Ç–æ–≤—ã: {', '.join(missing)}",
            "DEBUG"
        )

        if self._verify_attempts < self._verify_max_attempts:
            QTimer.singleShot(self._verify_interval_ms, self._verify_initialization)
            return

        # –î–µ–¥–ª–∞–π–Ω –∏—Å—Ç—ë–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        self._verify_done = True
        error_msg = f"–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(missing)}"
        try:
            self.app.set_status(f"‚ö†Ô∏è {error_msg}")
        except Exception:
            pass
        log(error_msg, "‚ùå ERROR")

        try:
            from PyQt6.QtWidgets import QMessageBox
            QMessageBox.warning(
                self.app,
                "–ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
                f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –±—ã–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:\n{', '.join(missing)}\n\n"
                "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ."
            )
        except Exception as e:
            log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}", "ERROR")

    def _sync_autostart_status(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        try:
            from autostart.registry_check import verify_autostart_status
            real_status = verify_autostart_status()
            if hasattr(self.app, 'ui_manager'):
                self.app.ui_manager.update_autostart_ui(real_status)
            log(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: {real_status}", "INFO")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}", "‚ùå ERROR")

    def _on_managers_init_done(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:
        - –∑–∞–ø—É—Å–∫–∞–µ—Ç Heavy Init (–µ—Å–ª–∏ –µ—Å—Ç—å)
        - –ø—ã—Ç–∞–µ—Ç—Å—è ¬´–∑–∞–≤–µ—Ä—à–∏—Ç—å¬ª –æ–±—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        """
        log("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º Heavy Init", "‚úÖ SUCCESS")
        try:
            self.app.set_status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception:
            pass

        # Heavy Init
        if hasattr(self.app, 'heavy_init_manager'):
            QTimer.singleShot(100, self.app.heavy_init_manager.start_heavy_init)
            log("üîµ Heavy Init –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω", "DEBUG")
        else:
            log("‚ùå Heavy Init Manager –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")

        # –ü—Ä–æ–±—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —É–∂–µ —Å–µ–π—á–∞—Å
        self._check_and_complete_initialization()

    def _post_init_tasks(self):
        """–ó–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)"""
        if self._post_init_scheduled:
            return
        self._post_init_scheduled = True

        if hasattr(self.app, 'heavy_init_manager'):
            try:
                if self.app.heavy_init_manager.check_local_files():
                    if hasattr(self.app, 'dpi_manager'):
                        QTimer.singleShot(1000, self.app.dpi_manager.delayed_dpi_start)
                # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π/—Ä–µ—Å—É—Ä—Å–æ–≤
                QTimer.singleShot(2000, self.app.heavy_init_manager.start_auto_update)
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞ post-init –∑–∞–¥–∞—á: {e}", "‚ùå ERROR")
        else:
            log("‚ùå Heavy Init Manager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è post init tasks", "ERROR")