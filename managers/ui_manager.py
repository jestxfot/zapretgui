from PyQt6.QtWidgets import QApplication
from pathlib import Path
from log import log
import qtawesome as qta
from PyQt6.QtCore import QSize
import time

class UIManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ –∏—Ö –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, app_instance):
        self.app = app_instance

    def update_theme_combo(self, available_themes: list) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –≤ –∫–æ–º–±–æ-–±–æ–∫—Å–µ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ï—Å–ª–∏ theme_handler –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if hasattr(self.app, 'theme_handler') and self.app.theme_handler is not None:
            self.app.theme_handler.update_available_themes()
            return
        
        # Fallback - –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–±–æ-–±–æ–∫—Å–∞
        if not hasattr(self.app, 'theme_combo'):
            return
            
        current_theme = self.app.theme_combo.currentText()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        self.app.theme_combo.blockSignals(True)
        
        # –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–Ω–æ–≤–æ
        self.app.theme_combo.clear()
        self.app.theme_combo.addItems(available_themes)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self._apply_theme_combo_styles()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä, –µ—Å–ª–∏ —Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        clean_current = current_theme
        if hasattr(self.app, 'theme_manager'):
            clean_current = self.app.theme_manager.get_clean_theme_name(current_theme)
        
        for theme in available_themes:
            clean_theme = theme
            if hasattr(self.app, 'theme_manager'):
                clean_theme = self.app.theme_manager.get_clean_theme_name(theme)
            if clean_theme == clean_current:
                self.app.theme_combo.setCurrentText(theme)
                break
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            if available_themes:
                # –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ–º—É
                for theme in available_themes:
                    if "(–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)" not in theme and "(Premium)" not in theme:
                        self.app.theme_combo.setCurrentText(theme)
                        break
                else:
                    # –ï—Å–ª–∏ –≤—Å–µ —Ç–µ–º—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å), –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
                    self.app.theme_combo.setCurrentText(available_themes[0])
        
        # –í–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
        self.app.theme_combo.blockSignals(False)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± —ç—Ç–æ–º
        new_theme = self.app.theme_combo.currentText()
        if new_theme != current_theme:
            self.app.theme_changed.emit(new_theme)

    def update_proxy_button_state(self, is_enabled: bool = None) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ proxy –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ hosts"""
        if not hasattr(self.app, 'proxy_button'):
            log("proxy_button –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "DEBUG")
            return
        
        # ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º hosts_ui_manager
        if is_enabled is None:
            if hasattr(self.app, 'hosts_ui_manager'):
                try:
                    # ‚úÖ –í–´–ó–´–í–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ï–¢–û–î
                    is_enabled = self.app.hosts_ui_manager.check_hosts_entries_status()
                    log(f"–°—Ç–∞—Ç—É—Å hosts –∑–∞–ø–∏—Å–µ–π: {is_enabled}", "DEBUG")
                except Exception as e:
                    log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ hosts: {e}", "‚ùå ERROR")
                    is_enabled = False
            else:
                log("hosts_ui_manager –Ω–µ –Ω–∞–π–¥–µ–Ω", "‚ö† WARNING")
                is_enabled = False
            
        config = self.get_proxy_button_config()
        
        try:
            if is_enabled:
                # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–æ—Ç–∫–ª—é—á–∏—Ç—å"
                state = config['enabled_state']
            else:
                # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–≤–∫–ª—é—á–∏—Ç—å"
                state = config['disabled_state']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –∏–∫–æ–Ω–∫—É –∏ —Å—Ç–∏–ª—å
            self.app.proxy_button.setText(f" {state['short_text']}")
            self.app.proxy_button.setIcon(qta.icon(state['icon'], color='white'))
            self.app.proxy_button.setIconSize(QSize(16, 16))
            self.app.proxy_button.setToolTip(state['tooltip'])
            
            from ui.theme import BUTTON_STYLE
            self.app.proxy_button.setStyleSheet(BUTTON_STYLE.format(state['color']))
            
            log(f"–ö–Ω–æ–ø–∫–∞ proxy –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {'–≤–∫–ª—é—á–µ–Ω–æ' if is_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}", "DEBUG")
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ proxy: {e}", "‚ùå ERROR")

    def force_enable_combos(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –∫–æ–º–±–æ-–±–æ–∫—Å—ã —Ç–µ–º"""
        try:
            if hasattr(self.app, 'theme_combo'):
                from ui.theme import COMMON_STYLE
                # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–±–æ-–±–æ–∫—Å–∞ —Ç–µ–º
                self.app.theme_combo.setEnabled(True)
                self.app.theme_combo.show()
                self.app.theme_combo.setStyleSheet(f"{COMMON_STYLE} text-align: center;")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            QApplication.processEvents()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –∫–æ–º–±–æ-–±–æ–∫—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
            return hasattr(self.app, 'theme_combo') and self.app.theme_combo.isEnabled()
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–º–±–æ-–±–æ–∫—Å–∞ —Ç–µ–º: {str(e)}")
            return False

    def update_autostart_ui(self, service_running: bool) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏/–≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        try:
            log(f"üî¥ update_autostart_ui –Ω–∞—á–∞—Ç: service_running={service_running}", "DEBUG")
            
            # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä
            if service_running is None:
                from autostart.registry_check import is_autostart_enabled
                service_running = is_autostart_enabled()
                log(f"–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä: {service_running}", "DEBUG")

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±–∞ —Å—Ç–µ–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            # –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –∏–∑ —Å–µ—Ç–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å)
            if hasattr(self.app, 'button_grid') and hasattr(self.app, 'start_stop_stack') and hasattr(self.app, 'autostart_stack'):
                self.app.button_grid.removeWidget(self.app.start_stop_stack)
                self.app.button_grid.removeWidget(self.app.autostart_stack)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –í–°–ï–ì–î–ê –ø–æ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ –Ω–∞ –∫–∞–∂–¥—ã–π
                self.app.button_grid.addWidget(self.app.start_stop_stack, 0, 0, 1, 1)  # —Å—Ç—Ä–æ–∫–∞ 0, –∫–æ–ª–æ–Ω–∫–∞ 0, 1 —Å—Ç—Ä–æ–∫–∞, 1 –∫–æ–ª–æ–Ω–∫–∞
                self.app.button_grid.addWidget(self.app.autostart_stack, 0, 1, 1, 1)   # —Å—Ç—Ä–æ–∫–∞ 0, –∫–æ–ª–æ–Ω–∫–∞ 1, 1 —Å—Ç—Ä–æ–∫–∞, 1 –∫–æ–ª–æ–Ω–∫–∞
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±–∞ —Å—Ç–µ–∫–∞ –≤–∏–¥–∏–º—ã
                self.app.start_stop_stack.setVisible(True)
                self.app.autostart_stack.setVisible(True)
                
                if service_running:
                    # ‚úÖ –ê–í–¢–û–ó–ê–ü–£–°–ö –ê–ö–¢–ò–í–ï–ù
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
                    if hasattr(self.app, 'autostart_disable_btn'):
                        self.app.autostart_stack.setCurrentWidget(self.app.autostart_disable_btn)
                    
                    # –í –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    # (—Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—ã—á–Ω–æ –∑–∞–ø—É—â–µ–Ω)
                    if hasattr(self.app, 'stop_btn'):
                        self.app.start_stop_stack.setCurrentWidget(self.app.stop_btn)
                    
                else:
                    # ‚úÖ –ê–í–¢–û–ó–ê–ü–£–°–ö –í–´–ö–õ–Æ–ß–ï–ù
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
                    if hasattr(self.app, 'autostart_enable_btn'):
                        self.app.autostart_stack.setCurrentWidget(self.app.autostart_enable_btn)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    process_running = self.app.dpi_starter.check_process_running_wmi(silent=True) if hasattr(self.app, 'dpi_starter') else False
                    if process_running and hasattr(self.app, 'stop_btn'):
                        self.app.start_stop_stack.setCurrentWidget(self.app.stop_btn)
                    elif hasattr(self.app, 'start_btn'):
                        self.app.start_stop_stack.setCurrentWidget(self.app.start_btn)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ layout
                self.app.button_grid.update()
                QApplication.processEvents()
            else:
                log("–ù–µ –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è autostart UI", "‚ö† WARNING")
                
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_autostart_ui: {e}", "ERROR")

    def update_ui_state(self, running: bool) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—Å–∫–∞"""
        try:
            autostart_active = False
            if hasattr(self.app, 'service_manager'):
                autostart_active = self.app.service_manager.check_autostart_exists()
            
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ù–ï –∞–∫—Ç–∏–≤–µ–Ω, —É–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if not autostart_active:
                if running:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if hasattr(self.app, 'start_stop_stack') and hasattr(self.app, 'stop_btn'):
                        self.app.start_stop_stack.setCurrentWidget(self.app.stop_btn)
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞
                    if hasattr(self.app, 'start_stop_stack') and hasattr(self.app, 'start_btn'):
                        self.app.start_stop_stack.setCurrentWidget(self.app.start_btn)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ update_ui_state: {e}", "‚ùå ERROR")

    def update_button_visibility(self, is_running: bool, autostart_active: bool) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            if not hasattr(self.app, 'start_btn') or not hasattr(self.app, 'stop_btn'):
                return
                
            if is_running or autostart_active:
                self.app.start_btn.setVisible(False)
                self.app.stop_btn.setVisible(True)
            else:
                self.app.start_btn.setVisible(True)
                self.app.stop_btn.setVisible(False)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ update_button_visibility: {e}", "‚ùå ERROR")

    def update_process_status_display(self, is_running: bool, autostart_active: bool) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            if not hasattr(self.app, 'process_status_value'):
                return
                
            if autostart_active:
                self.app.process_status_value.setText("–ê–í–¢–û–ó–ê–ü–£–°–ö –ê–ö–¢–ò–í–ï–ù")
                self.app.process_status_value.setStyleSheet("color: purple; font-weight: bold;")
            else:
                if is_running:
                    self.app.process_status_value.setText("–í–ö–õ–Æ–ß–ï–ù")
                    self.app.process_status_value.setStyleSheet("color: green; font-weight: bold;")
                else:
                    self.app.process_status_value.setText("–í–´–ö–õ–Æ–ß–ï–ù")
                    self.app.process_status_value.setStyleSheet("color: red; font-weight: bold;")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ update_process_status_display: {e}", "‚ùå ERROR")

    def update_title_with_subscription_status(self, is_premium: bool, current_theme: str, days_remaining: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        try:
            from config import APP_VERSION
            
            base_title = f"Zapret v{APP_VERSION}"
            
            if is_premium:
                if days_remaining > 0:
                    if days_remaining <= 7:
                        # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                        title = f"{base_title} - Premium ({days_remaining} –¥–Ω.)"
                    else:
                        # –û–±—ã—á–Ω–∞—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞
                        title = f"{base_title} - Premium"
                else:
                    # –ò—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    title = f"{base_title} - Premium (–∏—Å—Ç–µ–∫–ª–∞)"
            else:
                title = base_title
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–º–∏—É–º
            if current_theme and "(Premium)" in current_theme:
                clean_theme = current_theme.replace(" (Premium)", "").replace(" (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)", "")
                title += f" | {clean_theme}"
            
            self.app.setWindowTitle(title)
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}", "‚ùå ERROR")

    def update_subscription_button_text(self, is_premium: bool, days_remaining: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            if not hasattr(self.app, 'subscription_btn'):
                return
                
            if is_premium:
                if days_remaining > 0:
                    if days_remaining <= 7:
                        # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç
                        self.app.subscription_btn.setText(f"Premium (–æ—Å—Ç–∞–ª–æ—Å—å {days_remaining} –¥–Ω.)")
                    else:
                        # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                        self.app.subscription_btn.setText("Premium –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    # –ò—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    self.app.subscription_btn.setText("Premium –∏—Å—Ç–µ–∫")
            else:
                self.app.subscription_btn.setText("–ü–æ–ª—É—á–∏—Ç—å Premium")
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", "‚ùå ERROR")

    def update_strategies_list(self, force_update: bool = False) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        log("üîµ update_strategies_list –Ω–∞—á–∞—Ç", "DEBUG")
        
        try:
            if not hasattr(self.app, 'strategy_manager'):
                log("Strategy manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "‚ùå ERROR")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            log("üîµ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ manager", "DEBUG")
            strategies = self.app.strategy_manager.get_strategies_list(force_update=force_update)
            log(f"üîµ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies) if strategies else 0}", "DEBUG")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
            current_strategy = None
            if hasattr(self.app, 'current_strategy_name') and self.app.current_strategy_name:
                current_strategy = self.app.current_strategy_name
            elif hasattr(self.app, 'current_strategy_label'):
                current_strategy = self.app.current_strategy_label.text()
                if current_strategy == "–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç DPI –æ—Ç–∫–ª—é—á–µ–Ω":
                    from config import get_last_strategy
                    current_strategy = get_last_strategy()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É, –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±—Ä–∞–Ω–∞
            if current_strategy and current_strategy != "–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç DPI –æ—Ç–∫–ª—é—á–µ–Ω" and hasattr(self.app, 'current_strategy_label'):
                self.app.current_strategy_label.setText(current_strategy)
            
            log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(strategies)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", level="INFO")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}"
            log(error_msg, level="‚ùå ERROR")
            if hasattr(self.app, 'set_status'):
                self.app.set_status(error_msg)
        finally:
            log("üîµ update_strategies_list –∑–∞–≤–µ—Ä—à–µ–Ω", "DEBUG")

    def _apply_theme_combo_styles(self) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ –∫–æ–º–±–æ-–±–æ–∫—Å—É —Ç–µ–º –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ theme_handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if hasattr(self.app, 'theme_handler') and self.app.theme_handler is not None:
            self.app.theme_handler.update_theme_combo_styles()
        else:
            # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ theme_handler –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            log("theme_handler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å—Ç–∏–ª–∏", "DEBUG")
            try:
                from ui.theme import COMMON_STYLE
                style = f"""
                QComboBox {{
                    {COMMON_STYLE}
                    text-align: center;
                    font-size: 10pt;
                    padding: 5px;
                    border: 1px solid #ccc;
                    border-radius: 4px;
                }}
                """
                if hasattr(self.app, 'theme_combo'):
                    self.app.theme_combo.setStyleSheet(style)
            except Exception as e:
                log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è fallback —Å—Ç–∏–ª–µ–π: {e}", "‚ùå ERROR")

    def get_proxy_button_config(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–Ω–æ–ø–∫–∏ proxy.
        
        Returns:
            dict: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–Ω–æ–ø–∫–∏
        """
        return {
            'enabled_state': {
                'full_text': '–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ ChatGPT, Spotify, Twitch',
                'short_text': '–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É',
                'color': "255, 93, 174",
                'icon': 'fa5s.lock',
                'tooltip': '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ hosts-—Ñ–∞–π–ª'
            },
            'disabled_state': {
                'full_text': '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ChatGPT, Spotify, Twitch –∏ –¥—Ä.',
                'short_text': '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã',
                'color': "218, 165, 32",
                'icon': 'fa5s.unlock',
                'tooltip': '–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ hosts-—Ñ–∞–π–ª'
            }
        }