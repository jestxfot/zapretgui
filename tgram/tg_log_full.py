"""
tgram/tg_log_full.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–î–µ–º–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —à–ª—ë—Ç —Ñ–∞–π–ª –ª–æ–≥–∞ –≤ Telegram-–±–æ—Ç–∞.

–ù–æ–≤–æ–µ:
    ‚Ä¢ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º QThread (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç GUI);
    ‚Ä¢ Flood-wait (429) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ tgram/tg_sender.send_file_to_tg ‚Üí
      –µ—Å–ª–∏ –±—ã–ª 429 ‚Äì –¥–µ–º–æ–Ω –¥–µ–ª–∞–µ—Ç –ø–∞—É–∑—É –µ—â—ë –Ω–∞ 60 —Å –ø–æ–≤–µ—Ä—Ö –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.
"""

from __future__ import annotations

import hashlib
import io
import os
import platform
import time
from pathlib import Path

from PyQt6.QtCore import QObject, QThread, QTimer, pyqtSignal

from config import APP_VERSION # build_info moved to config/__init__.py
from log import log
from tgram import get_client_id            # UUID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
from .tg_log_bot import send_log_file as send_log_via_bot


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _file_hash(path: str) -> str:
    """
    MD5 –∏–∑ –ø–µ—Ä–≤—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 64 –ö–ë ‚Äì –±—ã—Å—Ç—Ä–æ, –Ω–æ –Ω–∞–¥—ë–∂–Ω–æ,
    –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ¬´—Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è?¬ª.
    """
    h = hashlib.md5()
    with open(path, "rb") as f:
        first = f.read(64 * 1024)
        if len(first) < 64 * 1024:          # –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª
            h.update(first)
            return h.hexdigest()

        f.seek(-64 * 1024, io.SEEK_END)
        last = f.read(64 * 1024)

    h.update(first)
    h.update(last)
    return h.hexdigest()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class TgSendWorker(QObject):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞."""
    finished = pyqtSignal(bool, float, str)  # ok, extra_wait_seconds, error_msg

    def __init__(self, path: str, caption: str, use_log_bot: bool = False):
        super().__init__()
        self._path = path
        self._cap = caption
        self._use_log_bot = use_log_bot  # –§–ª–∞–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞

    def run(self):
        try:
            if self._use_log_bot:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
                success, error_msg = send_log_via_bot(self._path, self._cap)
                if success:
                    self.finished.emit(True, 0.0, "")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ flood-wait
                    is_flood = "wait" in (error_msg or "").lower()
                    extra_wait = 60.0 if is_flood else 0.0
                    self.finished.emit(False, extra_wait, error_msg or "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
                from tgram import send_file_to_tg
                ok = send_file_to_tg(self._path, self._cap)
                if ok:
                    self.finished.emit(True, 0.0, "")
                else:
                    self.finished.emit(False, 0.0, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                    
        except Exception as e:
            error_msg = str(e)
            is_flood_wait = "429" in error_msg or "Too Many Requests" in error_msg
            extra_wait = 60.0 if is_flood_wait else 0.0
            
            log(f"[TgSendWorker] error: {error_msg}", "‚ùå ERROR")
            self.finished.emit(False, extra_wait, error_msg)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class FullLogDaemon(QObject):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ¬´–ø–æ–ª–Ω—ã–π¬ª –ª–æ–≥-—Ñ–∞–π–ª –≤ TG:
      ‚Ä¢ –∫–∞–∂–¥—ã–µ interval —Å–µ–∫—É–Ω–¥;
      ‚Ä¢ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è;
      ‚Ä¢ –≤ caption ‚Äì –¥–æ–ø. –∏–Ω—Ñ–æ + –ø–æ—Å–ª–µ–¥–Ω–∏–µ ERROR-—Å—Ç—Ä–æ–∫–∏.
    """

    def __init__(self, log_path: str, interval: int = 600, parent=None):
        super().__init__(parent)

        self.log_path = Path(log_path).absolute()
        self.log_path.parent.mkdir(parents=True, exist_ok=True)
        self.log_path.touch(exist_ok=True)

        # —Å–Ω–∏–º–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_hash = None
        self.last_line_count = 0

        # –µ—Å–ª–∏ –±—ã–ª Flood-wait ‚Äì –∂–¥—ë–º –¥–æ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self._suspend_until = 0.0
        # —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self._busy_thread: QThread | None = None

        # –Ω–∞—á–∞–ª—å–Ω—ã–π snapshot
        self._snapshot(first_time=True)

        # —Ç–∞–π–º–µ—Ä –æ–ø—Ä–æ—Å–∞
        self.timer = QTimer(self)
        self.timer.setInterval(interval * 1000)
        self.timer.timeout.connect(self._tick)
        self.timer.start()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _tick(self):
        # –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ flood-wait
        if time.time() < self._suspend_until:
            return

        # —É–∂–µ –∏–¥—ë—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞
        if self._busy_thread is not None:
            return

        changed, added, added_lines = self._snapshot()
        if not changed:
            return

        # ---- —Ñ–æ—Ä–º–∏—Ä—É–µ–º caption --------------------------------
        error_lines = [ln for ln in added_lines if "[ERROR]" in ln]

        caption_parts = [
            "üìÑ –ü–æ–ª–Ω—ã–π –ª–æ–≥ Zapret",
            f"Zapret v{APP_VERSION}",
            f"Host: {platform.node()}",
            f"üÜî {get_client_id()}",
            f"üïí {time.strftime('%d.%m.%Y %H:%M:%S')}",
            f"‚ûï {added} —Å—Ç—Ä–æ–∫(–∏)",
        ]

        if error_lines:
            snippet = "\n".join(error_lines[-3:])
            # Telegram: caption ‚â§ 1024 —Å–∏–º–≤–æ–ª–∞
            caption_parts.append("‚ö†Ô∏è ERROR:\n" + snippet[-800:])

        caption = "\n".join(caption_parts)

        # ---- –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä –≤ –ø–æ—Ç–æ–∫–µ -------------------------
        thread = QThread(self)
        worker = TgSendWorker(str(self.log_path), caption)
        worker.moveToThread(thread)

        thread.started.connect(worker.run)

        def _on_done(ok: bool, extra_wait: float, error_msg: str = ""):
            if ok:
                log("[FullLogDaemon] –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram", "‚úÖ INFO")
            else:
                if extra_wait > 0:
                    log(f"[FullLogDaemon] Flood-wait, –ø–∞—É–∑–∞ {extra_wait}s", "‚ö† WARNING")
                    self._suspend_until = time.time() + extra_wait
                else:
                    log(f"[FullLogDaemon] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}", "‚ùå ERROR")
            
            worker.deleteLater()
            thread.quit()
            thread.wait()
            self._busy_thread = None

        worker.finished.connect(_on_done)

        self._busy_thread = thread
        thread.start()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _snapshot(self, *, first_time=False):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: changed?, added_count, added_lines_list
        """
        added_lines: list[str] = []
        line_count = 0

        with self.log_path.open("r", encoding="utf-8-sig", errors="replace") as f:
            for idx, line in enumerate(f, 1):
                if idx > self.last_line_count:
                    added_lines.append(line.rstrip("\n"))
                line_count = idx

        file_hash = _file_hash(str(self.log_path))

        if first_time:
            self.last_hash = file_hash
            self.last_line_count = line_count
            return False, 0, []

        # —Ä–æ—Ç–∞—Ü–∏—è? —Å—Ç—Ä–æ–∫ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ
        if line_count < self.last_line_count:
            added_lines = self._read_all_lines()
            added = line_count
            changed = True
        else:
            added = line_count - self.last_line_count
            changed = (file_hash != self.last_hash)

        if changed:
            self.last_hash = file_hash
            self.last_line_count = line_count

        return changed, added, added_lines

    # ----------------------------------------------------------------
    def _read_all_lines(self) -> list[str]:
        with self.log_path.open("r", encoding="utf-8-sig", errors="replace") as f:
            return [ln.rstrip("\n") for ln in f]