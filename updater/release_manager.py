# updater/release_manager.py
"""
release_manager.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.
–ü—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö GitHub (403, rate limit –∏ –¥—Ä.) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π HTTP/HTTPS —Å–µ—Ä–≤–µ—Ä.
"""

from __future__ import annotations
from typing import Optional, Dict, Any
import requests
import os
import urllib3
from urllib.parse import urljoin

from .github_release import get_latest_release as github_get_latest_release
from .github_release import normalize_version
from log import log
from config import CHANNEL

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è fallback —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
def get_fallback_servers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ fallback —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ"""
    servers = []
    
    # –ß–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ZAPRET_FALLBACK_SERVER_1, ZAPRET_FALLBACK_SERVER_2, etc.
    # –§–æ—Ä–º–∞—Ç: https://example.com –∏–ª–∏ http://example.com
    for i in range(1, 10):  # –î–æ 9 —Å–µ—Ä–≤–µ—Ä–æ–≤
        server_url = os.getenv(f"ZAPRET_FALLBACK_SERVER_{i}")
        if server_url:
            servers.append({
                "url": server_url.rstrip('/'),
                "verify_ssl": not server_url.startswith("https://127.0.0.1") and not server_url.startswith("https://localhost"),
                "priority": i,
                "name": f"Fallback Server {i}"
            })
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
    if not servers:
        # –û—Å–Ω–æ–≤–Ω–æ–π HTTPS —Å–µ—Ä–≤–µ—Ä
        if os.getenv("ZAPRET_HTTPS_SERVER"):
            servers.append({
                "url": os.getenv("ZAPRET_HTTPS_SERVER").rstrip('/'),
                "verify_ssl": False,
                "priority": 1,
                "name": "Custom HTTPS Server"
            })
        else:
            servers.append({
                "url": "https://88.210.21.236:888",
                "verify_ssl": False,
                "priority": 1,
                "name": "Local HTTPS"
            })
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä
        if os.getenv("ZAPRET_HTTP_SERVER"):
            servers.append({
                "url": os.getenv("ZAPRET_HTTP_SERVER").rstrip('/'),
                "verify_ssl": True,
                "priority": 2,
                "name": "Custom HTTP Server"
            })
        else:
            servers.append({
                "url": "http://88.210.21.236:887",
                "verify_ssl": True,
                "priority": 2,
                "name": "Local HTTP"
            })
    
    return servers

# –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
TIMEOUT = 10

class ReleaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback"""
    
    def __init__(self):
        self.last_error: Optional[str] = None
        self.last_source: Optional[str] = None
        self.fallback_servers = get_fallback_servers()
        
    def get_latest_release(self, channel: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ.
        –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è GitHub, –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ fallback —Å–µ—Ä–≤–µ—Ä—ã.
        
        Args:
            channel: "stable" –∏–ª–∏ "dev"
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–ª–∏–∑–µ –∏–ª–∏ None
        """
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º GitHub
        log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ GitHub...", "üîÑ RELEASE")
        github_result = self._try_github(channel)
        
        if github_result:
            self.last_source = "GitHub"
            self.last_error = None
            return github_result
            
        # 2. GitHub –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º fallback —Å–µ—Ä–≤–µ—Ä—ã
        log(f"‚ö†Ô∏è GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {self.last_error}. –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã...", "üîÑ RELEASE")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        servers = sorted(self.fallback_servers, key=lambda x: x["priority"])
        
        for server in servers:
            log(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—É–ø–µ—Ä —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –µ—Å–ª–∏ –†–ö–ù –∑–∞–±–∞–Ω–∏—Ç GitHub...", "üîÑ RELEASE")
            
            fallback_result = self._try_fallback_server(server, channel)
            if fallback_result:
                self.last_source = server['name']
                self.last_error = None
                return fallback_result
                
        # 3. –ù–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–∞—Ö –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞", "üîÑ RELEASE")
        return None
        
    def _try_github(self, channel: str) -> Optional[Dict[str, Any]]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑ —Å GitHub"""
        try:
            result = github_get_latest_release(channel)
            if result:
                log(f"‚úÖ GitHub: –Ω–∞–π–¥–µ–Ω —Ä–µ–ª–∏–∑ {result['version']}", "üîÑ RELEASE")
            return result
        except requests.exceptions.HTTPError as e:
            if e.response and e.response.status_code == 403:
                self.last_error = "GitHub API rate limit (403)"
            else:
                self.last_error = f"HTTP error: {e}"
        except requests.exceptions.Timeout:
            self.last_error = "GitHub timeout"
        except requests.exceptions.ConnectionError:
            self.last_error = "GitHub connection error"
        except Exception as e:
            self.last_error = f"GitHub error: {str(e)}"
            
        return None

    def _try_fallback_server(self, server: Dict[str, Any], channel: str) -> Optional[Dict[str, Any]]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑ —Å fallback —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
            api_channel = "test" if channel == "dev" else channel
            endpoint = f"/api/version/{api_channel}"
            url = urljoin(server["url"], endpoint)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
            verify = server["verify_ssl"]
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(
                url,
                timeout=TIMEOUT,
                verify=verify,
                headers={"Accept": "application/json"}
            )
            response.raise_for_status()
            
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            if not data.get("file") or not data["file"].get("exists"):
                log(f"‚ö†Ô∏è {server['name']}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", "üîÑ RELEASE")
                return None
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_channel = "test" if channel == "dev" else channel
            download_url = urljoin(server["url"], f"/download/{download_channel}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å
            api_key = os.getenv("ZAPRET_SERVER_API_KEY")
            if api_key:
                download_url += f"?api_key={api_key}"
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL
            alt_urls = []
            
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π URL —ç—Ç–æ HTTPS, –¥–æ–±–∞–≤–ª—è–µ–º HTTP –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            if download_url.startswith("https://") and "88.210.21.236" in download_url:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTTP —Å–µ—Ä–≤–µ—Ä
                for alt_server in self.fallback_servers:
                    if alt_server["url"].startswith("http://") and "88.210.21.236" in alt_server["url"]:
                        alt_download_url = urljoin(alt_server["url"], f"/download/{download_channel}")
                        if api_key:
                            alt_download_url += f"?api_key={api_key}"
                        alt_urls.append(alt_download_url)
                        break
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å github_release
            result = {
                "version": normalize_version(data.get("version", "0.0.0")),
                "tag_name": data.get("tag", f"v{data.get('version', '0.0.0')}"),
                "update_url": download_url,
                "release_notes": data.get("release_notes", ""),
                "prerelease": channel == "dev",
                "name": data.get("name", f"Zapret {channel}"),
                "published_at": data.get("date", ""),
                "source": server['name'],  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                "verify_ssl": verify  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –µ—Å–ª–∏ –µ—Å—Ç—å
            if alt_urls:
                result["alt_urls"] = alt_urls
                
            return result
            
        except requests.exceptions.HTTPError as e:
            self.last_error = f"{server['name']}: HTTP {e.response.status_code if e.response else 'error'}"
        except requests.exceptions.Timeout:
            self.last_error = f"{server['name']}: timeout"
        except requests.exceptions.ConnectionError:
            self.last_error = f"{server['name']}: connection error"
        except requests.exceptions.SSLError:
            self.last_error = f"{server['name']}: SSL error"
        except Exception as e:
            self.last_error = f"{server['name']}: {str(e)}"
            
        return None
        
    def check_server_health(self, server_url: str, verify_ssl: bool = True) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        """
        try:
            url = urljoin(server_url, "/api/health")
            response = requests.get(
                url,
                timeout=5,
                verify=verify_ssl
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_release_manager = ReleaseManager()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_latest_release(channel: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å github_release.py)
    """
    return _release_manager.get_latest_release(channel)

def get_release_manager() -> ReleaseManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–ª–∏–∑–æ–≤"""
    return _release_manager