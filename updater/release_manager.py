"""
release_manager.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.
–ü—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö GitHub (403, rate limit –∏ –¥—Ä.) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π HTTP/HTTPS —Å–µ—Ä–≤–µ—Ä.

–° —É–º–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
"""

from __future__ import annotations
from typing import Optional, Dict, Any, List
import requests
import os
import json
import time
import urllib3
from urllib.parse import urljoin
from datetime import datetime

from .github_release import get_latest_release as github_get_latest_release
from .github_release import normalize_version, is_rate_limited
from log import log
from config import CHANNEL

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
STATS_FILE = os.path.join(os.path.dirname(__file__), '.server_stats.json')

def get_fallback_servers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ fallback —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ"""
    servers = []
    
    # –ß–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ZAPRET_FALLBACK_SERVER_1, ZAPRET_FALLBACK_SERVER_2, etc.
    for i in range(1, 10):  # –î–æ 9 —Å–µ—Ä–≤–µ—Ä–æ–≤
        server_url = os.getenv(f"ZAPRET_FALLBACK_SERVER_{i}")
        if server_url:
            servers.append({
                "url": server_url.rstrip('/'),
                "verify_ssl": not server_url.startswith("https://127.0.0.1") and not server_url.startswith("https://localhost"),
                "priority": i,
                "name": f"Fallback Server {i}"
            })
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
    if not servers:
        # –û—Å–Ω–æ–≤–Ω–æ–π HTTPS —Å–µ—Ä–≤–µ—Ä
        if os.getenv("ZAPRET_HTTPS_SERVER"):
            servers.append({
                "url": os.getenv("ZAPRET_HTTPS_SERVER").rstrip('/'),
                "verify_ssl": False,
                "priority": 1,
                "name": "Custom HTTPS Server"
            })
        else:
            servers.append({
                "url": "https://88.210.21.236:888",
                "verify_ssl": False,
                "priority": 1,
                "name": "Private Server"  
            })
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä
        if os.getenv("ZAPRET_HTTP_SERVER"):
            servers.append({
                "url": os.getenv("ZAPRET_HTTP_SERVER").rstrip('/'),
                "verify_ssl": True,
                "priority": 2,
                "name": "Custom HTTP Server"
            })
        else:
            servers.append({
                "url": "http://88.210.21.236:887",
                "verify_ssl": True,
                "priority": 2,
                "name": "Private HTTP Server"
            })
    
    return servers

# –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
TIMEOUT = 10

class ServerStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.stats = self._load_stats()
    
    def _load_stats(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(STATS_FILE):
                with open(STATS_FILE, 'r') as f:
                    return json.load(f)
        except:
            pass
        return {}
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            with open(STATS_FILE, 'w') as f:
                json.dump(self.stats, f)
        except:
            pass
    
    def record_success(self, server_name: str, response_time: float):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        if server_name not in self.stats:
            self.stats[server_name] = {
                'successes': 0,
                'failures': 0,
                'avg_response_time': 0,
                'last_success': None,
                'last_failure': None
            }
        
        stats = self.stats[server_name]
        stats['successes'] += 1
        stats['last_success'] = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if stats['avg_response_time'] == 0:
            stats['avg_response_time'] = response_time
        else:
            stats['avg_response_time'] = (stats['avg_response_time'] + response_time) / 2
        
        self._save_stats()
    
    def record_failure(self, server_name: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        if server_name not in self.stats:
            self.stats[server_name] = {
                'successes': 0,
                'failures': 0,
                'avg_response_time': 0,
                'last_success': None,
                'last_failure': None
            }
        
        self.stats[server_name]['failures'] += 1
        self.stats[server_name]['last_failure'] = time.time()
        self._save_stats()
    
    def get_success_rate(self, server_name: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if server_name not in self.stats:
            return 0.5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50%
        
        stats = self.stats[server_name]
        total = stats['successes'] + stats['failures']
        if total == 0:
            return 0.5
        
        return stats['successes'] / total

class ReleaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback"""
    
    def __init__(self):
        self.last_error: Optional[str] = None
        self.last_source: Optional[str] = None
        self.fallback_servers = get_fallback_servers()
        self.server_stats = ServerStats()
        
    def get_latest_release(self, channel: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ.
        –£–º–Ω–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        
        Args:
            channel: "stable" –∏–ª–∏ "dev"
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–ª–∏–∑–µ –∏–ª–∏ None
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        sources = self._get_prioritized_sources()
        
        for source in sources:
            log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ {source['name']}...", "üîÑ RELEASE")
            
            start_time = time.time()
            
            if source['type'] == 'github':
                result = self._try_github(channel)
            else:
                result = self._try_fallback_server(source, channel)
            
            response_time = time.time() - start_time
            
            if result:
                self.last_source = source['name']
                self.last_error = None
                self.server_stats.record_success(source['name'], response_time)
                log(f"‚úÖ {source['name']}: –Ω–∞–π–¥–µ–Ω —Ä–µ–ª–∏–∑ {result['version']} (–≤—Ä–µ–º—è: {response_time:.2f}—Å)", "üîÑ RELEASE")
                return result
            else:
                self.server_stats.record_failure(source['name'])
                log(f"‚ö†Ô∏è {source['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {self.last_error}", "üîÑ RELEASE")
        
        # –ù–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–∞—Ö –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞", "üîÑ RELEASE")
        return None
    
    def _get_prioritized_sources(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        sources = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ GitHub rate limit
        is_limited, reset_dt = is_rate_limited()
        
        if not is_limited:
            # GitHub –¥–æ—Å—Ç—É–ø–µ–Ω
            sources.append({
                'name': 'GitHub',
                'type': 'github',
                'priority': 0
            })
        else:
            log(f"‚è≥ GitHub rate limit –¥–æ {reset_dt}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", "üîÑ RELEASE")
        
        # –î–æ–±–∞–≤–ª—è–µ–º fallback —Å–µ—Ä–≤–µ—Ä—ã
        for server in self.fallback_servers:
            sources.append({
                'name': server['name'],
                'type': 'fallback',
                'priority': server['priority'],
                'url': server['url'],
                'verify_ssl': server['verify_ssl']
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        def sort_key(source):
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            base_priority = source['priority']
            
            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            success_rate = self.server_stats.get_success_rate(source['name'])
            stats = self.server_stats.stats.get(source['name'], {})
            
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª —É—Å–ø–µ—à–µ–Ω, –ø–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if stats.get('last_success'):
                time_since_success = time.time() - stats['last_success']
                if time_since_success < 300:  # –ú–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                    base_priority -= 1
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            base_priority -= success_rate * 2
            
            return base_priority
        
        sources.sort(key=sort_key)
        
        return sources
        
    def _try_github(self, channel: str) -> Optional[Dict[str, Any]]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑ —Å GitHub"""
        try:
            result = github_get_latest_release(channel)
            if result:
                log(f"‚úÖ GitHub: –Ω–∞–π–¥–µ–Ω —Ä–µ–ª–∏–∑ {result['version']}", "üîÑ RELEASE")
            return result
        except requests.exceptions.HTTPError as e:
            if e.response and e.response.status_code == 403:
                self.last_error = "GitHub API rate limit (403)"
            else:
                self.last_error = f"HTTP error: {e}"
        except requests.exceptions.Timeout:
            self.last_error = "GitHub timeout"
        except requests.exceptions.ConnectionError:
            self.last_error = "GitHub connection error"
        except Exception as e:
            self.last_error = f"GitHub error: {str(e)}"
            
        return None

    def _try_fallback_server(self, server: Dict[str, Any], channel: str) -> Optional[Dict[str, Any]]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑ —Å fallback —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞
            api_channel = "test" if channel == "dev" else channel
            endpoint = f"/api/version/{api_channel}"
            url = urljoin(server["url"], endpoint)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
            verify = server["verify_ssl"]
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(
                url,
                timeout=TIMEOUT,
                verify=verify,
                headers={"Accept": "application/json"}
            )
            response.raise_for_status()
            
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            if not data.get("file") or not data["file"].get("exists"):
                log(f"‚ö†Ô∏è {server['name']}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", "üîÑ RELEASE")
                return None
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_channel = "test" if channel == "dev" else channel
            download_url = urljoin(server["url"], f"/download/{download_channel}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å
            api_key = os.getenv("ZAPRET_SERVER_API_KEY")
            if api_key:
                download_url += f"?api_key={api_key}"
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å github_release
            result = {
                "version": normalize_version(data.get("version", "0.0.0")),
                "tag_name": data.get("tag", f"v{data.get('version', '0.0.0')}"),
                "update_url": download_url,
                "release_notes": data.get("release_notes", ""),
                "prerelease": channel == "dev",
                "name": data.get("name", f"Zapret {channel}"),
                "published_at": data.get("date", ""),
                "source": server['name'],
                "verify_ssl": verify
            }
                
            return result
            
        except requests.exceptions.HTTPError as e:
            self.last_error = f"{server['name']}: HTTP {e.response.status_code if e.response else 'error'}"
        except requests.exceptions.Timeout:
            self.last_error = f"{server['name']}: timeout"
        except requests.exceptions.ConnectionError:
            self.last_error = f"{server['name']}: connection error"
        except requests.exceptions.SSLError:
            self.last_error = f"{server['name']}: SSL error"
        except Exception as e:
            self.last_error = f"{server['name']}: {str(e)}"
            
        return None
        
    def check_server_health(self, server_url: str, verify_ssl: bool = True) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        """
        try:
            url = urljoin(server_url, "/api/health")
            response = requests.get(
                url,
                timeout=5,
                verify=verify_ssl
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }
    
    def get_server_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        return self.server_stats.stats

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_release_manager = ReleaseManager()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_latest_release(channel: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å github_release.py)
    """
    return _release_manager.get_latest_release(channel)

def get_release_manager() -> ReleaseManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–ª–∏–∑–æ–≤"""
    return _release_manager