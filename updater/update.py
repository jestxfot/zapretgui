# updater/update.py
"""
updater/update.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç GitHub releases –∏, –µ—Å–ª–∏ –≤ —Å–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ (stable / dev) 
–µ—Å—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∞—è –≤–µ—Ä—Å–∏—è, —Ç–∏—Ö–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫, –∑–∞–ø—É—Å–∫–∞–µ—Ç 
–µ–≥–æ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É.

API 100-% —Å–æ–≤–º–µ—Å—Ç–∏–º —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º:
    ‚Ä¢ run_update_async(parent, silent=False)        ‚Äì —Å–æ–∑–¥–∞—ë—Ç –ø–æ—Ç–æ–∫
    ‚Ä¢ check_and_run_update(parent, status_cb, ‚Ä¶)    ‚Äì —Å–∞–º–∞ –ª–æ–≥–∏–∫–∞
    ‚Ä¢ —Å–∏–≥–Ω–∞–ª UpdateWorker.finished(bool)            ‚Äì –æ—Å—Ç–∞—ë—Ç—Å—è bool
"""
from __future__ import annotations

import os, sys, tempfile, subprocess, shutil, time, requests
from typing import Callable

from PyQt6.QtCore    import QObject, QThread, pyqtSignal, QTimer
from PyQt6.QtWidgets import QMessageBox
from packaging import version
from utils import run_hidden

from .release_manager import get_latest_release
from .github_release import normalize_version
from config import CHANNEL, APP_VERSION
from log import log

TIMEOUT = 10  # —Å–µ–∫.

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _safe_set_status(parent, msg: str):
    """–ü–∏—à–µ–º –≤ status-label, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å; –∏–Ω–∞—á–µ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    if parent and hasattr(parent, "set_status"):
        parent.set_status(msg)
    else:
        print(msg)

def _kill_winws():
    """–ú—è–≥–∫–æ-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–±–∏–≤–∞–µ–º winws.exe, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –º–æ–≥ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª."""
    run_hidden(
        "C:\\Windows\\System32\\taskkill.exe /F /IM winws.exe /T",
        shell=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

def _download(url: str, dest: str, on_progress: Callable[[int, int], None] | None, verify_ssl: bool = True):
    import requests
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ SSL
    session = requests.Session()
    if not verify_ssl:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        session.verify = False
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    with session.get(url, stream=True, timeout=TIMEOUT, verify=verify_ssl) as resp:
        resp.raise_for_status()
        total = int(resp.headers.get("content-length", 0))
        done = 0
        with open(dest, "wb") as fp:
            for chunk in resp.iter_content(8192):
                fp.write(chunk)
                if on_progress and total:
                    done += len(chunk)
                    on_progress(done, total)

def compare_versions(v1: str, v2: str) -> int:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        -1 –µ—Å–ª–∏ v1 < v2
         0 –µ—Å–ª–∏ v1 == v2
         1 –µ—Å–ª–∏ v1 > v2
    """
    from packaging import version
    
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏–∏
        v1_norm = normalize_version(v1)
        v2_norm = normalize_version(v2)
        
        # –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ packaging.version
        ver1 = version.parse(v1_norm)
        ver2 = version.parse(v2_norm)
        
        if ver1 < ver2:
            return -1
        elif ver1 > ver2:
            return 1
        else:
            return 0
            
    except Exception as e:
        log(f"Error comparing versions '{v1}' and '{v2}': {e}", "üîÅ‚ùå ERROR")
        # Fallback –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        return -1 if v1 < v2 else (1 if v1 > v2 else 0)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–æ–Ω–æ–≤–æ–π –≤–æ—Ä–∫–µ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class UpdateWorker(QObject):
    progress = pyqtSignal(str)    # —Å—Ç–∞—Ç—É—Å-—Å—Ç—Ä–æ–∫–∞
    finished = pyqtSignal(bool)   # True ‚Äì —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω

    def __init__(self, parent=None, silent: bool = False):
        super().__init__()
        self._parent = parent
        self._silent = silent

    def _emit(self, msg: str):
        self.progress.emit(msg)

    def run(self):
        try:
            ok = check_and_run_update(
                parent    = self._parent,
                status_cb = self._emit,
                silent    = self._silent,
            )
            self.finished.emit(ok)
        except Exception as e:
            self._emit(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.finished.emit(False)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ public-API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def run_update_async(parent=None, *, silent: bool = False) -> QThread:
    """
    –°–æ–∑–¥–∞—ë—Ç QThread + UpdateWorker.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ thread (–≤ –Ω—ë–º –µ—Å—Ç—å ._worker).
    """
    thr = QThread(parent)
    worker = UpdateWorker(parent, silent)
    worker.moveToThread(thr)

    thr.started.connect(worker.run)
    worker.finished.connect(thr.quit)
    worker.finished.connect(worker.deleteLater)
    thr.finished.connect(thr.deleteLater)

    # status-label + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    worker.progress.connect(lambda m: _safe_set_status(parent, m))
    worker.progress.connect(lambda m: log(f'{m}', "üîÅ UPDATE"))

    thr._worker = worker  # üëà –∑–∞—â–∏—Ç–∏–ª–∏ –æ—Ç GC
    thr.start()

    # –¥–µ—Ä–∂–∏–º thread –≤ parent-–æ–∫–Ω–µ, —á—Ç–æ–±—ã GC –Ω–µ —É–±–∏–ª —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    if parent is not None:
        lst = getattr(parent, "_active_upd_threads", [])
        lst.append(thr)
        parent._active_upd_threads = lst
        thr.finished.connect(lambda *, l=lst, t=thr: l.remove(t))

    return thr
    
def check_and_run_update(
    *,
    parent   = None,
    status_cb: Callable[[str], None] | None = None,
    silent   : bool = False,
) -> bool:
    """
    1) –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ª–∏–∑ —Å GitHub –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞.
    2) –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ ‚Äì (optionally) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
       –∑–∞—Ç–µ–º –∫–∞—á–∞–µ—Ç .exe ‚Üí TEMP, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç winws.exe
       –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫.
    3) –ß–µ—Ä–µ–∑ 1,5 —Å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É.
    """
    # –ª–æ–∫–∞–ª—å–Ω—ã–µ ¬´—à–æ—Ä—Ç–∫–∞—Ç—ã¬ª
    def set_status(msg: str):
        if status_cb:
            status_cb(msg)
        else:
            _safe_set_status(parent, msg)

    # ‚Äî 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ --------------------------
    set_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π‚Ä¶")
    
    release_info = get_latest_release(CHANNEL)
    if not release_info:
        set_status("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return False

    new_ver = release_info["version"]
    upd_url = release_info["update_url"]
    notes   = release_info["release_notes"]
    is_pre  = release_info["prerelease"]
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        app_ver_norm = normalize_version(APP_VERSION)
    except ValueError:
        log(f"Invalid APP_VERSION format: {APP_VERSION}", "üîÅ‚ùå ERROR")
        set_status("–û—à–∏–±–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        return False
    
    log(f"Auto-update: channel={CHANNEL}, local={app_ver_norm}, remote={new_ver}, prerelease={is_pre}", "üîÅ UPDATE")

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
    cmp_result = compare_versions(app_ver_norm, new_ver)
    
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log(f"Version comparison: {app_ver_norm} vs {new_ver} = {cmp_result}", "üîÅ UPDATE")
    
    if cmp_result >= 0:  # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è >= –Ω–æ–≤–æ–π
        set_status(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç (v{app_ver_norm})")
        if not silent:
            QMessageBox.information(parent, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", f"–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è ({app_ver_norm}).")
        return False

    # ‚Äî 2. —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -----------------------------------------
    if not silent:
        version_type = " (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)" if is_pre else ""
        txt = (f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {new_ver}{version_type} (—É –≤–∞—Å {app_ver_norm}).\n\n"
               f"{notes}\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å?")
        btn = QMessageBox.question(
            parent, "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            txt,
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if btn != QMessageBox.StandardButton.Yes:
            return False

    # ‚Äî 3. —Å–∫–∞—á–∏–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ --------------------------------------------
    tmp_dir   = tempfile.mkdtemp(prefix="zapret_upd_")
    setup_exe = os.path.join(tmp_dir, "ZapretSetup.exe")

    def _prog(done, total): 
        set_status(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ‚Ä¶ {done*100//total}%")
    
    # –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    download_urls = [upd_url]
    
    # –ï—Å–ª–∏ —ç—Ç–æ HTTPS URL —Å –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º HTTP –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ fallback
    if upd_url.startswith("https://"):
        # –ó–∞–º–µ–Ω—è–µ–º https –Ω–∞ http –∏ –ø–æ—Ä—Ç –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
        if "88.210.21.236:888" in upd_url:
            http_url = upd_url.replace("https://", "http://").replace(":888", ":887")
            download_urls.append(http_url)
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å
    download_error = None
    for idx, url in enumerate(download_urls):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å SSL
            verify_ssl = not (url.startswith("https://88.210.21.236") or 
                            url.startswith("https://127.0.0.1") or 
                            url.startswith("https://localhost"))
            
            log(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å {url} (verify_ssl={verify_ssl})", "üîÅ UPDATE")
            _download(url, setup_exe, _prog if not silent else None, verify_ssl=verify_ssl)
            
            # –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–ª–∏
            download_error = None
            break
        
        except requests.exceptions.SSLError as e:
            download_error = e
            log(f"SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {url}: {e}", "üîÅ‚ùå ERROR")
            if idx < len(download_urls) - 1:
                set_status("SSL –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...")
                time.sleep(0.5)
        except Exception as e:
            download_error = e
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {url}: {e}", "üîÅ‚ùå ERROR")
            if idx < len(download_urls) - 1:
                set_status("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...")
                time.sleep(0.5)
    
    if download_error:
        set_status(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {download_error}")
        shutil.rmtree(tmp_dir, True)
        return False

    # ‚Äî 4. –∑–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ --------------------------------------------
    try:
        # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DPI-–ø—Ä–æ—Ü–µ—Å—Å –∏ —É–±–∏–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª
        from dpi.stop import stop_dpi
        stop_dpi(parent)
        time.sleep(0.5)
        _kill_winws()
        time.sleep(1.5)

        run_hidden(["C:\\Windows\\System32\\cmd.exe", "/c", "start", "", setup_exe, "/NORESTART"], shell=False)
        set_status("–ó–∞–ø—É—â–µ–Ω —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫‚Ä¶")
        # —á–µ—Ä–µ–∑ 1,5 —Å–µ–∫ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã Install‚ÄêEXE —Å–º–æ–≥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª—ã
        QTimer.singleShot(1500, lambda: os._exit(0))
        return True

    except Exception as e:
        set_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {e}")
        shutil.rmtree(tmp_dir, True)
        return False