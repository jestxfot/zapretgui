"""
updater/update.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç GitHub releases –∏, –µ—Å–ª–∏ –≤ —Å–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ (stable / dev) 
–µ—Å—Ç—å –±–æ–ª–µ–µ —Å–≤–µ–∂–∞—è –≤–µ—Ä—Å–∏—è, —Ç–∏—Ö–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫, –∑–∞–ø—É—Å–∫–∞–µ—Ç 
–µ–≥–æ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É.
"""
from __future__ import annotations

import os, sys, tempfile, subprocess, shutil, time, requests
import threading
from typing import Callable
from time import sleep

from PyQt6.QtCore    import QObject, QThread, pyqtSignal, QTimer
from PyQt6.QtWidgets import QMessageBox
from packaging import version
from utils import run_hidden

from .release_manager import get_latest_release
from .github_release import normalize_version
from config import CHANNEL, APP_VERSION
from log import log
from .download_dialog import DownloadDialog

TIMEOUT = 10  # —Å–µ–∫.

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _safe_set_status(parent, msg: str):
    """–ü–∏—à–µ–º –≤ status-label, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å; –∏–Ω–∞—á–µ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    if parent and hasattr(parent, "set_status"):
        parent.set_status(msg)
    else:
        print(msg)

def _kill_winws():
    """–ú—è–≥–∫–æ-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–±–∏–≤–∞–µ–º winws.exe, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –º–æ–≥ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª."""
    run_hidden(
        "C:\\Windows\\System32\\taskkill.exe /F /IM winws.exe /T",
        shell=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )

def _download(url: str, dest: str, on_progress: Callable[[int, int], None] | None, verify_ssl: bool = True):
    """–°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    import requests
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ SSL
    session = requests.Session()
    if not verify_ssl:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        session.verify = False
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    with session.get(url, stream=True, timeout=TIMEOUT, verify=verify_ssl) as resp:
        resp.raise_for_status()
        total = int(resp.headers.get("content-length", 0))
        done = 0
        with open(dest, "wb") as fp:
            for chunk in resp.iter_content(8192):
                fp.write(chunk)
                if on_progress and total:
                    done += len(chunk)
                    on_progress(done, total)

def _download_with_retry(url: str, dest: str, on_progress: Callable[[int, int], None] | None, 
                         verify_ssl: bool = True, max_retries: int = 3):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    import requests
    from time import sleep
    
    last_error = None
    
    for attempt in range(max_retries):
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            session = requests.Session()
            session.mount('https://', requests.adapters.HTTPAdapter(
                max_retries=requests.adapters.Retry(
                    total=3,
                    backoff_factor=0.3,
                    status_forcelist=[500, 502, 503, 504]
                )
            ))
            
            if not verify_ssl:
                session.verify = False
                import urllib3
                urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            timeout = (10, 30)  # (connect timeout, read timeout)
            
            log(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å {url}", "üîÑ DOWNLOAD")
            
            with session.get(url, stream=True, timeout=timeout, verify=verify_ssl) as resp:
                resp.raise_for_status()
                total = int(resp.headers.get("content-length", 0))
                done = 0
                
                with open(dest, "wb") as fp:
                    for chunk in resp.iter_content(chunk_size=8192):
                        if chunk:
                            fp.write(chunk)
                            if on_progress and total:
                                done += len(chunk)
                                on_progress(done, total)
            
            # –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–ª–∏
            log(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}", "üîÑ DOWNLOAD")
            return
            
        except requests.exceptions.ConnectionError as e:
            last_error = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
            log(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {last_error}", "üîÑ DOWNLOAD")
            
        except requests.exceptions.Timeout as e:
            last_error = f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
            log(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {last_error}", "üîÑ DOWNLOAD")
            
        except requests.exceptions.HTTPError as e:
            last_error = f"HTTP –æ—à–∏–±–∫–∞: {e}"
            log(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {last_error}", "üîÑ DOWNLOAD")
            
        except Exception as e:
            last_error = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            log(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {last_error}", "üîÑ DOWNLOAD")
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π)
        if attempt < max_retries - 1:
            wait_time = (attempt + 1) * 2
            log(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...", "üîÑ DOWNLOAD")
            sleep(wait_time)
    
    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")

def compare_versions(v1: str, v2: str) -> int:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        -1 –µ—Å–ª–∏ v1 < v2
         0 –µ—Å–ª–∏ v1 == v2
         1 –µ—Å–ª–∏ v1 > v2
    """
    from packaging import version
    
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏–∏
        v1_norm = normalize_version(v1)
        v2_norm = normalize_version(v2)
        
        # –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ packaging.version
        ver1 = version.parse(v1_norm)
        ver2 = version.parse(v2_norm)
        
        if ver1 < ver2:
            return -1
        elif ver1 > ver2:
            return 1
        else:
            return 0
            
    except Exception as e:
        log(f"Error comparing versions '{v1}' and '{v2}': {e}", "üîÅ‚ùå ERROR")
        # Fallback –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        return -1 if v1 < v2 else (1 if v1 > v2 else 0)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ñ–æ–Ω–æ–≤–æ–π –≤–æ—Ä–∫–µ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class UpdateWorker(QObject):
    progress = pyqtSignal(str)        # —Å—Ç–∞—Ç—É—Å-—Å—Ç—Ä–æ–∫–∞
    progress_value = pyqtSignal(int)  # –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)
    progress_bytes = pyqtSignal(int, int, int)  # (percent, downloaded, total) –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    finished = pyqtSignal(bool)       # True ‚Äì —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω
    ask_user = pyqtSignal(str, str, bool)  # (version, notes, is_prerelease)
    show_no_updates = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ "–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
    show_download_dialog = pyqtSignal(str)  # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ (version)
    hide_download_dialog = pyqtSignal()  # –°–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    download_complete = pyqtSignal()  # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    download_failed = pyqtSignal(str)  # –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    retry_download = pyqtSignal()  # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏

    def __init__(self, parent=None, silent: bool = False):
        super().__init__()
        self._parent = parent
        self._silent = silent
        self._should_continue = True
        self._user_response = None
        self._response_event = threading.Event()
        self._retry_requested = False
        self._last_release_info = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞

    def set_user_response(self, response: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ UI –ø–æ—Ç–æ–∫–∞"""
        log(f"UpdateWorker: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response}", "üîÅ UPDATE")
        self._user_response = response
        self._response_event.set()

    def _emit(self, msg: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ UI –ø–æ—Ç–æ–∫"""
        self.progress.emit(msg)

    def _emit_progress(self, percent: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ UI –ø–æ—Ç–æ–∫"""
        self.progress_value.emit(percent)
    
    def _ask_user_dialog(self, new_ver: str, notes: str, is_pre: bool):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤ UI –ø–æ—Ç–æ–∫–µ)"""
        if self._silent:
            # –í —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            log("UpdateWorker: —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "üîÅ UPDATE")
            self._user_response = True
            return True
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç
        self._user_response = None
        self._response_event.clear()
        
        # –≠–º–∏—Ç–∏–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ UI –ø–æ—Ç–æ–∫–µ
        log(f"UpdateWorker: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ {new_ver}", "üîÅ UPDATE")
        self.ask_user.emit(new_ver, notes, is_pre)
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)
        if self._response_event.wait(timeout=60):
            log(f"UpdateWorker: –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {self._user_response}", "üîÅ UPDATE")
            return self._user_response
        else:
            log("UpdateWorker: —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "üîÅ UPDATE")
            return False
    
    def request_retry(self):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        self._retry_requested = True
        if self._last_release_info:
            self._download_update(self._last_release_info)
    
    def _get_download_urls(self, release_info: dict) -> list:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ URL –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        urls = []
        upd_url = release_info["update_url"]
        
        # –û—Å–Ω–æ–≤–Ω–æ–π URL
        verify_ssl = release_info.get("verify_ssl", True)
        urls.append((upd_url, verify_ssl))
        
        # –ï—Å–ª–∏ —ç—Ç–æ GitHub URL, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if "github.com" in upd_url or "githubusercontent.com" in upd_url:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            proxy_url = os.getenv("ZAPRET_GITHUB_PROXY")
            if proxy_url:
                proxied_url = upd_url.replace("https://github.com", proxy_url)
                proxied_url = proxied_url.replace("https://github-releases.githubusercontent.com", proxy_url)
                urls.append((proxied_url, False))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å fallback —Å–µ—Ä–≤–µ—Ä —Å —Ñ–∞–π–ª–æ–º
        if release_info.get("source") and "Private" in release_info.get("source", ""):
            # –£–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –æ—Ç fallback —Å–µ—Ä–≤–µ—Ä–∞
            pass
        
        # –ï—Å–ª–∏ —ç—Ç–æ HTTPS URL —Å –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º HTTP –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ fallback
        if upd_url.startswith("https://"):
            if "88.210.21.236:888" in upd_url:
                http_url = upd_url.replace("https://", "http://").replace(":888", ":887")
                urls.append((http_url, True))
        
        return urls
    
    def _download_update(self, release_info: dict) -> bool:
        """–û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        new_ver = release_info["version"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        log(f"UpdateWorker: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {new_ver}", "üîÅ UPDATE")
        self.show_download_dialog.emit(new_ver)
        
        tmp_dir = tempfile.mkdtemp(prefix="zapret_upd_")
        setup_exe = os.path.join(tmp_dir, "ZapretSetup.exe")
        
        def _prog(done, total):
            percent = done * 100 // total if total > 0 else 0
            self.progress_bytes.emit(percent, done, total)
            self._emit(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è‚Ä¶ {percent}%")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_urls = self._get_download_urls(release_info)
        
        download_error = None
        for idx, (url, verify_ssl) in enumerate(download_urls):
            try:
                log(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è #{idx+1} —Å {url} (verify_ssl={verify_ssl})", "üîÅ UPDATE")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                _download_with_retry(url, setup_exe, _prog, verify_ssl=verify_ssl)
                
                # –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–ª–∏
                download_error = None
                self.download_complete.emit()
                break
                
            except Exception as e:
                download_error = e
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {url}: {e}", "üîÅ‚ùå ERROR")
                
                if idx < len(download_urls) - 1:
                    self._emit("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫...")
                    time.sleep(1)
        
        if download_error:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞
            self._last_release_info = release_info
            
            error_msg = str(download_error)
            if "ConnectionPool" in error_msg or "Connection" in error_msg:
                error_msg = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
            
            self.download_failed.emit(error_msg)
            self._emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}")
            shutil.rmtree(tmp_dir, True)
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
        try:
            self._emit("–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞‚Ä¶")

            setup_args = [setup_exe, "/SILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/CLOSEAPPLICATIONS", "/RESTARTAPPLICATIONS"]

            # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º –ø–æ—Å–ª–µ
            run_hidden(["C:\\Windows\\System32\\cmd.exe", "/c", "start", ""] + setup_args, shell=False)
            
            # —á–µ—Ä–µ–∑ 1,5 —Å–µ–∫ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã Install‚ÄêEXE —Å–º–æ–≥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª—ã
            QTimer.singleShot(1500, lambda: os._exit(0))
            return True
            
        except Exception as e:
            self._emit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {e}")
            shutil.rmtree(tmp_dir, True)
            return False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            ok = self._check_and_run_update()
            self.finished.emit(ok)
        except Exception as e:
            log(f"UpdateWorker: –æ—à–∏–±–∫–∞ –≤ run(): {e}", "üîÅ‚ùå ERROR")
            self._emit(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.finished.emit(False)

    def _check_and_run_update(self) -> bool:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        """
        # ‚Äî 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ --------------------------
        self._emit("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π‚Ä¶")
        
        release_info = get_latest_release(CHANNEL)
        if not release_info:
            self._emit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return False

        new_ver = release_info["version"]
        notes   = release_info["release_notes"]
        is_pre  = release_info["prerelease"]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        try:
            app_ver_norm = normalize_version(APP_VERSION)
        except ValueError:
            log(f"Invalid APP_VERSION format: {APP_VERSION}", "üîÅ‚ùå ERROR")
            self._emit("–û—à–∏–±–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
            return False
        
        log(f"Auto-update: channel={CHANNEL}, local={app_ver_norm}, remote={new_ver}, prerelease={is_pre}", "üîÅ UPDATE")

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
        cmp_result = compare_versions(app_ver_norm, new_ver)
        
        log(f"Version comparison: {app_ver_norm} vs {new_ver} = {cmp_result}", "üîÅ UPDATE")
        
        if cmp_result >= 0:  # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è >= –Ω–æ–≤–æ–π
            self._emit(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç (v{app_ver_norm})")
            if not self._silent:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
                self.show_no_updates.emit(app_ver_norm)
            return False

        # ‚Äî 2. —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -----------------------------------------
        user_confirmed = self._ask_user_dialog(new_ver, notes, is_pre)
        
        if not user_confirmed:
            self._emit("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            log("UpdateWorker: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "üîÅ UPDATE")
            return False

        # ‚Äî 3. –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ---------------------------------------
        return self._download_update(release_info)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ public-API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def run_update_async(parent=None, *, silent: bool = False) -> QThread:
    """
    –°–æ–∑–¥–∞—ë—Ç QThread + UpdateWorker –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    
    Args:
        parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        silent: –ï—Å–ª–∏ True, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ "–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
               –Ω–æ –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    """
    thr = QThread(parent)
    worker = UpdateWorker(parent, silent)
    worker.moveToThread(thr)

    thr.started.connect(worker.run)
    worker.finished.connect(thr.quit)
    worker.finished.connect(worker.deleteLater)
    thr.finished.connect(thr.deleteLater)

    # status-label + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    worker.progress.connect(lambda m: _safe_set_status(parent, m))
    worker.progress.connect(lambda m: log(f'{m}', "üîÅ UPDATE"))
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    download_dialog = None
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    def show_download_dialog(version):
        nonlocal download_dialog
        if parent:  # –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ silent - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞!
            download_dialog = DownloadDialog(parent, version)
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            worker.progress_bytes.connect(
                lambda p, d, t: download_dialog.update_progress(p, d, t) if download_dialog else None
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞ –∫ –≤–æ—Ä–∫–µ—Ä—É
            download_dialog.retry_requested.connect(worker.request_retry)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ
            download_dialog.show()
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if silent:
                download_dialog.set_status("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Zapret")
                
            log(f"–ü–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version} (silent={silent})", "üîÅ UPDATE")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
    def hide_download_dialog():
        nonlocal download_dialog
        if download_dialog:
            download_dialog.accept()
            download_dialog = None
            log("–î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫—Ä—ã—Ç", "üîÅ UPDATE")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    def on_download_complete():
        if download_dialog:
            download_dialog.download_complete()
            log("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "üîÅ UPDATE")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    def on_download_failed(error):
        if download_dialog:
            download_dialog.download_failed(error)
            log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {error}", "üîÅ UPDATE")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ silent —Ä–µ–∂–∏–º–µ)
    def handle_user_dialog(new_ver, notes, is_pre):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –≤ UI –ø–æ—Ç–æ–∫–µ"""
        log(f"handle_user_dialog: –≤–µ—Ä—Å–∏—è {new_ver}, silent={silent}", "üîÅ UPDATE")
        
        if not parent or silent:
            # –í —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ–º—Å—è
            log("handle_user_dialog: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ (silent mode)", "üîÅ UPDATE")
            worker.set_user_response(True)
            return
        
        try:
            from config import APP_VERSION
            
            version_type = " (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)" if is_pre else ""
            txt = (f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {new_ver}{version_type} (—É –≤–∞—Å {APP_VERSION}).\n\n"
                   f"{notes[:500] if notes else '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è.'}\n\n"
                   f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å?")
            
            btn = QMessageBox.question(
                parent, "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                txt,
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            user_accepted = (btn == QMessageBox.StandardButton.Yes)
            log(f"handle_user_dialog: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {'Yes' if user_accepted else 'No'}", "üîÅ UPDATE")
            worker.set_user_response(user_accepted)
            
        except Exception as e:
            log(f"handle_user_dialog: –æ—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}", "üîÅ‚ùå ERROR")
            worker.set_user_response(False)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ "–Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π" (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ silent —Ä–µ–∂–∏–º–µ)
    def handle_no_updates_dialog(current_version):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ UI –ø–æ—Ç–æ–∫–µ"""
        if parent and not silent:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ silent —Ä–µ–∂–∏–º–µ
            try:
                QMessageBox.information(
                    parent, 
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                    f"–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è ({current_version})."
                )
            except Exception as e:
                log(f"handle_no_updates_dialog: –æ—à–∏–±–∫–∞: {e}", "üîÅ‚ùå ERROR")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
    worker.ask_user.connect(handle_user_dialog)
    worker.show_no_updates.connect(handle_no_updates_dialog)
    worker.show_download_dialog.connect(show_download_dialog)
    worker.hide_download_dialog.connect(hide_download_dialog)
    worker.download_complete.connect(on_download_complete)
    worker.download_failed.connect(on_download_failed)

    thr._worker = worker
    thr.start()

    # –¥–µ—Ä–∂–∏–º thread –≤ parent-–æ–∫–Ω–µ
    if parent is not None:
        lst = getattr(parent, "_active_upd_threads", [])
        lst.append(thr)
        parent._active_upd_threads = lst
        thr.finished.connect(lambda *, l=lst, t=thr: l.remove(t) if t in l else None)

    return thr