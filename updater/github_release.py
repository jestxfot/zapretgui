"""
github_release.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ —Å GitHub –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limits.
"""

from __future__ import annotations
from typing import Optional, List, Dict, Any, Tuple
from packaging import version
from datetime import datetime
import time
import json
import os
import requests
from log import log
from config import TOKEN_GITHUB, LOGS_FOLDER

GITHUB_API_URL = "https://api.github.com/repos/youtubediscord/zapret/releases"
TIMEOUT = 10  # —Å–µ–∫.

# –ö—ç—à –¥–ª—è GitHub –∑–∞–ø—Ä–æ—Å–æ–≤
_github_cache: Dict[str, Tuple[Any, float]] = {}
CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
CACHE_FILE = os.path.join(LOGS_FOLDER, '.github_cache.json')
RATE_LIMIT_FILE = os.path.join(LOGS_FOLDER, '.github_rate_limit')

def _load_persistent_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
    global _github_cache
    try:
        if os.path.exists(CACHE_FILE):
            with open(CACHE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
                current_time = time.time()
                _github_cache = {
                    url: (content, timestamp) 
                    for url, (content, timestamp) in data.items()
                    if current_time - timestamp < CACHE_TTL
                }
                if _github_cache:
                    log(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(_github_cache)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞", "üîÑ CACHE")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}", "‚ö†Ô∏è CACHE")
        _github_cache = {}

def _save_persistent_cache():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Response –æ–±—ä–µ–∫—Ç—ã –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        cache_data = {}
        for url, (content, timestamp) in _github_cache.items():
            if isinstance(content, requests.Response):
                cache_data[url] = ({
                    'status_code': content.status_code,
                    'json': content.json() if content.status_code == 200 else None,
                    'headers': dict(content.headers)
                }, timestamp)
            else:
                cache_data[url] = (content, timestamp)
        
        with open(CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f)
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}", "‚ö†Ô∏è CACHE")

def _save_rate_limit_info(reset_time: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ rate limit"""
    try:
        with open(RATE_LIMIT_FILE, 'w') as f:
            f.write(str(reset_time))
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è rate limit: {e}", "‚ö†Ô∏è CACHE")

def is_rate_limited() -> Tuple[bool, Optional[datetime]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ rate limit
    Returns: (is_limited, reset_time)
    """
    try:
        if os.path.exists(RATE_LIMIT_FILE):
            with open(RATE_LIMIT_FILE, 'r') as f:
                reset_time = float(f.read())
                if time.time() < reset_time:
                    reset_dt = datetime.fromtimestamp(reset_time)
                    return True, reset_dt
    except:
        pass
    return False, None

def check_rate_limit() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å rate limit GitHub API"""
    try:
        headers = {
            'Accept': 'application/vnd.github.v3+json',
            'User-Agent': 'Zapret-Updater/1.0'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        token = TOKEN_GITHUB
        if token:
            headers['Authorization'] = f'token {token}'
        
        resp = requests.get(
            "https://api.github.com/rate_limit", 
            headers=headers, 
            timeout=5
        )
        
        if resp.status_code == 200:
            data = resp.json()
            core_limit = data['rate']
            return {
                'limit': core_limit['limit'],
                'remaining': core_limit['remaining'],
                'reset': core_limit['reset'],
                'reset_dt': datetime.fromtimestamp(core_limit['reset'])
            }
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit: {e}", "‚ö†Ô∏è RATE_LIMIT")
    
    return {'limit': 60, 'remaining': 0, 'reset': 0}

def _get_cached_or_fetch(url: str, timeout: int = 10) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if url in _github_cache:
        data, timestamp = _github_cache[url]
        if time.time() - timestamp < CACHE_TTL:
            log(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ—Å—Ç–∞–ª–æ—Å—å {int(CACHE_TTL - (time.time() - timestamp))} —Å–µ–∫)", "üîÑ CACHE")
            return data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    is_limited, reset_dt = is_rate_limited()
    if is_limited:
        log(f"‚è≥ Rate limit –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {reset_dt}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à.", "‚ö†Ô∏è RATE_LIMIT")
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
        if url in _github_cache:
            data, _ = _github_cache[url]
            log("üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à –∏–∑-–∑–∞ rate limit", "üîÑ CACHE")
            return data
        return None
    
    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        headers = {
            'Accept': 'application/vnd.github.v3+json',
            'User-Agent': 'Zapret-Updater/1.0'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º GitHub token –µ—Å–ª–∏ –µ—Å—Ç—å (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Å 60 –¥–æ 5000)
        token = TOKEN_GITHUB
        if token:
            headers['Authorization'] = f'token {token}'
            log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub token –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞", "üîÑ CACHE")
        
        response = requests.get(url, headers=headers, timeout=timeout)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –≤ –æ—Ç–≤–µ—Ç–µ
        if response.status_code == 403:
            remaining = response.headers.get('X-RateLimit-Remaining', '0')
            reset_time = response.headers.get('X-RateLimit-Reset', '0')
            
            if remaining == '0':
                reset_timestamp = int(reset_time)
                _save_rate_limit_info(reset_timestamp)
                reset_dt = datetime.fromtimestamp(reset_timestamp)
                log(f"üö´ GitHub rate limit –ø—Ä–µ–≤—ã—à–µ–Ω. –°–±—Ä–æ—Å –≤ {reset_dt}", "‚ö†Ô∏è RATE_LIMIT")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
                if url in _github_cache:
                    data, _ = _github_cache[url]
                    log("üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –∏–∑-–∑–∞ rate limit", "üîÑ CACHE")
                    return data
                return None
        
        response.raise_for_status()
        
        # –ü–∞—Ä—Å–∏–º JSON —Å—Ä–∞–∑—É –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        json_data = response.json()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        _github_cache[url] = (json_data, time.time())
        _save_persistent_cache()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
        remaining = response.headers.get('X-RateLimit-Remaining')
        if remaining:
            log(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GitHub: {remaining}", "üîÑ CACHE")
            if int(remaining) < 10:
                log(f"‚ö†Ô∏è –ú–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GITHUB_TOKEN", "‚ö†Ô∏è RATE_LIMIT")
        
        return json_data
        
    except requests.exceptions.HTTPError as e:
        if e.response and e.response.status_code == 403:
            log(f"üö´ HTTP 403: {e}", "‚ùå ERROR")
        else:
            log(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}", "‚ùå ERROR")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GitHub: {e}", "‚ùå ERROR")
    
    return None

def normalize_version(ver_str: str) -> str:
    if ver_str.startswith('v') or ver_str.startswith('V'):
        ver_str = ver_str[1:]
    ver_str = ver_str.strip()
    parts = ver_str.split('.')
    if len(parts) < 2:
        raise ValueError(f"Invalid version format: {ver_str}")
    try:
        for part in parts:
            int(part)
    except ValueError:
        raise ValueError(f"Invalid version format: {ver_str}")
    return ver_str

def compare_versions(v1: str, v2: str) -> int:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: -1 –µ—Å–ª–∏ v1 < v2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã, 1 –µ—Å–ª–∏ v1 > v2
    """
    try:
        ver1 = version.parse(v1)
        ver2 = version.parse(v2)
        if ver1 < ver2:
            return -1
        elif ver1 > ver2:
            return 1
        else:
            return 0
    except Exception:
        # Fallback –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        return -1 if v1 < v2 else (1 if v1 > v2 else 0)

def get_all_releases_with_exe() -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–ª–∏–∑—ã —Å .exe —Ñ–∞–π–ª–∞–º–∏ —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limits
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not _github_cache:
        _load_persistent_cache()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    rate_info = check_rate_limit()
    if rate_info['remaining'] < 5:
        log(f"‚ö†Ô∏è –û—á–µ–Ω—å –º–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å ({rate_info['remaining']}). –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫—ç—à.", "‚ö†Ô∏è RATE_LIMIT")
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        return _get_cached_releases()
    
    releases_with_exe = []
    
    page = 1
    max_pages = 10 if rate_info['remaining'] > 20 else 3  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –º–∞–ª–æ–º –ª–∏–º–∏—Ç–µ
    
    while page <= max_pages:
        url = f"{GITHUB_API_URL}?per_page=100&page={page}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if page > 1:
            time.sleep(0.2)
        
        try:
            releases_page = _get_cached_or_fetch(url, TIMEOUT)
            
            if not releases_page:
                log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}", "üîÅ UPDATE")
                break
            
            if not releases_page:  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ = –∫–æ–Ω–µ—Ü
                break
                
            for release in releases_page:
                # –ò—â–µ–º .exe —Ñ–∞–π–ª –≤ –∞—Å—Å–µ—Ç–∞—Ö
                exe_asset = next((a for a in release.get("assets", []) if a["name"].endswith(".exe")), None)
                if not exe_asset:
                    continue
                    
                try:
                    version_str = normalize_version(release["tag_name"])
                    releases_with_exe.append({
                        "version": version_str,
                        "tag_name": release["tag_name"],
                        "update_url": exe_asset["browser_download_url"],
                        "release_notes": release.get("body", ""),
                        "prerelease": release.get("prerelease", False),
                        "name": release.get("name", ""),
                        "published_at": release.get("published_at", ""),
                        "created_at": release.get("created_at", "")
                    })
                except ValueError as e:
                    log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ {release['tag_name']}: {e}", "üîÅ UPDATE")
                    continue
                    
            page += 1
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–∞–ª–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è —Ä–∞–Ω—å—à–µ
            if rate_info['remaining'] < 10 and page > 2:
                log("‚ö†Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤", "‚ö†Ô∏è RATE_LIMIT")
                break
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}", "üîÅ UPDATE")
            break
    
    return releases_with_exe

def _get_cached_releases() -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–∏–∑—ã –∏–∑ –∫—ç—à–∞"""
    releases = []
    for url, (data, _) in _github_cache.items():
        if GITHUB_API_URL in url and isinstance(data, list):
            for release in data:
                exe_asset = next((a for a in release.get("assets", []) if a["name"].endswith(".exe")), None)
                if exe_asset:
                    try:
                        version_str = normalize_version(release["tag_name"])
                        releases.append({
                            "version": version_str,
                            "tag_name": release["tag_name"],
                            "update_url": exe_asset["browser_download_url"],
                            "release_notes": release.get("body", ""),
                            "prerelease": release.get("prerelease", False),
                            "name": release.get("name", ""),
                            "published_at": release.get("published_at", ""),
                            "created_at": release.get("created_at", "")
                        })
                    except:
                        pass
    return releases

def get_latest_release(channel: str) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ —Å GitHub.
    –î–ª—è stable –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /releases/latest.
    –î–ª—è dev –∫–∞–Ω–∞–ª–∞ –∏—â–µ—Ç —Å–∞–º—É—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å—Ä–µ–¥–∏ ALL —Ä–µ–ª–∏–∑–æ–≤ —Å .exe —Ñ–∞–π–ª–∞–º–∏.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not _github_cache:
        _load_persistent_cache()
    
    try:
        if channel == "stable":
            # –î–ª—è stable –∏—Å–ø–æ–ª—å–∑—É–µ–º /releases/latest
            url = "https://api.github.com/repos/youtubediscord/zapret/releases/latest"
            release = _get_cached_or_fetch(url, TIMEOUT)
            
            if not release:
                log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑", "üîÅ UPDATE")
                return None
            
            log(f"üìã –ü–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑: {release['tag_name']}", "üîÅ UPDATE")
            
            exe_asset = next((a for a in release.get("assets", []) if a["name"].endswith(".exe")), None)
            if not exe_asset:
                log("‚ùå –í —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Ä–µ–ª–∏–∑–µ –Ω–µ—Ç .exe —Ñ–∞–π–ª–∞", "üîÅ UPDATE")
                return None
                
            version_str = normalize_version(release["tag_name"])
            return {
                "version": version_str,
                "tag_name": release["tag_name"],
                "update_url": exe_asset["browser_download_url"],
                "release_notes": release.get("body", ""),
                "prerelease": False,
                "name": release.get("name", ""),
                "published_at": release.get("published_at", "")
            }
        else:
            # –î–ª—è dev –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –í–°–ï —Ä–µ–ª–∏–∑—ã –∏ –∏—â–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö dev —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ...", "üîÅ UPDATE")
            
            all_releases = get_all_releases_with_exe()
            if not all_releases:
                log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤ —Å .exe —Ñ–∞–π–ª–æ–º", "üîÅ UPDATE")
                return None
            
            log(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(all_releases)} —Ä–µ–ª–∏–∑–æ–≤ —Å .exe —Ñ–∞–π–ª–∞–º–∏", "üîÅ UPDATE")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Å–∏–∏ (–æ—Ç –Ω–æ–≤–æ–π –∫ —Å—Ç–∞—Ä–æ–π)
            def version_key(rel):
                try:
                    return version.parse(rel["version"])
                except:
                    return version.parse("0.0.0")
            
            all_releases.sort(key=version_key, reverse=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            log("üîù –¢–æ–ø —Ä–µ–ª–∏–∑–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏:", "üîÅ UPDATE")
            for i, rel in enumerate(all_releases[:5]):
                prerelease_mark = " (prerelease)" if rel.get("prerelease") else ""
                log(f"   {i+1}. v{rel['version']}{prerelease_mark} - {rel.get('created_at', '–Ω/–¥')}", "üîÅ UPDATE")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            latest = all_releases[0]
            log(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–∞–º—ã–π –Ω–æ–≤—ã–π dev —Ä–µ–ª–∏–∑: {latest['version']} (prerelease: {latest.get('prerelease', False)})", "üîÅ UPDATE")
            
            return latest
            
    except Exception as e:
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑—ã —Å GitHub: {e}", "üîÅ‚ùå ERROR")
        return None