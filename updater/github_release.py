# updater/github_release.py
"""
github_release.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ —Å GitHub –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
"""

from __future__ import annotations
from typing import Optional, List, Dict, Any
from packaging import version
from log import log

GITHUB_API_URL = "https://api.github.com/repos/youtubediscord/zapret/releases"
TIMEOUT = 10  # —Å–µ–∫.

def normalize_version(ver_str: str) -> str:
    if ver_str.startswith('v') or ver_str.startswith('V'):
        ver_str = ver_str[1:]
    ver_str = ver_str.strip()
    parts = ver_str.split('.')
    if len(parts) < 2:
        raise ValueError(f"Invalid version format: {ver_str}")
    try:
        for part in parts:
            int(part)
    except ValueError:
        raise ValueError(f"Invalid version format: {ver_str}")
    return ver_str

def compare_versions(v1: str, v2: str) -> int:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –≤–µ—Ä—Å–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: -1 –µ—Å–ª–∏ v1 < v2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã, 1 –µ—Å–ª–∏ v1 > v2
    """
    try:
        ver1 = version.parse(v1)
        ver2 = version.parse(v2)
        if ver1 < ver2:
            return -1
        elif ver1 > ver2:
            return 1
        else:
            return 0
    except Exception:
        # Fallback –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        return -1 if v1 < v2 else (1 if v1 > v2 else 0)

def get_all_releases_with_exe() -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–ª–∏–∑—ã —Å .exe —Ñ–∞–π–ª–∞–º–∏
    """
    import requests
    
    releases_with_exe = []
    headers = {"Accept": "application/vnd.github.v3+json"}
    
    page = 1
    while page <= 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü (1000 —Ä–µ–ª–∏–∑–æ–≤)
        try:
            params = {"per_page": 100, "page": page}
            resp = requests.get(GITHUB_API_URL, headers=headers, params=params, timeout=TIMEOUT)
            resp.raise_for_status()
            releases = resp.json()
            
            if not releases:
                break
                
            for release in releases:
                # –ò—â–µ–º .exe —Ñ–∞–π–ª –≤ –∞—Å—Å–µ—Ç–∞—Ö
                exe_asset = next((a for a in release.get("assets", []) if a["name"].endswith(".exe")), None)
                if not exe_asset:
                    continue
                    
                try:
                    version_str = normalize_version(release["tag_name"])
                    releases_with_exe.append({
                        "version": version_str,
                        "tag_name": release["tag_name"],
                        "update_url": exe_asset["browser_download_url"],
                        "release_notes": release.get("body", ""),
                        "prerelease": release.get("prerelease", False),
                        "name": release.get("name", ""),
                        "published_at": release.get("published_at", ""),
                        "created_at": release.get("created_at", "")
                    })
                except ValueError as e:
                    log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ {release['tag_name']}: {e}", "üîÅ UPDATE")
                    continue
                    
            page += 1
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}", "üîÅ UPDATE")
            break
    
    return releases_with_exe

def get_latest_release(channel: str) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ —Å GitHub.
    –î–ª—è stable –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /releases/latest.
    –î–ª—è dev –∫–∞–Ω–∞–ª–∞ –∏—â–µ—Ç —Å–∞–º—É—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å—Ä–µ–¥–∏ ALL —Ä–µ–ª–∏–∑–æ–≤ —Å .exe —Ñ–∞–π–ª–∞–º–∏.
    """
    import requests

    try:
        if channel == "stable":
            # –î–ª—è stable –∏—Å–ø–æ–ª—å–∑—É–µ–º /releases/latest
            headers = {"Accept": "application/vnd.github.v3+json"}
            url = "https://api.github.com/repos/youtubediscord/zapret/releases/latest"
            resp = requests.get(url, headers=headers, timeout=TIMEOUT)
            resp.raise_for_status()
            release = resp.json()
            
            log(f"üìã –ü–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑: {release['tag_name']}", "üîÅ UPDATE")
            
            exe_asset = next((a for a in release.get("assets", []) if a["name"].endswith(".exe")), None)
            if not exe_asset:
                log("‚ùå –í —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Ä–µ–ª–∏–∑–µ –Ω–µ—Ç .exe —Ñ–∞–π–ª–∞", "üîÅ UPDATE")
                return None
                
            version_str = normalize_version(release["tag_name"])
            return {
                "version": version_str,
                "tag_name": release["tag_name"],
                "update_url": exe_asset["browser_download_url"],
                "release_notes": release.get("body", ""),
                "prerelease": False,
                "name": release.get("name", ""),
                "published_at": release.get("published_at", "")
            }
        else:
            # –î–ª—è dev –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –í–°–ï —Ä–µ–ª–∏–∑—ã –∏ –∏—â–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö dev —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ...", "üîÅ UPDATE")
            
            all_releases = get_all_releases_with_exe()
            if not all_releases:
                log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤ —Å .exe —Ñ–∞–π–ª–æ–º", "üîÅ UPDATE")
                return None
            
            log(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(all_releases)} —Ä–µ–ª–∏–∑–æ–≤ —Å .exe —Ñ–∞–π–ª–∞–º–∏", "üîÅ UPDATE")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Å–∏–∏ (–æ—Ç –Ω–æ–≤–æ–π –∫ —Å—Ç–∞—Ä–æ–π)
            def version_key(rel):
                try:
                    return version.parse(rel["version"])
                except:
                    return version.parse("0.0.0")
            
            all_releases.sort(key=version_key, reverse=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            log("üîù –¢–æ–ø —Ä–µ–ª–∏–∑–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏:", "üîÅ UPDATE")
            for i, rel in enumerate(all_releases[:5]):
                prerelease_mark = " (prerelease)" if rel.get("prerelease") else ""
                log(f"   {i+1}. v{rel['version']}{prerelease_mark} - {rel.get('created_at', '–Ω/–¥')}", "üîÅ UPDATE")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            latest = all_releases[0]
            log(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–∞–º—ã–π –Ω–æ–≤—ã–π dev —Ä–µ–ª–∏–∑: {latest['version']} (prerelease: {latest.get('prerelease', False)})", "üîÅ UPDATE")
            
            return latest
            
    except Exception as e:
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑—ã —Å GitHub: {e}", "üîÅ‚ùå ERROR")
        return None