import sys
from PyQt6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QLineEdit, QProgressBar, QMessageBox, QGroupBox, QWidget, QFrame
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt6.QtGui import QFont, QPixmap, QIcon, QPalette
from log import log
import pyperclip, webbrowser

from typing import Tuple, Optional

class SubscriptionCheckWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    finished = pyqtSignal(bool, str, object)  # (is_premium, status_message, days_remaining)
    
    def __init__(self, donate_checker):
        super().__init__()
        self.donate_checker = donate_checker
        
    def run(self):
        try:
            is_premium, status_msg, days_remaining = self.donate_checker.check_subscription_status(use_cache=False)
            self.finished.emit(is_premium, status_msg, days_remaining)
        except Exception as e:
            self.finished.emit(False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", None)

class SubscriptionDialog(QDialog):
    def __init__(self, parent, donate_checker):
        super().__init__(parent)
        self.donate_checker = donate_checker
        self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π")
        self.setFixedSize(500, 480)  # –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.setModal(True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É
        self.is_dark_theme = self.is_dark_theme_active()
        
        self.init_ui()
        self.check_subscription_status()
        
    def is_dark_theme_active(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞"""
        palette = self.palette()
        bg_color = palette.color(QPalette.ColorRole.Window)
        return bg_color.lightness() < 128
        
    def get_theme_styles(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã"""
        if self.is_dark_theme:
            return {
                'bg_color': '#2b2b2b',
                'text_color': '#ffffff',
                'border_color': '#555555',
                'input_bg': '#404040',
                'input_text': '#ffffff',
                'info_bg': '#1e3a5f',
                'info_border': '#4a90e2',
                'success_bg': '#1e4d3a',
                'success_border': '#4caf50',
                'success_text': '#4caf50',
                'error_bg': '#4d1e1e',
                'error_border': '#f44336',
                'error_text': '#f44336',
                'group_bg': '#383838'
            }
        else:
            return {
                'bg_color': '#ffffff',
                'text_color': '#000000',
                'border_color': '#cccccc',
                'input_bg': '#f0f0f0',
                'input_text': '#000000',
                'info_bg': '#e7f3ff',
                'info_border': '#b3d9ff',
                'success_bg': '#d4edda',
                'success_border': '#c3e6cb',
                'success_text': '#155724',
                'error_bg': '#f8d7da',
                'error_border': '#f5c6cb',
                'error_text': '#721c24',
                'group_bg': '#f8f9fa'
            }
        
    def init_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 15, 20, 15)
        main_layout.setSpacing(10)
        
        styles = self.get_theme_styles()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—Ç–∏–ª—å –¥–∏–∞–ª–æ–≥–∞
        self.setStyleSheet(f"""
            QDialog {{
                background-color: {styles['bg_color']};
                color: {styles['text_color']};
            }}
            QGroupBox {{
                font-weight: bold;
                border: 1px solid {styles['border_color']};
                border-radius: 8px;
                margin-top: 12px;
                padding-top: 15px;
                background-color: {styles['group_bg']};
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 10px 0 10px;
                color: {styles['text_color']};
            }}
        """)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        header_layout = QHBoxLayout()
        header_layout.setSpacing(10)
        
        icon_label = QLabel("üîê")
        icon_label.setStyleSheet("font-size: 24px;")
        header_layout.addWidget(icon_label)
        
        title_label = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π Zapret Premium")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setStyleSheet(f"color: {styles['text_color']};")
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        main_layout.addLayout(header_layout)
        
        # –ì—Ä—É–ø–ø–∞ UUID
        uuid_group = QGroupBox("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—à–∏–Ω—ã")
        uuid_layout = QVBoxLayout(uuid_group)
        uuid_layout.setContentsMargins(10, 20, 10, 10)
        
        uuid_container = QHBoxLayout()
        uuid_container.setSpacing(8)
        
        self.uuid_text = QLineEdit()
        self.uuid_text.setText(self.donate_checker.get_machine_uuid())
        self.uuid_text.setReadOnly(True)
        self.uuid_text.setStyleSheet(f"""
            QLineEdit {{
                background-color: {styles['input_bg']};
                color: {styles['input_text']};
                border: 1px solid {styles['border_color']};
                border-radius: 4px;
                padding: 8px;
                font-family: 'Courier New', monospace;
                font-size: 11px;
            }}
        """)
        
        copy_uuid_btn = QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
        copy_uuid_btn.setFixedWidth(120)
        copy_uuid_btn.clicked.connect(self.copy_uuid)
        
        uuid_container.addWidget(self.uuid_text)
        uuid_container.addWidget(copy_uuid_btn)
        uuid_layout.addLayout(uuid_container)
        main_layout.addWidget(uuid_group)
        
        # –ì—Ä—É–ø–ø–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_group = QGroupBox("–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
        status_layout = QVBoxLayout(status_group)
        status_layout.setContentsMargins(10, 20, 10, 10)
        
        self.status_text = QLabel("–ü—Ä–æ–≤–µ—Ä—è—é...")
        self.status_text.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.status_text.setWordWrap(True)
        self.status_text.setMinimumHeight(50)
        self.status_text.setStyleSheet(f"""
            QLabel {{
                background-color: {styles['input_bg']};
                color: {styles['text_color']};
                border: 2px solid {styles['border_color']};
                padding: 12px;
                border-radius: 6px;
                font-size: 12px;
            }}
        """)
        status_layout.addWidget(self.status_text)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 0)
        self.progress_bar.setMaximumHeight(6)
        self.progress_bar.setStyleSheet(f"""
            QProgressBar {{
                border: none;
                border-radius: 3px;
                background-color: {styles['input_bg']};
            }}
            QProgressBar::chunk {{
                background-color: #2196F3;
                border-radius: 3px;
            }}
        """)
        status_layout.addWidget(self.progress_bar)
        main_layout.addWidget(status_group)
        
        # –ì—Ä—É–ø–ø–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        info_group = QGroupBox("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø")
        info_layout = QVBoxLayout(info_group)
        info_layout.setContentsMargins(10, 20, 10, 10)
        
        info_text = QLabel(
            "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ UUID –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã\n"
            "2. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Boosty\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ—Å—å –≤ Telegram —á–∞—Ç –∏ —É–∫–∞–∂–∏—Ç–µ UUID\n"
            "4. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
        )
        info_text.setWordWrap(True)
        info_text.setStyleSheet(f"""
            QLabel {{
                color: {styles['text_color']};
                padding: 8px;
                font-size: 11px;
                line-height: 1.5;
            }}
        """)
        info_layout.addWidget(info_text)
        
        # –ö–Ω–æ–ø–∫–∞ Boosty
        boosty_btn = QPushButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Boosty")
        boosty_btn.clicked.connect(self.open_boosty)
        info_layout.addWidget(boosty_btn)

        main_layout.addWidget(info_group)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = QWidget()
        control_layout = QHBoxLayout(control_panel)
        control_layout.setContentsMargins(0, 10, 0, 0)
        control_layout.setSpacing(10)

        refresh_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        refresh_btn.clicked.connect(self.refresh_subscription)

        clear_cache_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
        clear_cache_btn.clicked.connect(self.clear_cache)

        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)

        control_layout.addWidget(refresh_btn)
        control_layout.addWidget(clear_cache_btn)
        control_layout.addStretch()
        control_layout.addWidget(close_btn)

        main_layout.addWidget(control_panel)
        main_layout.addStretch()

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def open_boosty(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Boosty"""
        try:
            boosty_url = "https://boosty.to/censorliber"
            webbrowser.open(boosty_url)
            log(f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ Boosty: {boosty_url}", level="INFO")
            
            QMessageBox.information(self, "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Boosty", 
                                "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n\n"
                                "–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ Telegram —á–∞—Ç –∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π UUID, "
                                "–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Boosty: {e}", level="ERROR")
            
            QMessageBox.information(self, "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É", 
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä.\n\n"
                                "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                                "https://boosty.to/censorliber\n\n"
                                "–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à UUID –≤ Telegram —á–∞—Ç–µ.")

    def copy_uuid(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç UUID –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            uuid = self.donate_checker.get_machine_uuid()
            pyperclip.copy(uuid)
            
            original_text = self.sender().text()
            self.sender().setText("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
            
            QTimer.singleShot(2000, lambda: self.sender().setText(original_text))
            
            log("UUID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", level="INFO")
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ UUID: {e}", level="ERROR")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å UUID")
    
    def on_subscription_checked(self, is_premium, status_msg, days_remaining):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        self.progress_bar.setVisible(False)
        styles = self.get_theme_styles()
        
        if is_premium:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º –¥–Ω–µ–π
            if days_remaining is not None:
                if days_remaining > 0:
                    status_text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ (–æ—Å—Ç–∞–ª–æ—Å—å {days_remaining} –¥–Ω–µ–π)"
                else:
                    status_text = "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
            else:
                status_text = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ (–±–µ—Å—Å—Ä–æ—á–Ω–∞—è)"
                
            self.status_text.setText(status_text)
            self.status_text.setStyleSheet(f"""
                QLabel {{
                    background-color: {styles['success_bg']};
                    border: 2px solid {styles['success_border']};
                    color: {styles['success_text']};
                    padding: 12px;
                    border-radius: 6px;
                    font-size: 12px;
                    font-weight: bold;
                }}
            """)
        else:
            self.status_text.setText(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\n{status_msg}")
            self.status_text.setStyleSheet(f"""
                QLabel {{
                    background-color: {styles['error_bg']};
                    border: 2px solid {styles['error_border']};
                    color: {styles['error_text']};
                    padding: 12px;
                    border-radius: 6px;
                    font-size: 12px;
                    font-weight: bold;
                }}
            """)
        
        log(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {is_premium}, –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_remaining}", level="INFO")
        
    def check_subscription_status(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            log("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ", level="DEBUG")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar.setVisible(True)
            self.status_text.setText("–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º worker
            self.worker = SubscriptionCheckWorker(self.donate_checker)
            self.worker.finished.connect(self.on_subscription_checked)
            self.worker.start()
            
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}", level="ERROR")
            self.progress_bar.setVisible(False)
            self.status_text.setText(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")

    def refresh_subscription(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
        log("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏", level="INFO")
        self.check_subscription_status()
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            self.donate_checker.clear_cache()
            QMessageBox.information(self, "–ö—ç—à –æ—á–∏—â–µ–Ω", 
                                  "–ö—ç—à –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.\n"
                                  "–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞–Ω–æ–≤–æ.")
            log("–ö—ç—à –ø–æ–¥–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", level="INFO")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}", level="ERROR")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")