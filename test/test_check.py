import requests
import time

def test_download_speed():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\nüìã –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    # URL –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    download_url = "https://zapretdpi.ru/ZapretSetup.exe"
    
    headers = {
        'User-Agent': 'Zapret-App/1.0',
        'Accept': '*/*'
    }
    
    print(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {download_url}")
    
    try:
        start_time = time.time()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º stream=True –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        response = requests.get(
            download_url, 
            headers=headers,
            timeout=30,
            stream=True,
            verify=True
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        total_size = int(response.headers.get('content-length', 0))
        print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {total_size / (1024*1024):.2f} –ú–ë")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–≥–∞–±–∞–π—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        downloaded = 0
        chunk_size = 8192  # 8KB chunks
        max_download = 5 * 1024 * 1024  # –ú–∞–∫—Å–∏–º—É–º 5 –ú–ë –¥–ª—è —Ç–µ—Å—Ç–∞
        
        print("üìä –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏...")
        
        for chunk in response.iter_content(chunk_size=chunk_size):
            if chunk:
                downloaded += len(chunk)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 –ö–ë
                if downloaded % (500 * 1024) == 0 or downloaded >= max_download:
                    elapsed = time.time() - start_time
                    if elapsed > 0:
                        speed_mbps = (downloaded / (1024 * 1024)) / elapsed
                        print(f"‚¨áÔ∏è –°–∫–∞—á–∞–Ω–æ: {downloaded / (1024*1024):.2f} –ú–ë, "
                              f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed_mbps:.2f} –ú–ë/—Å")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ 5 –ú–ë
                if downloaded >= max_download:
                    print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç –Ω–∞ 5 –ú–ë")
                    break
        
        end_time = time.time()
        total_time = end_time - start_time
        
        if total_time > 0:
            average_speed = (downloaded / (1024 * 1024)) / total_time
            print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   üì¶ –°–∫–∞—á–∞–Ω–æ: {downloaded / (1024*1024):.2f} –ú–ë")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
            print(f"   üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {average_speed:.2f} –ú–ë/—Å")
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if average_speed > 10:
                print("   üü¢ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!")
            elif average_speed > 5:
                print("   üü° –•–æ—Ä–æ—à–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            elif average_speed > 1:
                print("   üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            else:
                print("   üî¥ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω—ã timeout'—ã")
        
    except requests.exceptions.ReadTimeout:
        print("‚ùå ReadTimeout: –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
    except requests.exceptions.ConnectTimeout:
        print("‚ùå ConnectTimeout: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå ConnectionError: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_small_vs_large_requests():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏ –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç 9: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏ –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    urls = {
        "GitHub JSON (–º–∞–ª–µ–Ω—å–∫–∏–π)": "https://raw.githubusercontent.com/youtubediscord/src/refs/heads/main/index.json",
        "GitFlic EXE (–±–æ–ª—å—à–æ–π)": "https://gitflic.ru/project/main1234/main1234/blob/raw?file=ZapretSetup.exe"
    }
    
    headers = {
        'User-Agent': 'Zapret-App/1.0',
        'Accept': '*/*'
    }
    
    for name, url in urls.items():
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
        print(f"üîó URL: {url}")
        
        try:
            start_time = time.time()
            
            # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if "–±–æ–ª—å—à–æ–π" in name:
                response = requests.head(url, headers=headers, timeout=15)
            else:
                response = requests.get(url, headers=headers, timeout=15)
            
            end_time = time.time()
            response_time = end_time - start_time
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response.status_code}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.3f} —Å–µ–∫")
            
            if hasattr(response, 'headers'):
                content_length = response.headers.get('content-length', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"üì¶ –†–∞–∑–º–µ—Ä: {content_length} –±–∞–π—Ç")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_different_timeouts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è timeout –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ"""
    print("\nüìã –¢–µ—Å—Ç 10: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è timeout –∑–Ω–∞—á–µ–Ω–∏–π")
    
    url = "https://raw.githubusercontent.com/youtubediscord/src/refs/heads/main/index.json"
    timeouts = [5, 10, 15, 20, 30]
    
    headers = {
        'User-Agent': 'Zapret-App/1.0',
        'Accept': 'application/json'
    }
    
    results = []
    
    for timeout_val in timeouts:
        print(f"\n‚è∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º timeout = {timeout_val} —Å–µ–∫")
        
        success_count = 0
        total_time = 0
        attempts = 3
        
        for attempt in range(attempts):
            try:
                start_time = time.time()
                response = requests.get(url, headers=headers, timeout=timeout_val)
                end_time = time.time()
                
                if response.status_code == 200:
                    success_count += 1
                    total_time += (end_time - start_time)
                    print(f"  ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {end_time - start_time:.3f}—Å")
                else:
                    print(f"  ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: HTTP {response.status_code}")
                    
            except requests.exceptions.Timeout:
                print(f"  ‚è∞ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: Timeout")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {e}")
        
        success_rate = (success_count / attempts) * 100
        avg_time = total_time / success_count if success_count > 0 else 0
        
        results.append({
            'timeout': timeout_val,
            'success_rate': success_rate,
            'avg_time': avg_time
        })
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_rate:.1f}% —É—Å–ø–µ—Ö, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}—Å")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìà –ê–ù–ê–õ–ò–ó TIMEOUT –ó–ù–ê–ß–ï–ù–ò–ô:")
    print("=" * 50)
    
    best_timeout = None
    best_score = 0
    
    for result in results:
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ—Ä: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        score = result['success_rate'] * 0.7 + (30 - result['avg_time'] * 10) * 0.3
        print(f"Timeout {result['timeout']:2d}—Å: "
              f"{result['success_rate']:5.1f}% —É—Å–ø–µ—Ö, "
              f"{result['avg_time']:6.3f}—Å —Å—Ä–µ–¥–Ω–µ–µ, "
              f"—Å–∫–æ—Ä: {score:.1f}")
        
        if score > best_score:
            best_score = score
            best_timeout = result['timeout']
    
    if best_timeout:
        print(f"\nüèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π timeout: {best_timeout} —Å–µ–∫—É–Ω–¥")
    else:
        print(f"\n‚ö†Ô∏è –í—Å–µ timeout –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∏ –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

def main():
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö GITHUB API")
    print("–°–∏–º—É–ª—è—Ü–∏—è —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã Zapret –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 70)
    
    try:
        test_download_speed()
        test_small_vs_large_requests()
        test_different_timeouts()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    main()