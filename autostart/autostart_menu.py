from pathlib import Path
from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import (
    QDialog,
    QVBoxLayout,
    QPushButton,
    QLabel,
    QMessageBox,
)

from .autostart_exe      import setup_autostart_for_exe
from .autostart_strategy import setup_autostart_for_strategy
from .autostart_service  import setup_service_for_strategy
from .autostart_direct   import (
    setup_direct_autostart_task,
    setup_direct_autostart_service,
    collect_direct_strategy_args
)
from .autostart_direct_service import setup_direct_service  # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from log                 import log
from strategy_menu import get_strategy_launch_method
import os

class AutoStartMenu(QDialog):
    """
    –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Direct –∏ BAT —Ä–µ–∂–∏–º–æ–≤
    """

    def __init__(
        self,
        parent,
        strategy_name: str,
        bat_folder: str,
        json_folder: str,
        check_autostart_cb,
        update_ui_cb,
        status_cb,
        app_instance=None
    ):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
        self.setMinimumWidth(450)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.strategy_name   = strategy_name
        self.bat_folder      = bat_folder
        self.json_folder     = json_folder
        self.check_autostart = check_autostart_cb
        self.update_ui       = update_ui_cb
        self.status          = status_cb
        self.app_instance    = app_instance
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        self.launch_method = get_strategy_launch_method()
        self.is_direct_mode = (self.launch_method == "direct")
        
        # UI
        layout = QVBoxLayout(self)
        layout.setSpacing(10)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        if self.is_direct_mode:
            info_text = (
                "–†–µ–∂–∏–º: –ü–†–Ø–ú–û–ô –ó–ê–ü–£–°–ö\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:"
            )
        else:
            info_text = (
                "–†–µ–∂–∏–º: –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô (BAT)\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:"
            )
        
        info = QLabel(info_text)
        info.setWordWrap(True)
        layout.addWidget(info)

        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ GUI
        self.exe_btn = QPushButton("üñ•Ô∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã ZapretGUI")
        self.exe_btn.setToolTip(
            "–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Windows.\n"
            "–í—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å DPI –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è."
        )
        layout.addWidget(self.exe_btn)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = QLabel("‚îÄ" * 40)
        separator.setStyleSheet("color: gray;")
        separator.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(separator)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        if self.is_direct_mode:
            # –î–ª—è Direct —Ä–µ–∂–∏–º–∞
            
            # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê - –°–ª—É–∂–±–∞ Windows (—Å–∞–º–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è)
            self.real_service_btn = QPushButton("‚öôÔ∏è –°–ª—É–∂–±–∞ Windows (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
            self.real_service_btn.setToolTip(
                "–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â—É—é —Å–ª—É–∂–±—É Windows –¥–ª—è –∑–∞–ø—É—Å–∫–∞ winws.exe.\n"
                "–°–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞.\n"
                "–†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É."
            )
            self.real_service_btn.setStyleSheet("""
                QPushButton {
                    background-color: #2e7d32;
                    color: white;
                    font-weight: bold;
                    padding: 10px;
                    border-radius: 5px;
                }
                QPushButton:hover {
                    background-color: #388e3c;
                }
            """)
            layout.addWidget(self.real_service_btn)
            
            # –ó–∞–¥–∞—á–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
            self.strategy_btn = QPushButton("‚ö° –ó–∞–¥–∞—á–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self.strategy_btn.setToolTip(
                "–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ winws.exe\n"
                "–ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É."
            )
            
            # –ó–∞–¥–∞—á–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            self.service_btn = QPushButton("üöÄ –ó–∞–¥–∞—á–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã")
            self.service_btn.setToolTip(
                "–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ winws.exe\n"
                "–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Windows (–¥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."
            )
        else:
            # –î–ª—è BAT —Ä–µ–∂–∏–º–∞
            self.strategy_btn = QPushButton("üìã –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (.bat —Ñ–∞–π–ª)")
            self.strategy_btn.setToolTip(
                "–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ .bat —Ñ–∞–π–ª–∞\n"
                "–≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Windows."
            )
            
            self.service_btn = QPushButton("‚öôÔ∏è –°–ª—É–∂–±–∞ Windows (.bat —Ñ–∞–π–ª)")
            self.service_btn.setToolTip(
                "–°–æ–∑–¥–∞–µ—Ç —Å–ª—É–∂–±—É Windows –¥–ª—è –∑–∞–ø—É—Å–∫–∞ .bat —Ñ–∞–π–ª–∞.\n"
                "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã."
            )
        
        layout.addWidget(self.strategy_btn)
        layout.addWidget(self.service_btn)
    
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.exe_btn.clicked.connect(self.enable_exe_autostart)
        self.strategy_btn.clicked.connect(self.enable_strategy_autostart)
        self.service_btn.clicked.connect(self.enable_strategy_service)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ —Å–ª—É–∂–±—ã
        if self.is_direct_mode and hasattr(self, 'real_service_btn'):
            self.real_service_btn.clicked.connect(self.enable_real_direct_service)

    def enable_exe_autostart(self):
        """–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        log("–í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ GUI", "INFO")

        ok = setup_autostart_for_exe(
            selected_mode=self.strategy_name,
            status_cb=self.status,
        )

        if ok:
            self.status("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ GUI –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.update_ui(True)
            QMessageBox.information(
                self,
                "–£—Å–ø–µ—à–Ω–æ",
                "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã ZapretGUI –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Windows\n"
                "–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ."
            )
            self.accept()
        else:
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )

    def enable_strategy_autostart(self):
        """–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        log(f"–í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ (—Ä–µ–∂–∏–º: {self.launch_method})", "INFO")

        def _show_error(msg: str):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞", msg)

        if self.is_direct_mode:
            # Direct —Ä–µ–∂–∏–º - –∑–∞–¥–∞—á–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
            ok = self._setup_direct_task(_show_error)
            success_msg = (
                "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ DPI –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                "–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Windows.\n"
                "DPI –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É."
            )
        else:
            # BAT —Ä–µ–∂–∏–º
            index_json_path = (Path(self.json_folder) / "index.json").resolve()
            ok = setup_autostart_for_strategy(
                selected_mode=self.strategy_name,
                bat_folder=self.bat_folder,
                index_path=str(index_json_path),
                ui_error_cb=_show_error,
            )
            success_msg = (
                "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è ¬´{self.strategy_name}¬ª –±—É–¥–µ—Ç\n"
                "–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Windows."
            )

        if ok:
            self.status("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.update_ui(True)
            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", success_msg)
            self.accept()

    def enable_strategy_service(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        log(f"–°–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Ä–µ–∂–∏–º: {self.launch_method})", "INFO")

        def _show_error(msg: str):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞", msg)

        if self.is_direct_mode:
            # Direct —Ä–µ–∂–∏–º - –∑–∞–¥–∞—á–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            ok = self._setup_direct_service(_show_error)
            success_msg = (
                "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ DPI –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                "–°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.\n"
                "DPI –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Windows\n"
                "(–¥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É).\n\n"
                "–≠—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞."
            )
        else:
            # BAT —Ä–µ–∂–∏–º - –Ω–∞—Å—Ç–æ—è—â–∞—è —Å–ª—É–∂–±–∞
            index_json_path = (Path(self.json_folder) / "index.json").resolve()
            ok = setup_service_for_strategy(
                selected_mode=self.strategy_name,
                bat_folder=self.bat_folder,
                index_path=str(index_json_path),
                ui_error_cb=_show_error,
            )
            success_msg = (
                "‚úÖ –°–ª—É–∂–±–∞ Windows —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è ¬´{self.strategy_name}¬ª –±—É–¥–µ—Ç\n"
                "–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∫ —Å–ª—É–∂–±–∞ Windows."
            )

        if ok:
            self.status("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.update_ui(True)
            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", success_msg)
            self.accept()

    def enable_real_direct_service(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–ª—É–∂–±—ã Windows –¥–ª—è Direct —Ä–µ–∂–∏–º–∞"""
        log("–°–æ–∑–¥–∞—ë–º —Å–ª—É–∂–±—É Windows –¥–ª—è Direct —Ä–µ–∂–∏–º–∞", "INFO")
        
        # –ù–û–í–û–ï: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Question)
        msg.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã Windows")
        msg.setText("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É–∂–±—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Zapret")
        msg.setInformativeText(
            "–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å winws.exe –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Å–ª—É–∂–±–∞ Windows.\n\n"
            "–≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã.\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        msg.setStandardButtons(QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        msg.setDefaultButton(QMessageBox.StandardButton.Yes)
        
        if msg.exec() != QMessageBox.StandardButton.Yes:
            return
        
        def _show_error(msg: str):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É–∂–±—ã", msg)
        
        try:
            if not self.app_instance:
                _show_error("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            args, name, winws_exe = collect_direct_strategy_args(self.app_instance)
            
            if not args:
                _show_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                return
            
            if not winws_exe or not os.path.exists(winws_exe):
                _show_error(f"winws.exe –Ω–µ –Ω–∞–π–¥–µ–Ω: {winws_exe}")
                return
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É–∂–±—ã
            from .autostart_direct_service import setup_direct_service
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª—É–∂–±—É
            ok = setup_direct_service(
                winws_exe=winws_exe,
                strategy_args=args,
                strategy_name=name,
                ui_error_cb=lambda msg: None  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            )
            
            if ok:
                self.status("–°–ª—É–∂–±–∞ Windows —Å–æ–∑–¥–∞–Ω–∞")
                self.update_ui(True)
                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—à–Ω–æ",
                    "‚úÖ –°–ª—É–∂–±–∞ Windows —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    "Zapret –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è\n"
                    "–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∫ —Å–ª—É–∂–±–∞ Windows.\n\n"
                    "–≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:\n"
                    "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –¥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É\n"
                    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–±–æ—è—Ö\n"
                    "‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                    "–°–ª—É–∂–±–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç."
                )
                self.accept()
            else:
                _show_error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª—É–∂–±—É Windows.\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    "1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "2. –ê–Ω—Ç–∏–≤–∏—Ä—É—Å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±\n"
                    "3. –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±"
                )
                
        except Exception as e:
            _show_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É–∂–±—ã: {e}")

    def _setup_direct_task(self, error_cb) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è Direct —Ä–µ–∂–∏–º–∞ (–ø—Ä–∏ –≤—Ö–æ–¥–µ)"""
        try:
            if not self.app_instance:
                error_cb("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                return False
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            args, name, winws_exe = collect_direct_strategy_args(self.app_instance)
            
            if not args:
                error_cb("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                return False
            
            if not winws_exe or not os.path.exists(winws_exe):
                error_cb(f"winws.exe –Ω–µ –Ω–∞–π–¥–µ–Ω: {winws_exe}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            return setup_direct_autostart_task(
                winws_exe=winws_exe,
                strategy_args=args,
                strategy_name=name,
                ui_error_cb=error_cb
            )
            
        except Exception as e:
            error_cb(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False

    def _setup_direct_service(self, error_cb) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è Direct —Ä–µ–∂–∏–º–∞ (–ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)"""
        try:
            if not self.app_instance:
                error_cb("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                return False
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            args, name, winws_exe = collect_direct_strategy_args(self.app_instance)
            
            if not args:
                error_cb("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
                return False
            
            if not winws_exe or not os.path.exists(winws_exe):
                error_cb(f"winws.exe –Ω–µ –Ω–∞–π–¥–µ–Ω: {winws_exe}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            return setup_direct_autostart_service(
                winws_exe=winws_exe,
                strategy_args=args,
                strategy_name=name,
                ui_error_cb=error_cb
            )
            
        except Exception as e:
            error_cb(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False